global function AutoPlayer_Init
global function AutoPlayer_DropBackpackItem
global function AutoPlayer_DropEquipment
global function AutoPlayer_HasMobileRespawnBeacon
global function AutoPlayer_EquipMobileRespawnBeacon
global function AutoPlayer_GetCarePackagePlacementPosition
global function AutoPlayer_CloseCraftingMenu
global function AutoPlayer_LootItemFromDeathbox
global function AutoPlayer_ForceLegend
global function AutoPlayer_GetPlayerNetInt
global function AutoPlayer_HasVaultKey
global function AutoPlayer_TranslateLootType
global function AutoPlayer_GetAllLootData
global function AutoPlayer_GetForbiddenCharacters
global function AutoPlayer_GetEquipmentSlotEquippedTier
global function AutoPlayer_GetCurrentAttachmentTier
global function AutoPlayer_GetPrematchGameState
global function AutoPlayer_GetPlayingGameState
global function AutoPlayer_GetSuddenDeathGameState
global function AutoPlayer_GetUpgradeStationPingValue







global function AutoPlayer_UpgradeCoreXPChanged


global function IsBotDefaultApperanceEnabled

struct
{
	array< ItemFlavor >	forbiddenCharacters
	int                 latestPingTicketID = -1
} file

void function AutoPlayer_Init()
{
	AddCallback_EntitiesDidLoad( AutoPlayer_EntitiesDidLoad )
	AddCallback_GameStateEnter( eGameState.Postmatch, AutoPlayer_GameStatePostmatch )













	
	

	
	string defaultCharactersAllowed = "character_lifeline character_bangalore character_bloodhound character_gibraltar character_pathfinder character_wraith"


	if ( NewPlayerBotQueueAreEnabled() )
	{
		defaultCharactersAllowed = "character_fuse character_bangalore character_bloodhound character_wraith character_octane character_seer character_vantage character_gibralter character_conduit character_lifeline"
	}


	if ( GetConVarBool( "autoplayer_gameplay_mode" ) == false )
		defaultCharactersAllowed = ""

	array< string > allowedChars = split( GetCurrentPlaylistVarString( "ap_characters_allowed", defaultCharactersAllowed ), WHITESPACE_CHARACTERS )

	if ( allowedChars.len() > 0 )
	{
		file.forbiddenCharacters = clone Loadout_Character().validItemFlavorList

		foreach ( string allowedChar in allowedChars )
		{
			if ( IsValidItemFlavorCharacterRef( allowedChar ) )
			{
				file.forbiddenCharacters.fastremovebyvalue( GetItemFlavorByCharacterRef( allowedChar ) )
			}
		}
	}



	if( UpgradeCore_IsEnabled() )
	{
		RegisterNetVarIntChangeCallback( UPGRADE_CORE_XP_NETINT, AutoPlayer_UpgradeCoreXPChanged )
	}



#if AUTO_PLAYER_DEV

			AddCallback_GameStateEnter( eGameState.WinnerDetermined, AutoPlayer_GameStateWinnerDetermined )



#endif
}

array< ItemFlavor > function AutoPlayer_GetForbiddenCharacters()
{
	return file.forbiddenCharacters
}

int function AutoPlayer_GetEquipmentSlotEquippedTier( entity player, string slot )
{
	LootData currentEquipment = EquipmentSlot_GetEquippedLootDataForSlot( player, slot )

	return currentEquipment.tier
}

void function AutoPlayer_PickLoadoutCallback()
{







































}

void function AutoPlayer_DropBackpackItem( entity player, string item, int dropCount )
{



		LootData data = SURVIVAL_Loot_GetLootDataByRef( item )
		Remote_ServerCallFunction( "ClientCallback_Sur_DropBackpackItem", data.index, dropCount )

}

void function AutoPlayer_DropEquipment( entity player, string slot )
{



		EquipmentAction( eLootAction.DROP, slot )

}


bool function AutoPlayer_HasVaultKey( entity player )
{
	 return HasVaultKey( player )
}

void function AutoPlayer_EquipMobileRespawnBeacon( entity player )
{
	entity gadget = player.GetNormalWeapon( WEAPON_INVENTORY_SLOT_GADGET )



	if( IsValid( gadget ) && gadget.GetWeaponClassName() == "mp_ability_mobile_respawn_beacon" )

	{
		entity activeWeapon = player.GetActiveWeapon( eActiveInventorySlot.mainHand )

		if ( activeWeapon != gadget )





			{
				LootData data = SURVIVAL_Loot_GetLootDataByRef( gadget.GetWeaponClassName() )
				Remote_ServerCallFunction( "ClientCallback_Sur_EquipGadget", data.index )
			}

	}
}

bool function AutoPlayer_HasMobileRespawnBeacon( entity player )
{
	entity gadget = player.GetNormalWeapon( WEAPON_INVENTORY_SLOT_GADGET )





	if( IsValid( gadget ) && gadget.GetWeaponClassName() == "mp_ability_mobile_respawn_beacon" )

		return true

	return false
}

vector function AutoPlayer_GetCarePackagePlacementPosition( entity player )
{
	CarePackagePlacementInfo placementInfo = GetCarePackagePlacementInfo( player )

	return placementInfo.origin
}

void function AutoPlayer_CloseCraftingMenu( entity player )
{



}

void function AutoPlayer_LootItemFromDeathbox( entity player, entity item, entity deathBox )
{
	RunClientCallback_PickupSurvivalItem( player, item, 0, deathBox )
}

void function AutoPlayer_ForceLegend( entity player, string legendReadableRef )
{




}

int function AutoPlayer_GetPlayerNetInt( entity player, string name )
{
	return player.GetPlayerNetInt( name )
}











































































int function AutoPlayer_TranslateLootType( int lootType )
{
	switch ( lootType )
	{
		case eLootType.MAINWEAPON:
			return AUTO_PLAYER_LOOT_TYPE_WEAPON

		case eLootType.AMMO:
			return AUTO_PLAYER_LOOT_TYPE_AMMO

		case eLootType.ARMOR:
			return AUTO_PLAYER_LOOT_TYPE_ARMOR

		case eLootType.HELMET:
			return AUTO_PLAYER_LOOT_TYPE_HELMET

		case eLootType.DATAKNIFE:
			return AUTO_PLAYER_LOOT_TYPE_VAULTKEYCARD


		case eLootType.SHIPKEYCARD:
			return AUTO_PLAYER_LOOT_TYPE_VAULTKEYCARD

		case eLootType.ATTACHMENT:
			return AUTO_PLAYER_LOOT_TYPE_ATTACHMENT

		case eLootType.HEALTH:
			return AUTO_PLAYER_LOOT_TYPE_HEALTH

		case eLootType.BACKPACK:
			return AUTO_PLAYER_LOOT_TYPE_BACKPACK

		case eLootType.ORDNANCE:
			return AUTO_PLAYER_LOOT_TYPE_ORDNANCE

		case eLootType.INCAPSHIELD:
			return AUTO_PLAYER_LOOT_TYPE_INCAPSHIELD

		case eLootType.GADGET:
			return AUTO_PLAYER_LOOT_TYPE_GADGET
	}

	return AUTO_PLAYER_LOOT_TYPE_OTHER
}

string function AutoPlayer_GetAllLootData()
{
	string allLootData

	int i = 0
	while ( SURVIVAL_Loot_IsLootIndexValid( i ) )
	{
		LootData lootData = SURVIVAL_Loot_GetLootDataByIndex( i )

		allLootData += lootData.ref + ","
		allLootData += lootData.tier.tostring() + ","
		allLootData += AutoPlayer_TranslateLootType( lootData.lootType ).tostring() + ","

		if ( lootData.ref in eAmmoPoolType )
		{
			allLootData += eAmmoPoolType[ lootData.ref ].tostring() + ""
		}
		else
		{
			allLootData += "-1"
		}

		if ( lootData.lootType == eLootType.MAINWEAPON )
		{
			allLootData += ","

			bool added = false

			foreach ( attachmentPoint in lootData.supportedAttachments )
			{
				array< string > attachmentRefs

				array< LootData > attachments = SURVIVAL_Loot_GetByType( eLootType.ATTACHMENT )
				foreach ( attachmentData in attachments )
				{
					if ( !CanAttachmentEquipToAttachPoint( attachmentData.ref, attachmentPoint ) )
						continue

					if ( !CanAttachToWeapon( attachmentData.ref, lootData.ref ) )
						continue

					if ( attachmentData.lootTags.contains( "FakeHopup" ) )
						continue

					attachmentRefs.append( attachmentData.ref )
				}

				foreach ( attachmentRef in attachmentRefs )
				{
					LootData attachmentLootData = SURVIVAL_Loot_GetLootDataByRef( attachmentRef )
					allLootData += attachmentLootData.index.tostring() + ";"
					added = true
				}
			}

			if ( !added )
				allLootData += "-1"
		}

		allLootData += "|"

		i++
	}

	return allLootData
}

int function AutoPlayer_GetCurrentAttachmentTier( int lootIndex, entity weapon )
{
	LootData lootData = SURVIVAL_Loot_GetLootDataByIndex( lootIndex )

	LootData attachedData
	attachedData.tier = -1

	string attachPoint = GetAttachPointForAttachmentOnWeapon( GetWeaponClassNameWithLockedSet( weapon ), lootData.ref )
	string installed = GetInstalledWeaponAttachmentForPoint( weapon, attachPoint )

	if ( SURVIVAL_Loot_IsRefValid( installed ) )
	{
		attachedData = SURVIVAL_Loot_GetLootDataByRef( installed )
	}

	return attachedData.tier
}

int function AutoPlayer_GetPrematchGameState()
{
	return eGameState.Prematch
}

int function AutoPlayer_GetPlayingGameState()
{
	return eGameState.Playing
}

int function AutoPlayer_GetSuddenDeathGameState()
{
	return eGameState.SuddenDeath
}

int function AutoPlayer_GetUpgradeStationPingValue()
{
	return ePingType.UPGRADE_STATION
}


void function AutoPlayer_UpgradeCoreXPChanged( entity player, int newXP )
{
	if ( player.IsBot() == false || AutoPlayer_IsAutoPlayer( player ) == false )
		return


		entity localPlayer = GetLocalViewPlayer()
		if ( !IsValid( localPlayer ) || !IsValid( player ) || player != localPlayer )
			return


	int unspentUpgradePoints = UpgradeCore_GetUnspentUpgradePoints( player )

	if ( unspentUpgradePoints > 0 )
	{
		array< int > upgradeChoices = UpgradeCore_GetCurrentLevelChoices( player )
		if ( upgradeChoices.len() == 0 )
			return

		int selection = upgradeChoices.getrandom()




			UpgradeCore_SelectOption( selection )

	}
}








































bool function IsBotDefaultApperanceEnabled()
{
	return GetCurrentPlaylistVarBool( "bots_use_default_appearance", false )
}