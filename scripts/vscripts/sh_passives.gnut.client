


global function PassivesShared_Init
global function ShPassives_Init




global function PlayerHasPassive
global function AddCallback_OnPassiveChanged
global function RemoveCallback_OnPassiveChanged
global function Pas_GetWattsonUltAccelExtraCount














#if DEV
global function DEV_PrintAllPassives
#endif




global function PlayerHasStealthMovement


global const string MIRAGE_DECOY_DROP_SCRIPTNAME 		= "mirage_decoy_drop"
const string MIRAGE_DECOY_DROP_MOVER_SCRIPTNAME 		= "mirage_decoy_drop_mover"
const float UPGRADE_MIRAGE_CLOAK_SPEED_BOOST_AMNT 		= 0.5
const float MIRAGE_DOWNED_CLOAK_DURATION 				= 5.0
const float MIRAGE_REVIVE_CLOAK_DURATION 				= 3.0







global function ServerToClient_ShowCloakHintText





global function CodeCallback_OnPassiveChanged








global enum ePassives
{
	INVALID = -1,

	
	PAS_NONE,
	PAS_ADRENALINE,
	PAS_ADS_SHIELD,
	PAS_FAST_HEAL,
	PAS_BONUS_SMALL_HEAL,
	PAS_GAS_GEAR,
	PAS_GAS_PROTECTION,
	PAS_MEDIC,
	PAS_MIRAGE,
	PAS_PATHFINDER,
	PAS_STARTER_PACK,
	PAS_TRACKING_VISION,
	PAS_VOICES,
	PAS_OCTANE,
	PAS_CRYPTO,
	PAS_GUARDIAN_ANGEL
	PAS_DEATHSTALKER,




	PAS_WARLORDS_IRE,



















	PAS_GUNNER,
	PAS_LOBA_EYE_FOR_QUALITY,



	PAS_BATTERY_POWERED,
	PAS_WATTSON_CIRCLE_REFUND,



	PAS_VALK,




		PAS_CONDUIT,










		PAS_WEAPON_SLING,

































		PAS_BATTLE_SENSE,







	PAS_DUMMIE,

	
	PAS_TAC_COOLDOWN_REDUCTION,
	PAS_AMMUVISION,
	PAS_ULTACCEL_HIGHLIGHT,
	
	PAS_HEALING_ITEM_VISION,
	PAS_LARGE_AMMO_STACKS,
	PAS_EXTRA_ULT_CHARGE,
	PAS_DEATHBOX_BATTERY_COUNT,
	PAS_BATTERY_STACK,

	
	PAS_UPGRADE_CAREPACKAGE_INSIGHT,
	PAS_UPGRADE_BEACON_SCAN,
	PAS_UPGRADE_CONSOLE_SCAN,
	PAS_MOD_UPGRADE_ONLY,

	PAS_PAS_UPGRADE_ONE,
	PAS_PAS_UPGRADE_TWO,
	PAS_PAS_UPGRADE_THREE,

	PAS_TAC_UPGRADE_ONE,
	PAS_TAC_UPGRADE_TWO,
	PAS_TAC_UPGRADE_THREE,

	PAS_ULT_UPGRADE_ONE,
	PAS_ULT_UPGRADE_TWO,
	PAS_ULT_UPGRADE_THREE,

	
	PAS_TAC_COOLDOWN_REDUCTION_EXTRA,

	
	PAS_EXPLOSIVE_DAMAGE_RESIST,
	PAS_EXPLOSIVE_DAMAGE_SPEED_BOOST,
	PAS_EXTRA_ARC_STARS,
	PAS_MOTHERLODE_RESISTANCE,

	
	PAS_INCREASED_HEALTH_REGEN,

	
	PAS_BOOSTED_JETPACK,
	PAS_EXTRA_SWARM_MISSILE,
	PAS_SKYWARD_LAUNCH_JETPACKS,
	PAS_EXTRA_JETPACK_FUEL,

	
	PAS_REVIVE_HEAL,

	
	PAS_GAS_HP_REGEN,
	PAS_GAS_HIGHLIGHT,

	
	PAS_AUTO_WHITE_RAVEN_SPAWN,

	
	PAS_STOWED_DRONE_SCAN,

	
	PAS_SHOTGUN_KNOCK_AUTO_RELOAD,

	
	PAS_TEAM_VOICES,
	PAS_NEARBY_TEAMS,
	PAS_FASTER_TAC_WINDUP,

	

	
	PAS_SQUADWIPE_SQUAD_COUNT,

	
	PAS_FASTER_REVIVES,
	PAS_SELF_RES,

	
	PAS_KNOCK_TAC_RESET,

	
	PAS_ULT_ACCEL_DOUBLE_CHARGE,
	PAS_OPTIC_HIGHLIGHT,
	PAS_ULT_ACCEL_CHARGE,


	PAS_ABTEST_UPGRADE_EMPTY1,
	PAS_ABTEST_UPGRADE_EMPTY2,
	PAS_ABTEST_UPGRADE_EMPTY3,
	
	
	
	
	
	

	






	
	
	

	PAS_ASH,

	PAS_DOWN_HEALTH,
	PAS_DOWN_REGEN,
	PAS_EXEC_BONUS_AMMO,
	PAS_EXEC_BONUS_ARMOR,
	PAS_EXEC_BONUS_HEALTH,
	PAS_EXEC_BONUS_ULT,
	PAS_HEALTH_BONUS_ALL,
	PAS_HEALTH_BONUS_MED,
	PAS_REDUCED_COOLDOWNS_TAC_ULT,
	PAS_REDUCED_COOLDOWN_TAC,
	PAS_REDUCED_COOLDOWN_ULT,
	PAS_SELF_REVIVE,
	PAS_SYRINGE_BONUS,
	PAS_FORTIFIED,
	PAS_LOWPROFILE,
	PAS_INFINITE_HEAL,
	PAS_EXTRA_MED_INV

	PAS_NOVA,
	PAS_PARIAH,
	PAS_FUSE,
	PAS_AXIOM,
	PAS_VANTAGE,
	PAS_LOCKDOWN,
	PAS_REVENANT_REWORK,

















		PAS_ALTER,
		PAS_ALTER_UPGRADE_ULT_DURATION,
		PAS_ALTER_UPGRADE_TAC_SCAN,









		PAS_REMOTE_DEATHBOX_INTERACT,











		PAS_EXTRA_ORDINANCE_SLOT,
		PAS_HEALING_ITEM_HIGHLIGHT,
		PAS_EXTRA_ALL_MED_INV,
		PAS_KNOCK_ADRENALINE,
		PAS_SQUADWIPE,
		PAS_ORDNANCE_HIGHLIGHT,










	_count,
}




global const table<int, string> PASSIVE_NAME_MAP = {
	[ePassives.PAS_REDUCED_COOLDOWNS_TAC_ULT] = "#PAS_COMBINED_COOLDOWN",
	[ePassives.PAS_EXEC_BONUS_ARMOR] = "#PAS_EXEC_BONUS_ARMOR",
	[ePassives.PAS_SELF_REVIVE] = "#PAS_AVAT",
	[ePassives.PAS_FAST_HEAL] = "#PAS_FAST_HEAL",
	[ePassives.PAS_BONUS_SMALL_HEAL ] = "#PAS_BONUS_SMALL_HEAL",
	[ePassives.PAS_GUARDIAN_ANGEL] = "#PAS_GUARDIAN_ANGEL",
	[ePassives.PAS_FORTIFIED] = "#PAS_FORTIFIED",
	[ePassives.PAS_LOWPROFILE] = "#PAS_LOW_PROFILE",
	[ePassives.PAS_EXTRA_MED_INV] = "#PAS_EXTRA_MED_INV",
}

global const table<int, string> PASSIVE_DESCRIPTION_SHORT_MAP = {
	[ePassives.PAS_REDUCED_COOLDOWNS_TAC_ULT] = "#PAS_COMBINED_COOLDOWN_DESC",
	[ePassives.PAS_EXEC_BONUS_ARMOR] = "#PAS_EXEC_BONUS_ARMOR_DESC",
	[ePassives.PAS_SELF_REVIVE] = "#PAS_AVAT_DESC",
	[ePassives.PAS_FAST_HEAL] = "#PAS_FAST_HEAL_DESC",
	[ePassives.PAS_BONUS_SMALL_HEAL] = "#PAS_BONUS_SMALL_HEAL_DESC",
	[ePassives.PAS_GUARDIAN_ANGEL] = "#PAS_GUARDIAN_ANGEL_DESC",
	[ePassives.PAS_FORTIFIED] = "#PAS_FORTIFIED_DESC",
	[ePassives.PAS_LOWPROFILE] = "#PAS_LOW_PROFILE_DESC",
	[ePassives.PAS_EXTRA_MED_INV] = "#PAS_EXTRA_MED_INV_DESC",
}


global const string PASSIVE_MOVER_SCRIPTNAME = "passive_mover"






struct
{





		table<int, array<void functionref( entity, int, bool, bool )> > passiveChangedCallbackListMap

		int wattson_ult_accel_extra

} file

global ItemFlavor& PAS_FORTIFIED_FLAV
global ItemFlavor& PAS_LOW_PROFILE_FLAV







void function PassivesShared_Init()
{

		PrecacheScriptString( MIRAGE_DECOY_DROP_SCRIPTNAME )
		file.wattson_ult_accel_extra = GetCurrentPlaylistVarInt( "wattson_ult_accel_extra", 1 )

		for ( int passiveIdx = 0; passiveIdx < ePassives._count; passiveIdx++ )
			file.passiveChangedCallbackListMap[ passiveIdx ] <- []



















































		PrecacheParticleSystem( $"P_core_DMG_boost_screen" )

}


void function ShPassives_Init()
{
	AddCallback_RegisterRootItemFlavors( OnRegisterRootItemFlavors )
}


void function OnRegisterRootItemFlavors()
{
	PAS_FORTIFIED_FLAV = expect ItemFlavor( RegisterItemFlavorFromSettingsAsset( $"settings/itemflav/ability/pas_fortified.rpak" ) )
	PAS_LOW_PROFILE_FLAV = expect ItemFlavor( RegisterItemFlavorFromSettingsAsset( $"settings/itemflav/ability/pas_low_profile.rpak" ) )
}





















































bool function PlayerHasPassive( entity player, int passive )
{
	if( !IsValid( player ) || !player.IsPlayer() )
		return false

	return player.HasPassive( passive )
}




bool function PlayerHasStealthMovement( entity player )
{
	return false
}




void function AddCallback_OnPassiveChanged( int passive, void functionref( entity, int, bool, bool ) callback )
{
	Assert( !file.passiveChangedCallbackListMap[ passive ].contains( callback ), "Tried to add a callback that was already added" )
	file.passiveChangedCallbackListMap[ passive ].append( callback )
}
void function RemoveCallback_OnPassiveChanged( int passive, void functionref( entity, int, bool, bool ) callback )
{
	Assert( file.passiveChangedCallbackListMap[ passive ].contains( callback ), "Tried to remove a callback that was not added" )
	file.passiveChangedCallbackListMap[ passive ].fastremovebyvalue( callback )
}









#if DEV
void function DEV_PrintAllPassives( entity player )
{
	for ( int passiveIdx = 0; passiveIdx < ePassives._count; passiveIdx++ )
	{
		if ( player.HasPassive( passiveIdx ) )
			printt( "Player " + player + " has passive: " + DEV_GetEnumStringSafe( "ePassives", passiveIdx ) )
	}
}
#endif









void function CodeCallback_OnPassiveChanged( entity player, int passiveIdx )
{
	if ( !IsValid( player ) )
		return

	bool nowHasPassive  = player.HasPassive( passiveIdx )
	bool didHavePassive = !nowHasPassive 

	foreach ( callback in file.passiveChangedCallbackListMap[passiveIdx] )
		callback( player, passiveIdx, didHavePassive, nowHasPassive )
}




























































































































































































































































void function ServerToClient_ShowCloakHintText()
{
	entity player = GetLocalViewPlayer()

	if (IsValid(player))
	{
		AnnouncementMessageRight( player, "#CLOAK_UNARMED_WARNING" )
	}
}

































































































































































































































































































































































































int function Pas_GetWattsonUltAccelExtraCount()
{
	return file.wattson_ult_accel_extra
}

