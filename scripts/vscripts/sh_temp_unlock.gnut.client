
global function TempUnlock_IsEnabled
global function TempUnlock_GetActiveEvents
global function TempUnlock_GetLatestActiveEvent
global function TempUnlock_IsCharacterUnlocked
global function TempUnlock_WillCharacterUnlockDuringEvent
global function TempUnlock_GetActiveUnlockedCharacters
global function TempUnlock_HasCharacterUnlock
global function TempUnlock_GetCharacterUnlockChallengeSets
global function TempUnlock_GetCharacterUnlockFeaturedChallenge
global function TempUnlock_GetCharacterUnlockChallenges
global function TempUnlock_GetCurrentCharacterUnlockChallenges
global function TempUnlock_GetCurrentCharacterUnlockFeaturedChallenge

const PLAYLIST_KILLSWITCH_VAR = "temp_unlock_flav_enabled"














bool function TempUnlock_IsEnabled()
{
	bool isEnabled = GetCurrentPlaylistVarBool( PLAYLIST_KILLSWITCH_VAR, true )
	return isEnabled
}

array<ItemFlavor> function TempUnlock_GetActiveEvents( int unixTime )
{
	array<ItemFlavor> events
	if ( !TempUnlock_IsEnabled() )
	{
		return events
	}

	
	Assert( IsItemFlavorRegistrationFinished() )
	foreach ( ItemFlavor ev in GetAllItemFlavorsOfType( eItemType.calevent_temp_unlock ) )
	{
		if ( CalEvent_IsActive( ev, unixTime ) )
		{
			events.append( ev )
		}
	}

	
	events.sort( int function( ItemFlavor a, ItemFlavor b ){
		if ( CalEvent_GetStartUnixTime( a ) > CalEvent_GetStartUnixTime( b ) )
			return -1
		else if ( CalEvent_GetStartUnixTime( a ) < CalEvent_GetStartUnixTime( b ) )
			return 1
		return 0
	} )

	return events
}

ItemFlavor ornull function TempUnlock_GetLatestActiveEvent( int unixTime )
{
	array<ItemFlavor> tempUnlockEvents = TempUnlock_GetActiveEvents( GetUnixTimestamp() )
	return tempUnlockEvents.len() > 0 ? tempUnlockEvents[0] : null
}

array<ItemFlavor> function TempUnlock_GetUpcomingEvents( int unixTime )
{
	array<ItemFlavor> events
	if ( !TempUnlock_IsEnabled() )
	{
		return events
	}

	Assert( IsItemFlavorRegistrationFinished() )
	foreach ( ItemFlavor ev in GetAllItemFlavorsOfType( eItemType.calevent_temp_unlock ) )
	{
		if ( !CalEvent_HasStarted( ev, unixTime ) )
		{
			events.append( ev )
		}
	}
	return events
}

bool function TempUnlock_WillCharacterUnlockDuringEvent( ItemFlavor characterFlav, ItemFlavor event )
{
	Assert( ItemFlavor_GetType( characterFlav ) == eItemType.character )

	if ( !CalEvent_IsActive( event, GetUnixTimestamp() ) )
	{
		 return false
	}
	asset wantedCharacterAsset     = ItemFlavor_GetAsset( characterFlav )
	array<ItemFlavor> upcomingEvents = TempUnlock_GetUpcomingEvents( GetUnixTimestamp() )
	foreach ( ItemFlavor tempUnlockEvent in upcomingEvents )
	{
		if ( !CalEvent_HasStarted( tempUnlockEvent, CalEvent_GetFinishUnixTime( event ) ) )
		{
			continue
		}

		asset tempUnlockAsset = ItemFlavor_GetAsset( tempUnlockEvent )
		foreach ( var characterBlock in IterateSettingsAssetArray( tempUnlockAsset, "characters" ) )
		{
			asset characterAsset = GetSettingsBlockAsset( characterBlock, "itemFlavor" )
			if ( characterAsset == wantedCharacterAsset )
			{
				return true
			}
		}
	}
	return false
}

bool function TempUnlock_IsCharacterUnlocked( ItemFlavor characterFlav )
{
	Assert( ItemFlavor_GetType( characterFlav ) == eItemType.character )

	
	asset wantedCharacterAsset     = ItemFlavor_GetAsset( characterFlav )
	array<ItemFlavor> activeEvents = TempUnlock_GetActiveEvents( GetUnixTimestamp() )
	foreach ( ItemFlavor tempUnlockEvent in activeEvents )
	{
		asset tempUnlockAsset = ItemFlavor_GetAsset( tempUnlockEvent )
		foreach ( var characterBlock in IterateSettingsAssetArray( tempUnlockAsset, "characters" ) )
		{
			asset characterAsset = GetSettingsBlockAsset( characterBlock, "itemFlavor" )
			if ( characterAsset == wantedCharacterAsset )
			{
				return true
			}
		}
	}

	return false
}

array<ItemFlavor> function TempUnlock_GetActiveUnlockedCharacters( ItemFlavor tempUnlockEvent )
{
	Assert( ItemFlavor_GetType( tempUnlockEvent ) == 	eItemType.calevent_temp_unlock )
	asset tempUnlockAsset = ItemFlavor_GetAsset( tempUnlockEvent )
	array<ItemFlavor> characters = []
	foreach ( var characterBlock in IterateSettingsAssetArray( tempUnlockAsset, "characters" ) )
	{
		asset characterAsset = GetSettingsBlockAsset( characterBlock, "itemFlavor" )
		characters.append( GetItemFlavorByAsset( characterAsset) )
	}

	return characters
}


bool function TempUnlock_HasCharacterUnlock( ItemFlavor tempUnlockEvent )
{
	asset tempUnlockAsset = ItemFlavor_GetAsset( tempUnlockEvent )
	var settingsBlock = GetSettingsBlockForAsset( ItemFlavor_GetAsset( tempUnlockEvent ) )
	int numCharacterUnlocks = GetSettingsArraySize( GetSettingsBlockArray( settingsBlock, "characters" ) )
	return numCharacterUnlocks > 0
}


array<ChallengeSet> function TempUnlock_GetCharacterUnlockChallengeSets( ItemFlavor tempUnlockEvent )
{
	array<ChallengeSet> challengeSets = []
	asset tempUnlockAsset = ItemFlavor_GetAsset( tempUnlockEvent )

	foreach ( var characterBlock in IterateSettingsAssetArray( tempUnlockAsset, "characters" ) )
	{
		asset challengeSetAsset = GetSettingsBlockAsset( characterBlock, "challengeSet" )
		if ( challengeSetAsset != $"" )
		{
			ItemFlavor challengeSetFlav = GetItemFlavorByAsset( challengeSetAsset )
			ChallengeSet challengeSet = ChallengeSet_GetByGUID( challengeSetFlav.guid )
			challengeSets.append( challengeSet )
		}
	}
	return challengeSets
}


ItemFlavor ornull function TempUnlock_GetCharacterUnlockFeaturedChallenge( ItemFlavor tempUnlockEvent )
{
	ItemFlavor ornull characterUnlockChallenge
	array<ChallengeSet> challengeSets = TempUnlock_GetCharacterUnlockChallengeSets( tempUnlockEvent )
	if ( challengeSets.len() == 0 )
	{
		return null
	}

	
	ChallengeSet topChallengeSet = challengeSets[0]
	return topChallengeSet.mainChallenge
}


array<ItemFlavor> function TempUnlock_GetCharacterUnlockChallenges( ItemFlavor tempUnlockEvent )
{
	array<ItemFlavor> challenges = []
	array<ChallengeSet> challengeSets = TempUnlock_GetCharacterUnlockChallengeSets( tempUnlockEvent )
	foreach ( challengeSet in challengeSets )
	{
		challenges.extend( challengeSet.challenges )
	}

	return challenges
}


array<ItemFlavor> function TempUnlock_GetCurrentCharacterUnlockChallenges( entity player )
{
	array<ItemFlavor> challenges
	int now = GetUnixTimestamp()

	
	foreach ( ItemFlavor tempUnlockEvent in TempUnlock_GetActiveEvents( now ) )
	{
		if ( TempUnlock_HasCharacterUnlock( tempUnlockEvent ) )
		{
			array<ItemFlavor> unlockChallenges = TempUnlock_GetCharacterUnlockChallenges( tempUnlockEvent )
			foreach( challenge in unlockChallenges )
			{
				if ( Challenge_IsAssigned( player, challenge ) )
				{
					challenges.append( challenge )
				}
			}
			break
		}
	}

	return challenges
}


ItemFlavor ornull function TempUnlock_GetCurrentCharacterUnlockFeaturedChallenge( entity player )
{
	int now = GetUnixTimestamp()
	foreach ( ItemFlavor tempUnlockEvent in TempUnlock_GetActiveEvents( now ) )
	{
		
		if ( TempUnlock_HasCharacterUnlock( tempUnlockEvent ) )
		{
			return TempUnlock_GetCharacterUnlockFeaturedChallenge( tempUnlockEvent )
		}
	}
	return null
}