global function ExtendedUse






global function DefaultExtendedUseRui
global function ExtendedUseTextOverride


global enum eExtendedUseRuiType
{
	COCKPIT,
	FULLSCREEN,
	NONE
}

global struct ExtendedUseSettings
{
	void functionref( entity ent, entity player, ExtendedUseSettings settings ) successFunc
	void functionref( entity ent, entity player, ExtendedUseSettings settings ) failureFunc
	void functionref( entity ent, entity player, ExtendedUseSettings settings ) startFunc
	void functionref( entity ent, entity player, ExtendedUseSettings settings ) endFunc

	int    useInputFlag = IN_USE_LONG
	string loopSound
	string successSound
	float  duration = 1.0
	float jumpstartTime = 0.0
	entity entityArg = null
	bool   requireMatchingUseEnt = false
	int    disableWeaponTypes = 0 
	float serverStartTime = 0.0

		string                                                                               hint
		string                                                                               holdHint = "%use_long%"
		int                                                                                  displayRuiType = eExtendedUseRuiType.COCKPIT
		asset                                                                                displayRui
		void functionref( entity ent, entity player, var rui, ExtendedUseSettings settings ) displayRuiFunc
		asset                                                                                icon
		bool                                                                                 successPlayPickupEffect = false









}

struct
{

		var extendedUseRui

} file









void function ExtendedUse( entity ent, entity player, ExtendedUseSettings settings, bool shouldSetBusy = true )
{
	ent.EndSignal( "OnDestroy" )
	player.EndSignal( "OnContinousUseStopped" )
	player.EndSignal( "OnDeath" )
	player.EndSignal( "BleedOut_OnStartDying" )

	if ( player.p.isInExtendedUse )
		return

	if ( ent.e.isBusy )
		return

	if ( shouldSetBusy )
		ent.e.isBusy = true
	player.p.isInExtendedUse = true
	player.p.lastExtededUseEnt = ent

	if ( settings.startFunc != null )
		settings.startFunc( ent, player, settings )


		if ( settings.displayRuiType != eExtendedUseRuiType.NONE )
		{
			var rui
			if ( settings.displayRuiType == eExtendedUseRuiType.FULLSCREEN )
			{
				rui = CreateFullscreenRui( settings.displayRui )
			}
			else
			{
				rui = CreateCockpitRui( settings.displayRui )
			}

			settings.displayRuiFunc( ent, player, rui, settings )
			file.extendedUseRui = rui

			OnThreadEnd(
				function() : ( rui )
				{
					file.extendedUseRui = null
					RuiDestroy( rui )
				}
			)
		}

		entity localViewPlayer = GetLocalViewPlayer()


	table<string, bool> e
	e["success"] <- false


		if ( settings.loopSound != "" && (!IsValid( localViewPlayer ) || localViewPlayer.DoesShareRealms( player )) )
			EmitSoundOnEntity( ent, settings.loopSound )


	int oldUsableValue
	int startingStanceHandle






























	
	

	OnThreadEnd(
		function() : ( e, ent, player, settings, oldUsableValue, startingStanceHandle )
		{
			if ( settings.endFunc != null )
				settings.endFunc( ent, player, settings )

			if ( IsValid( ent ) )
			{
				ent.e.isBusy = false
				if ( settings.loopSound != "" )
					StopSoundOnEntity( ent, settings.loopSound )
			}

			if ( IsValid( player ) )
			{
				thread TryClearPlayerExtendedUse( player, settings.useInputFlag )
			}


































		}
	)

	waitthread ExtendedUse_TrackContinuousUse( player, ent, settings.duration, settings.jumpstartTime, settings.useInputFlag, settings.requireMatchingUseEnt )

	if ( settings.successFunc != null )
		thread settings.successFunc( ent, player, settings )

	if ( settings.loopSound != "" )
		StopSoundOnEntity( ent, settings.loopSound )


	if ( !IsValid( localViewPlayer ) || localViewPlayer.DoesShareRealms( player ) )
	{
		if ( settings.successSound != "" )
			EmitSoundAtPosition( TEAM_UNASSIGNED, ent.GetOrigin(), settings.successSound )
	}







		if ( settings.successPlayPickupEffect )
			PlayLootPickupFeedbackFX( ent )


	e["success"] = true
}


void function ExtendedUse_TrackContinuousUse( entity player, entity useTarget, float useTime, float jumpStartTime, int inputFlags, bool requireMatchingUseEnt )
{
	player.EndSignal( "OnDeath", "OnDestroy" )
	useTarget.EndSignal( "OnDeath", "OnDestroy" )

	table result = {}
	result.success <- false

	float maxDist2 = DistanceSqr( player.GetOrigin(), useTarget.GetOrigin() ) + (64 * 64)
	OnThreadEnd
	(
		function() : ( player, result )
		{
			if ( !result.success )
			{
				player.Signal( "OnContinousUseStopped" )
			}
		}
	)

	float endTime = Time() + useTime
	while ( Time() + jumpStartTime < endTime )
	{
		if ( !UseHeld( player, inputFlags ) )
			return

		if ( player.IsPhaseShifted() )
			return

		if ( GetCurrentPlaylistVarBool( "interrupted_stops_extended_use", false ) )
		{
			if ( StatusEffect_HasSeverity( player, eStatusEffect.interrupted ) )
			{
				return
			}
		}

		bool checkMoveDistance = !IsBitFlagSet(useTarget.GetUsableValue(), USABLE_FROM_EXTENDED_RANGE)


			if ( !checkMoveDistance && useTarget.GetNetworkedClassName() == "prop_death_box"  )
			{
				checkMoveDistance = IsPlayerWithinStandardDeathBoxUseDistance( player, useTarget )
			}

		if ( checkMoveDistance )
		{
			vector eyePos      = player.UseableEyePosition( useTarget )
			vector eyePos2D    = <eyePos.x, eyePos.y, 0.0>
			vector useOrigin   = useTarget.GetOrigin()
			vector useOrigin2D = <useOrigin.x, useOrigin.y, 0.0>
			float vertDist     = player.GetOrigin().z - useTarget.GetOrigin().z
			if ( (DistanceSqr( eyePos2D, useOrigin2D ) > maxDist2) || ((vertDist * vertDist) > maxDist2) )
				return
		}

		if ( requireMatchingUseEnt && player.GetUseEntity() != useTarget )
			return

		WaitFrame()
	}

	result.success = true
}

bool function UseHeld( entity player, int inputFlag )
{
	if ( player.IsInputCommandHeld( inputFlag ) )
		return true

	return false
}

void function TryClearPlayerExtendedUse( entity player, int inputFlags )
{
	player.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function () : ( player )
		{
			if ( IsValid( player ) )
			{
				player.p.isInExtendedUse = false
			}
		}
	)

	while ( UseHeld( player, inputFlags ) )
		WaitFrame()
}


void function DefaultExtendedUseRui( entity ent, entity player, var rui, ExtendedUseSettings settings )
{
	RuiSetString( rui, "holdButtonHint", settings.holdHint )
	RuiSetString( rui, "hintText", settings.hint )
	RuiSetGameTime( rui, "startTime", Time() )
	RuiSetGameTime( rui, "endTime", Time() + settings.duration )
}

string function ExtendedUseTextOverride( entity ent )
{
	if ( ent.e.isBusy )
		return " "

	return ""
}

