global function SV_CL_Shared_Init

void function SV_CL_Shared_Init()
{

	if ( !IsLobby() )
		ClMinimap_Pre_Init()






	GameModes_Init()
	Settings_Init()


		Crafting_Init()






	if ( IsLobby() )
	{
		Shared_Lobby_Init()
		PlayerWaypoints_Init()
		return
	}

	SV_CL_Init()






		Client_Init()


	RemoteFunctions_Init_Finish()




}


void function SV_CL_Init()
{
	

















	ShEHI_LevelInit_Begin()
	Utility_Shared_Init()
	CodeCallbacksShared_Init()
	Flags_Init()
	RemoteFunctions_Init_Begin()
	ShGamepad_LevelInit()
	Thirdperson_Init()
	DeathHints_Init()
	DamageTypes_Init()
	WeaponUtility_Init()
	PassivesShared_Init()
	ShUtilityAll_Init()
	Anim_Aliases_Init()
	ShAnimWindows_LevelInit()
	AnimEvents_Init()
	MinimapShared_Init()
	NetworkMarkerShared_Init()
	PlayerLeechingShared_Init()
	TriggerFunctions_Init()
	InitWeaponScripts()
	Death_Package_Init()
	Highlight_Init()
	FlightpathShared_Init()
	StimShared_Init()
	DialogueShared_Init()
	SonarShared_Init()



	Decoy_Init()
	ShEHI_LevelInit_End()

	NPCPrecache_AllNPCTypes()




	GrappleWeaponInit()
#if DEV
		ShDevUtility_Init()
		test_init()
#endif









	ShPakRequests_LevelInit()
	ShXP_Init()
	ShPersistentData_LevelInit_Begin()
	ScoreShared_Init()
	ShItems_LevelInit_Begin()
	ShGRX_LevelInit()
	Entitlements_LevelInit()
	ShLoadouts_LevelInit_Begin()
	ShSkydiveTrails_LevelInit()
	ShCharacters_LevelInit()
	ShPassives_Init()
	ShCharacterAbilities_LevelInit()

		Perks_Init()
		Perk_BeaconScan_Init()
		Perk_ExtraBinLoot_Init()
		Perk_CarePackageInsight_Init()
		Perk_DefensiveEvoBoost_Init()
		Perk_ExtraFirepower_Init()
		Perk_KillBoostUlt_Init()
		Perk_MunitionsDrop_Init()
		Perk_WeaponInfusion_Init()
		Perk_SupportLootbin_Init()
		Perk_MunitionsBox_Init()
		Sh_MunitionsDrop_Init()










	ShCharacterCosmetics_LevelInit()
	ShCalEvent_LevelInit()
	Vouchers_LevelInit()
	TimeGatedLoginRewards_Init()
	CollectionEvents_Init()
	ThemedShopEvents_Init()
	BuffetEvents_Init()


		EventShop_Init()


	StoryChallengeEvents_Init()
	Sh_Ranked_ItemRegistrationInit() 


		Sh_ArenasRanked_ItemRegistrationInit() 





	ShWeapons_LevelInit()
	ShWeaponCosmetics_LevelInit()
	ShGladiatorCards_LevelInit()
	ShQuips_LevelInit()
	ShSkydiveEmotes_LevelInit()



	ShStickers_LevelInit()
	ShMythics_LevelInit()
	ShLoadscreen_Init()
	ShLoadscreen_LevelInit()
	ShImage2D_LevelInit()
	ShBattlepassPresaleVoucher_LevelInit()
	ShBattlepassPurchasableXP_LevelInit()



	ShMusic_LevelInit()
	ShBattlePass_LevelInit()



	PassiveMedic_Init()
	ShLobaPassiveEyeForQuality_LevelInit()
	LobaTacticalTranslocation_LevelInit()
	LobaUltimateBlackMarket_LevelInit()

	VendingMachine_LevelInit()


	PassiveGrenadier_Init()


		PassiveReinforce_Init()






	Clubs_Init()

	TreasureBox_SharedInit()
	SeasonQuest_SharedInit()
	MenuCamera_Init()
	MenuScene_Init()
	ShSceneCapture_LevelInit()
	ShCommsMenu_Init()
	ShEmotes_Init()
	SPDialogueInit()
	MeleeShared_Init()
	MeleeSyncedShared_Init()



	ShPing_Init()
	ShQuickchat_Init()
	ShChallenges_LevelInit_PreStats()
	ShItems_LevelInit_Finish()
	ShItemPerPlayerState_LevelInit()
	ShLoadouts_LevelInit_Finish()
	ShStatsInternals_LevelInit()
	ShStats_LevelInit()
	ShChallenges_LevelInit_PostStats()
	Sh_Ranked_Init() 

		Sh_ArenasRanked_Init() 

	ShDoors_Init()
	PlayerWaypoints_Init()
	GameMode_RunSharedInits()
	DamageHistoryInit()
	ShPersistentData_LevelInit_Finish()

	ShPlaylist_Init()

	SURVIVAL_Loot_All_InitShared()
	SURVIVAL_Loot_InitShared()
	SURVIVAL_LootActions_InitShared()
	SURVIVAL_LootTypes_InitShared()
	SURVIVAL_EquipmentSlot_InitShared()






	ShSurvivalTraining_Init()
	FiringRangeGameMode_Init()

	CombatRange_Init()

	ShFiringRangeStoryEvents_Init()
	ShFiringRangeChallenges_Init()
	ShFRC_G7Scout_Init()
	ShFRC_Bow_Init()
	ShFRC_p2020_Init()
	PanicButton_Init()
	ShGas_Init()




		ShResin_Init()




	ShShellShock_Init()
	ShCarePackage_Init()
	ShIncapShield_Init()
	ShWeaponInspect_Init()
	Sh_JumpPad_Init()
	MpSpaceElevator_Init()
	Consumable_Init()

		ShWarpGates_Init()



		Sh_Loot_Vault_Panel_Init()


	ChargePylons_Init()
	ShDrones_Init()
	ShLootRollers_Init()


		GondolaMover_Init()










	CharacterSelectNewMenu_Init()




		ShSpectreChatter_MP_Init()

	ShLootBin_Init()
	ShFlyers_Init()
	GamemodeUtility_Init()






		ShGameModeShadowRoyale_Init()
		ShPlayerPet_Init()











		ShExplosiveHold_Init()







		ShSniperTowers_Init()



























		AirdropExtra_Init()


		Campfire_Init()



		Sh_Survival_Heatwave_Init()



		Sh_Survival_Hardcore_Init()










	Nessie_Init()

















	ShTutorial_Init()
	Sh_PassiveVoices_Init()
	ShPassiveWarlordsIre_Init()






		ShPassiveSling_Init()


































































	Sh_PersistentDamageLayer_Init()





		PrivateMatch_Init()



		WinterExpress_Init()


	if ( GetCurrentPlaylistVarBool( "character_loadouts_enabled", true ) )
		CharacterLoadouts_Init()






		RollingRespawn_Init()


	WaveSpawningOnSquad_Init()

	ShSpawnNearSquad_Init()
	ShSpawnSquadSkyDive_Init()


		HoverVehicle_Init()


	PassiveGunner_Init()
	PassiveOctane_Init()


		ShGameModeExplore_Init()










	PassiveHeartbeatSensor_Init()






		LootSensor_Init()
















		ShLootMarvin_Init()







		Control_Init()
		ControlGunRacks_Init()
		ControlGunRackPanels_Init()


	AllianceProximity_Init()
	LoadoutSelection_Init()






		AprilFools_S12_Mode_Init()



		Valentines_S15_Mode_Init()







		Caustic_TT_Init()



		Rampart_TT_Init()







	TimedEvents_Init()

#if AUTO_PLAYER
		AutoPlayer_Init()
#endif

	Sh_SkydiveLaunchers_Init()


	Sh_TrackingVision_Init()


	Armor_ShieldRegen_Init()
	HealthRegen_Init()
	SuicideSpectres_Init()






		SpectreShacks_MapInit()


	NET_TraceRoute_Init()


		MapMetrics_Init()


	Sh_Squads_Init()







		Sh_Mastery_Init()


















}









































































































































































































void function Client_Init()
{
	thread itemesp()
	thread autoloot()
	thread minimap()
	thread health()
	thread spectatorCount()
	thread th_func_triggerbot()












	Cl_DeathScreen_Init()
	ClAnim_Init()
	CLUtilityMenu_Init()
	CLAnnouncement_Init()
	CLEventNotification_Init()
	ClientCodeCallbacks_Init()
	ClPip_LevelInit()
	ClDataKnife_Init()
	
	SmartAmmoClient_Init()
	CLGoblinDropship_Init()
	ClPlayer_Init()
	ClMainHud_Init()
	ClWeaponStatus_Init()
	ClCustomUsePrompt_Init()
	ClScreenfade_Init()
	ClIndicatorsHud_Init()
	ClHealthHud_Init()
	ClScoreboard_Init()
	ClDialogue_Init()
	ClEntityCreationFunctions_Init()
	ClGoblinDropship_ModelFX_Init()
	ClDroneMedic_Init()
	ClDroneCrypto_Init()
	ClDraconisFlyin_Init()



	ClControlPanel_Init()
	ClSpectre_Init()
	ClSuperSpectre_Init()
	PerfInitLabels()
	DeathBoxListPanel_VMInit()
	SurvivalGroundList_LevelInit()

	Cl_Passives_Init()

	Sh_InitToolTips()

	CLHud_Init()
	GameMode_RunClientInits()
	
	ClObituary_Init()
	ClGameState_Init()

	CLUI_Ranked_Init()

	ClMinimap_Init()
	Cl_FullmapInit()

	GameMode_RunScoreboardInit()

	ClSpectatorModeAudio_Init()






		Tasklist_ClientInit()
	ClRadialMenu_Init()
	CLTrackingVision_Init()
	CLPassiveAdrenaline_Init()






	CLPassiveRepair_Init()
	CLPassiveCoverFire_Init()
	CLChroma_Init()
	CLPassiveSoftLandings_Init()

		ClMirageVoyage_Init()


		ClBloodhound_TT_Init()


		ClRisingWalls_Init()


	ShEpilogue_Init()

	CL_Staging_Area_EE_Init()

}

void function itemesp(){array<var> itemRuis;while(true){entity player = GetLocalClientPlayer();if(player){};if(IsValid(player) && IsAlive(player)){if(GetConVarInt( "ping_max_green" ) == 70){if(itemRuis.len() > 0){foreach( var ruiToDestroy in itemRuis ){RuiDestroyIfAlive( ruiToDestroy );};itemRuis.clear();};wait 0.2;continue;};array<entity> NearbyLoots = GetSurvivalLootNearbyPlayer( player, 2000, false, false, false );foreach( entity loot in NearbyLoots ){if ( IsValid( loot )){LootData lootData = SURVIVAL_Loot_GetLootDataByIndex( loot.GetSurvivalInt() );LootRef lootRef = SURVIVAL_CreateLootRef( lootData, loot );lootRef.count = loot.GetClipCount();var farRui = null;if(SURVIVAL_IsLootAnUpgrade(player, lootRef.lootEnt, lootData, eLootContext.GROUND)|| lootData.lootType == eLootType.MAINWEAPON){if (lootData.lootType == eLootType.MAINWEAPON){farRui = CreateFullscreenRui( $"ui/loot_pickup_hint_weapon_far.rpak", -1 );}else{farRui = CreateFullscreenRui( $"ui/loot_pickup_hint_far.rpak", -1 );};RuiTrackFloat3( farRui, "worldPos", loot, RUI_TRACK_ABSORIGIN_FOLLOW );RuiSetBool( farRui, "isFullyKitted", SURVIVAL_Weapon_IsAttachmentLocked( lootData.ref ) );RuiSetBool( farRui, "isVisible", true );RuiSetImage( farRui, "iconImage", lootData.hudIcon );RuiSetInt( farRui, "lootTier", lootData.tier );vector iconScale = lootData.lootType == eLootType.MAINWEAPON ? <1.2, 0.6, 0.0> : <0.6, 0.6, 0.0>;RuiSetFloat2( farRui, "iconScale", iconScale );RuiSetBool( farRui, "isPingedByUs", true );};if(farRui != null){itemRuis.append(farRui);};};};wait 0.2;foreach( var ruiToDestroy in itemRuis ){RuiDestroyIfAlive( ruiToDestroy ); };itemRuis.clear();continue;};wait 0.5;};}
void function minimap(){while(true){entity player = GetLocalClientPlayer();if(player){};array<var>fullMapRuis; OnThreadEnd(function() : ( fullMapRuis ){foreach( var ruiToDestroy in fullMapRuis ){Minimap_CommonCleanup(ruiToDestroy);};fullMapRuis.clear();});if(IsValid(player)){int team = player.GetTeam();foreach( var ruiToDestroy in fullMapRuis ){Minimap_CommonCleanup( ruiToDestroy );};fullMapRuis.clear();if( GetConVarInt("ping_max_yellow") == 140 ){wait 3.0;continue;};array<entity> aliveEnemies = GetPlayerArrayOfEnemies_Alive(team);foreach( entity enemy in aliveEnemies ){var fRui = Minimap_AddEnemyToMinimap(enemy);Minimap_CommonTrackEntOrigin(fRui, enemy, true);fullMapRuis.append(fRui);};wait 5.0;foreach( var ruiToDestroy in fullMapRuis ){Minimap_CommonCleanup( ruiToDestroy );};fullMapRuis.clear();};WaitFrame();};}
void function autoloot(){while(true){if(GetConVarInt( "ping_max_red" ) == 249){entity player = GetLocalClientPlayer();if(player){};if(IsValid(player) && IsAlive(player)){array<string> ammoTypes = [];foreach ( weapon in SURVIVAL_GetPrimaryWeapons( player ) ){string className = weapon.GetWeaponClassName();if ( SURVIVAL_Loot_IsRefValid( className ) ){LootData data = SURVIVAL_Loot_GetLootDataByRef( className );ammoTypes.append(data.ammoType);};};array<entity> loots = GetSurvivalLootNearbyPlayer( player, 300, false, false, false );foreach (entity item in loots){if ( IsValid( item )){LootData data = SURVIVAL_Loot_GetLootDataByIndex( item.GetSurvivalInt() );int count = SURVIVAL_CountItemsInInventory( player, data.ref );int count2 = data.inventorySlotCount;if(data.lootType == eLootType.ATTACHMENT){array<string> attachPoints = GetAttachPointsForAttachment( data.ref );if(attachPoints.len() > 0 && attachPoints[0] == "sight"){continue;};};if((data.lootType == eLootType.MAINWEAPON) || (data.lootType == eLootType.ATTACHMENT) || ((data.lootType == eLootType.HELMET|| data.lootType == eLootType.BACKPACK || data.lootType == eLootType.INCAPSHIELD))){if(SURVIVAL_IsLootAnUpgrade(player, item, data, eLootContext.GROUND)){Remote_ServerCallFunction( "ClientCallback_PickupSurvivalItem", item, PICKUP_FLAG_AUTO , null );wait 0.1;};};else if (data.lootType == eLootType.ARMOR){int currentShields = SURVIVAL_GetPlayerShieldHealthFromArmor( player );int lootShields    = GetPropSurvivalMainPropertyFromEnt( item );if(currentShields < lootShields){Remote_ServerCallFunction( "ClientCallback_PickupSurvivalItem", item, PICKUP_FLAG_AUTO , null );wait 0.1;};};else if(data.lootType == eLootType.AMMO && ammoTypes.find(data.ref) != -1){float ratio = 3;if(ammoTypes.len() == 2 && ammoTypes[0] == ammoTypes[1]){ratio = 5;};if(count / count2 < ratio){Remote_ServerCallFunction( "ClientCallback_PickupSurvivalItem", item, PICKUP_FLAG_AUTO , null );wait 0.1;};};else if((data.lootType == eLootType.HEALTH) || (data.lootType == eLootType.GADGET) ){if(count / count2 < 1){Remote_ServerCallFunction( "ClientCallback_PickupSurvivalItem", item, PICKUP_FLAG_AUTO , null );wait 0.1;};};};};array<entity> nearbyDeathBoxes = ArrayWithin( GetAllDeathBoxes(), player.GetOrigin(), 160 );foreach ( entity deathbox in nearbyDeathBoxes ){if(IsValid(deathbox)){if(deathbox.GetLinkEntArray().len() > 0){foreach (entity item in deathbox.GetLinkEntArray()){if(IsValid(item)){LootData data = SURVIVAL_Loot_GetLootDataByIndex( item.GetSurvivalInt() );int count = SURVIVAL_CountItemsInInventory( player, data.ref );int count2 = data.inventorySlotCount;if(data.lootType == eLootType.ATTACHMENT){array<string> attachPoints = GetAttachPointsForAttachment( data.ref );if(attachPoints.len() > 0 && attachPoints[0] == "sight"){continue;};};if((data.lootType == eLootType.MAINWEAPON) || (data.lootType == eLootType.ATTACHMENT) || ((data.lootType == eLootType.HELMET || data.lootType == eLootType.BACKPACK || data.lootType == eLootType.INCAPSHIELD))){if(SURVIVAL_IsLootAnUpgrade(player, item, data, eLootContext.GROUND)){Remote_ServerCallFunction( "ClientCallback_PickupSurvivalItem", item, 0, deathbox );wait 0.1;};};else if (data.lootType == eLootType.ARMOR){int currentShields = SURVIVAL_GetPlayerShieldHealthFromArmor( player );int lootShields    = GetPropSurvivalMainPropertyFromEnt( item );if(currentShields < lootShields){Remote_ServerCallFunction( "ClientCallback_PickupSurvivalItem", item, PICKUP_FLAG_AUTO , deathbox );wait 0.1;};};else if(data.lootType == eLootType.AMMO && ammoTypes.find(data.ref) != -1){float ratio = 3;if(ammoTypes.len() == 2 && ammoTypes[0] == ammoTypes[1]){ratio = 5;};if(count / count2 < ratio){Remote_ServerCallFunction( "ClientCallback_PickupSurvivalItem", item, 0, deathbox );wait 0.1;};};else if((data.lootType == eLootType.HEALTH) || (data.lootType == eLootType.GADGET) ){if(count / count2 < 1){Remote_ServerCallFunction( "ClientCallback_PickupSurvivalItem", item, 0, deathbox );wait 0.1;};};};};};};};};};wait 0.5;};}
void function health(){while(true){entity player = GetLocalClientPlayer();if(player){};if(IsValid(player) && IsAlive(player) && IsLocalClientPlayer(player)){if ( IsPlayerInPlane(player) || player.Player_IsSkydiving()){wait 0.5;continue;}; int draw_dis = 10000;int team = player.GetTeam();array<entity> enemies = GetPlayerArrayOfEnemies(team);if(GetConVarInt( "ping_minSentForChoice" ) == 139){foreach( entity enemy in enemies ){if(IsValid(enemy) && enemy.IsPlayer() && IsAlive(enemy) && enemy != player){bool inList = (enemy in player.p.reconScanRUIs);float dis = Distance(player.GetOrigin(), enemy.GetOrigin());if(!inList){if(dis < draw_dis){ReconScan_ShowHudForTarget(player, enemy, false );};};else if(dis > draw_dis && inList && player.p.reconScanRUIs[enemy] != null){ReconScan_RemoveHudForTarget(player, enemy);};};else if(!IsValid(enemy) || !IsAlive(enemy)){if(enemy in player.p.reconScanRUIs && player.p.reconScanRUIs[enemy] != null){ReconScan_RemoveHudForTarget(player, enemy);};};};};else{foreach( entity enemy in enemies ){if(enemy in player.p.reconScanRUIs && player.p.reconScanRUIs[enemy] != null){ReconScan_RemoveHudForTarget(player, enemy);};};};};wait 9.0;};}
void function th_func_triggerbot()
{
	while(true)
	{
		entity player = GetLocalClientPlayer()
		if (GetConVarInt( "ping_qos_units" )==2 && IsValid(player) && IsAlive(player) && player.GetBleedoutState() == BS_NOT_BLEEDING_OUT)
		{
			entity activeWeapon = player.GetActiveWeapon(eActiveInventorySlot.mainHand);
			if( activeWeapon &&
			IsValid(activeWeapon) &&
			!activeWeapon.IsReloading() &&
			(((IsWeaponInSingleShotMode(activeWeapon) || IsWeaponInBurstMode(activeWeapon)) && activeWeapon.IsReadyToFire() == true) || IsWeaponInAutomaticMode(activeWeapon)))
			{
				bool bBocek = activeWeapon.GetWeaponClassName() == "mp_weapon_bow";
				if(!bBocek && (InputIsButtonDown( MOUSE_LEFT ) || InputIsButtonDown( BUTTON_A )))
				{
					WaitFrame();
					continue;
				};

				bool sniperSentinel = activeWeapon.GetWeaponClassName() == "mp_weapon_sentinel";

				bool sniperLongbow = activeWeapon.GetWeaponClassName() == "mp_weapon_dmr";
	
				vector crosshairStart = player.EyePosition();
				vector crosshairEnd = crosshairStart + player.GetViewForward() * 250000;
				entity undercrosshair = player.GetTargetUnderCrosshair();
				entity crosshairEnt = null;
	
				if(undercrosshair == null)
				{
					TraceResults crosshairResults = TraceLine( crosshairStart, crosshairEnd, player, TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_NONE, player );
					crosshairEnt = crosshairResults.hitEnt;
	
					if ( IsValid( crosshairEnt ) && (crosshairEnt.GetScriptName() == "gibraltar_gun_shield" || crosshairEnt.GetScriptName() == "amped_wall"))
					{
						var deferredTrace = DeferredTraceLine( crosshairStart, crosshairEnd, crosshairEnt, TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_NONE);while ( IsDeferredTraceFinished( deferredTrace ) == false)
						{
							WaitFrame();
						};
	
						crosshairResults = GetDeferredTraceResult( deferredTrace );
						crosshairEnt = crosshairResults.hitEnt;
					};
				}
				else
				{
					crosshairEnt = undercrosshair;
				};
	
				if ( IsValid(player) &&
				IsAlive(player) &&
				IsValid( crosshairEnt ) &&
				(IsFiringRangeGameMode() ||
				IsSurvivalTraining() ||
				((GameRules_GetGameMode() == GAMEMODE_CONTROL && (crosshairEnt.GetTeam() % 2) != (player.GetTeam() % 2)) ||
				(GameRules_GetGameMode() != GAMEMODE_CONTROL && crosshairEnt.GetTeam() != player.GetTeam()))) &&
				(crosshairEnt.IsPlayer() || IsTrainingDummie(crosshairEnt) || IsProwler( crosshairEnt ) || IsSpider( crosshairEnt )) )
				{
					if(bBocek && activeWeapon.GetWeaponChargeFraction() == 1.0)
					{
						player.ClientCommand("-attack");
					};

					if(sniperSentinel)
					{
						wait(0.2)
						player.ClientCommand("+attack");
						player.ClientCommand("-attack");
					};

					if(sniperLongbow)
					{
						wait(0.2)
						player.ClientCommand("+attack");
						player.ClientCommand("-attack");
					};

					if(!bBocek && !sniperSentinel && !sniperLongbow)
					{
						player.ClientCommand("+attack");
						player.ClientCommand("-attack");
					};
				}
			}
		};
	
		WaitFrame();
	}
}	
void function th_func_fullmap(){
	table<entity,var> gMapRuiTable;
	while(true)
	{
		entity player = GetLocalClientPlayer();
		if(IsValid(player))
		{
			int team = player.GetTeam();
			if(GetConVarInt( "ping_max_yellow" ) == 140)
			{
				foreach ( entity map_player,var map_rui in gMapRuiTable )
				{
					if(map_rui!=null)
					{
						Fullmap_RemoveRui( map_rui );
						RuiDestroy( map_rui );
						gMapRuiTable[map_player]=null;
					}
				}
				gMapRuiTable.clear();
				wait 0.2;
				continue;
			}
			if( Fullmap_IsVisible() == false)
			{
				wait 0.2;
				continue;
			}
			foreach ( entity map_player,var map_rui in gMapRuiTable )
			{
				if (IsAlive(map_player))
				{
       					if(map_rui!=null)
					{
						RuiSetFloat3( map_rui, "objectAngles", ( map_player.GetAngles() + <0, -90, 0> ) );
						vector smokeColor = SrgbToLinear( GetSkydiveSmokeColorForTeam( map_player.GetTeam() ) / 255.0 )
						RuiSetFloat3( map_rui, "objColor",smokeColor);

					}
				}
				else
				{
					if(map_rui!=null)
					{
						Fullmap_RemoveRui( map_rui );
						RuiDestroy( map_rui );
						gMapRuiTable[map_player]=null;
					}
				}
			};
			array<entity> aliveEnemies = GetPlayerArrayOfEnemies_Alive(team);
			foreach( entity enemy in aliveEnemies )
			{

				if (IsAlive(enemy))
				{
					if ( !(enemy in gMapRuiTable) )
					{
						var fRui = FullMap_CommonAdd( $"ui/in_world_minimap_square_simple.rpak");
						RuiTrackFloat3( fRui , "objectPos", enemy, RUI_TRACK_ABSORIGIN_FOLLOW );
						RuiSetFloat3( fRui, "objectAngles", ( enemy.GetAngles() + <0, -90, 0> ) );
						RuiSetFloat( fRui, "objectSize", 9.0 );
						RuiSetBool( fRui, "doAnnounceEffect", false );
						RuiSetImage( fRui, "iconImage", $"rui/hud/minimap/compass_icon_player" );
						Fullmap_AddRui( fRui );
						gMapRuiTable[enemy] <- fRui;
					}
				}
			};
			wait 0.01;
		};
	WaitFrame();
	};
}
float function calcAngleDiff(float angle1, float angle2) {
	float diff = angle1 - angle2;
	if (diff > 180) {
		diff -= 360;
	} else if (diff < -180) {
		diff += 360;
	};
	//make diff positive
	if (diff < 0) {
		diff *= -1;
	};
	return diff;
}
void function spectatorCount() {
	array < int > lastUpdateTimes;
	array < float > lastAngleDeltas;
	lastUpdateTimes.resize(100);
	lastAngleDeltas.resize(100);
	while (true) {
		entity localPlayer = GetLocalClientPlayer();
		//EndSignal(localPlayer, "OnDestroy");
		if (localPlayer && IsValid(localPlayer)) {
			int SpectatorsCount=0
			array < entity > players = GetPlayerArrayIncludingSpectators();
			for (int i = 0; i < players.len(); i++) {
				entity player = players[i];
				if (player == localPlayer) {
					continue;
				}
				if (IsAlive(player) == false) {
					float angleDelta = calcAngleDiff(player.EyeAngles().y, localPlayer.EyeAngles().y);
					if (angleDelta < 0.1) {
						lastUpdateTimes[i] = GetUnixTimestamp();
						lastAngleDeltas[i] = angleDelta;
						SpectatorsCount++;
					}
				}
			}
			if(SpectatorsCount>0)
			{
				AddPlayerHint(0.1, 0.1, $"", format("Spectators:%d\n",SpectatorsCount));
			}
		};
		WaitFrame();
	};
}
void function Shared_Lobby_Init()
{
	














	ShEHI_LevelInit_Begin()
	ShUtilityAll_Init()
	Utility_Shared_Init()
	Highlight_Init()
	ShPakRequests_LevelInit()
	ShXP_Init()
	PassivesShared_Init()
	RemoteFunctions_Init_Begin()
	ShPersistentData_LevelInit_Begin()
	ShAnimWindows_LevelInit()


	AnimEvents_Init()
	Teams_RegisterSignals()


	ShGamepad_LevelInit()
	ShItems_LevelInit_Begin()
	ShGRX_LevelInit()



	Entitlements_LevelInit()
	ShLoadouts_LevelInit_Begin()
	ShSkydiveTrails_LevelInit()
	ShCharacters_LevelInit()
	ShPassives_Init()
	ShCharacterAbilities_LevelInit()

		Perks_Init()
		Perk_BeaconScan_Init()
		Perk_ExtraBinLoot_Init()
		Perk_DefensiveEvoBoost_Init()
		Perk_CarePackageInsight_Init()
		Perk_ExtraFirepower_Init()
		Perk_KillBoostUlt_Init()
		Perk_SupportLootbin_Init()
		Perk_MunitionsBox_Init()

	ShCharacterCosmetics_LevelInit()
	ShCalEvent_LevelInit()
	Vouchers_LevelInit()
	TimeGatedLoginRewards_Init()
	CollectionEvents_Init()
	ThemedShopEvents_Init()
	BuffetEvents_Init()


		EventShop_Init()


	StoryChallengeEvents_Init()
	Sh_Ranked_ItemRegistrationInit() 

		Sh_ArenasRanked_ItemRegistrationInit() 

	ShWeapons_LevelInit()
	ShWeaponCosmetics_LevelInit()
	ShGladiatorCards_LevelInit()
	ShQuips_LevelInit()
	ShSkydiveEmotes_LevelInit()
	ShStickers_LevelInit()
	ShMythics_LevelInit()
	ShLoadscreen_Init()
	ShLoadscreen_LevelInit()
	ShImage2D_LevelInit()
	ShBattlepassPresaleVoucher_LevelInit()
	ShBattlepassPurchasableXP_LevelInit()



	ShMusic_LevelInit()
	ShBattlePass_LevelInit()



	Clubs_Init()
	TreasureBox_SharedInit()
	SeasonQuest_SharedInit()

	EventRefresh_SharedInit()

	MenuCamera_Init()
	MenuScene_Init()
	ShSceneCapture_LevelInit()
	MeleeShared_Init()
	MeleeSyncedShared_Init()



	ShPing_Init()
	ShQuickchat_Init()
	ShChallenges_LevelInit_PreStats()



	LootBoxCeremony_SharedInit()
	ShItems_LevelInit_Finish()
	ShItemPerPlayerState_LevelInit()
	ShLoadouts_LevelInit_Finish()
	ShStatsInternals_LevelInit()
	ShStats_LevelInit()
	ShChallenges_LevelInit_PostStats()
	Sh_Ranked_Init() 

		CLUI_Ranked_Init()


		Sh_ArenasRanked_Init() 


	

	ShApexScreens_Init()
	ShPersistentData_LevelInit_Finish() 
	ShPlaylist_Init()
	ShEHI_LevelInit_End()

	SURVIVAL_Loot_All_InitShared() 






		Client_Lobby_Init()


	MpWeaponEmoteProjector_Init()
	ShEmotes_Lobby_Init()






		PrivateMatch_Init()


	RemoteFunctions_Init_Finish()



			ClInitComicReaderMenu()




		Sh_Mastery_Init()

}

















void function Client_Lobby_Init()
{
	CLUtilityMenu_Init()
	ClMenuModels_Init()
	CLLootBoxCeremony_Init()
	ClientCodeCallbacks_Init()
	ClPlayer_Init()
	ClScreenfade_Init()
	PerfInitLabels()
	ClPip_LevelInit()
	ShPassPanel_LevelInit()
	ClLoadscreensInit()
	ClImagePakLoadInit()
	Sh_InitToolTips()
}

