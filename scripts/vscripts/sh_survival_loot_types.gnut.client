global function SURVIVAL_LootTypes_InitShared

global function IsLootTypeValid
global function GetLootTypeData

global function RegisterCustomItemGroundAction





global const bool AUTOEQUIP_ATTACHMENTS = true

global struct LootTypeData
{
	int index

	int equipmentAction = eLootAction.NONE
	int equipmentAltAction = eLootAction.DROP
	int functionref( entity player ) equipmentPrimarySwapFunc
	int functionref( entity player ) equipmentCharacterAction1Func
	int functionref( entity player ) equipmentCharacterAction2Func


	int backpackAction = eLootAction.NONE
	int backpackAltAction = eLootAction.DROP
	int functionref( entity player ) backpackCharacterAction1Func
	int functionref( entity player ) backpackCharacterAction2Func





	LootActionStruct functionref( entity player, LootRef lootRef ) groundActionFunc
	LootActionStruct functionref( entity player, LootRef lootRef ) groundAltActionFunc

	int priority

	string equipmentSlot
}

global typedef CustomItemGroundActionCB_t LootActionStruct functionref( entity player, LootRef lootRef )

struct
{
	table<int, LootTypeData> lootTypeData
} file


void function SURVIVAL_LootTypes_InitShared()
{
	LootTypeData lt

	lt = RegisterLootType( eLootType.MAINWEAPON )
	lt.equipmentAction = eLootAction.EQUIP
	lt.equipmentSlot = ""
	lt.groundActionFunc = GroundAction_ForWeapons
	lt.equipmentPrimarySwapFunc = EquipmentPrimarySwapAction_ForWeapons
	lt.groundAltActionFunc = GroundAltAction_ForWeapons
	lt.equipmentCharacterAction1Func = EquipmentCharacterAction1_ForWeapons
	lt.equipmentCharacterAction2Func = EquipmentCharacterAction2_ForWeapons




	lt = RegisterLootType( eLootType.AMMO )
	lt.equipmentSlot = ""
	lt.backpackAction = eLootAction.DROP
	lt.backpackAltAction = eLootAction.DROP_ALL
	lt.groundActionFunc = GroundAction_ForBackpackItem
	lt.groundAltActionFunc = GroundAltAction_ForAmmo




	lt = RegisterLootType( eLootType.ARMOR )
	lt.equipmentSlot = "armor"
	lt.groundActionFunc = GroundAction_ForEquipment
	lt.groundAltActionFunc = GroundAltAction_ForEquipment




	lt = RegisterLootType( eLootType.INCAPSHIELD )
	lt.equipmentSlot = "incapshield"
	lt.groundActionFunc = GroundAction_ForEquipment
	lt.groundAltActionFunc = GroundAltAction_ForEquipment

	lt = RegisterLootType( eLootType.JUMPKIT )
	lt.equipmentSlot = "jumpkit"
	lt.groundActionFunc = GroundAction_ForEquipment
	lt.groundAltActionFunc = GroundAltAction_ForEquipment

	lt = RegisterLootType( eLootType.BACKPACK )
	lt.equipmentSlot = "backpack"
	lt.groundActionFunc = GroundAction_ForEquipment
	lt.groundAltActionFunc = GroundAltAction_ForEquipment
















	lt = RegisterLootType( eLootType.HELMET )
	lt.equipmentSlot = "helmet"
	lt.groundActionFunc = GroundAction_ForEquipment
	lt.groundAltActionFunc = GroundAltAction_ForEquipment

	lt = RegisterLootType( eLootType.ATTACHMENT )
	lt.equipmentSlot = ""
	lt.equipmentAction = eLootAction.REMOVE
	lt.equipmentAltAction = eLootAction.WEAPON_TRANSFER
	lt.backpackAction = eLootAction.ATTACH_TO_ACTIVE
	lt.groundActionFunc = GroundAction_ForAttachments
	lt.groundAltActionFunc = GroundAltAction_ForAttachments

	lt = RegisterLootType( eLootType.ORDNANCE )
	lt.equipmentSlot = ""
	lt.backpackAction = eLootAction.EQUIP
	lt.groundActionFunc = GroundAction_ForBackpackItem
	lt.groundAltActionFunc = GroundAltAction_ForOrdnance




	lt = RegisterLootType( eLootType.HEALTH )
	lt.equipmentSlot = ""
	lt.equipmentAction = eLootAction.EQUIP
	lt.backpackAction = eLootAction.USE
	lt.groundActionFunc = GroundAction_ForBackpackItem
	lt.groundAltActionFunc = GroundAltAction_ForHealth





	lt = RegisterLootType( eLootType.BLANK )
	lt.equipmentSlot = ""
	lt.groundActionFunc = GroundAltAction_None
	lt.groundAltActionFunc = GroundAltAction_None





		lt = RegisterLootType( eLootType.DATAKNIFE )
		lt.equipmentSlot = ""
		lt.groundActionFunc = GroundAction_ForBackpackItem
		lt.groundAltActionFunc = GroundAltAction_None






		lt = RegisterLootType( eLootType.SHIPKEYCARD )
		lt.equipmentSlot = ""
		lt.groundActionFunc = GroundAction_ForBackpackItem
		lt.groundAltActionFunc = GroundAltAction_None





	lt = RegisterLootType( eLootType.CUSTOMPICKUP )
	lt.equipmentSlot = ""
	lt.groundActionFunc = GroundAction_ForCustomItem
	lt.groundAltActionFunc = GroundAltAction_None
	lt.backpackAction = eLootAction.USE


		lt = RegisterLootType( eLootType.MARVIN_ARM )
		lt.equipmentSlot = ""
		lt.groundActionFunc = GroundAction_ForCustomItem
		lt.groundAltActionFunc = GroundAltAction_None
		lt.backpackAction = eLootAction.NONE










	lt = RegisterLootType( eLootType.RESOURCE ) 
	lt.equipmentSlot = ""
	lt.equipmentAction = eLootAction.EQUIP
	lt.backpackAction = eLootAction.NONE
	lt.groundActionFunc = GroundAction_ForResource
	lt.groundAltActionFunc = GroundAltAction_None

	lt = RegisterLootType( eLootType.LOCKBOX )
	lt.equipmentSlot = ""
	lt.groundActionFunc = GroundAction_ForBackpackItem
	lt.groundAltActionFunc = GroundAltAction_None










	lt = RegisterLootType( eLootType.GADGET )
	lt.equipmentSlot = "gadgetslot"
	lt.equipmentAction = eLootAction.EQUIP
	lt.groundActionFunc = GroundAction_ForEquipment
	lt.groundAltActionFunc = GroundAltAction_ForEquipment

























		lt = RegisterLootType( eLootType.COLLECTABLE_NESSIE )
		lt.equipmentSlot = ""
		lt.backpackAction = eLootAction.NONE
		lt.groundActionFunc = GroundAction_ForBackpackItem
		lt.groundAltActionFunc = GroundAltAction_None



		lt = RegisterLootType( eLootType.CANDY_PICKUP )
		lt.equipmentSlot = ""
		lt.groundActionFunc = GroundAction_ForCustomItem
		lt.groundAltActionFunc = GroundAltAction_None
		lt.backpackAction = eLootAction.USE



		lt = RegisterLootType( eLootType.EVO_CACHE )
		lt.equipmentSlot = ""
		lt.groundActionFunc = GroundAction_ForCustomItem
		lt.groundAltActionFunc = GroundAltAction_None
		lt.backpackAction = eLootAction.USE










	
























}


LootTypeData function RegisterLootType( int lootType )
{
	LootTypeData lt
	lt.index = lootType

	file.lootTypeData[ lootType ] <- lt

	return lt
}


bool function IsLootTypeValid( int lootType )
{
	return (lootType in file.lootTypeData)
}


LootTypeData function GetLootTypeData( int lootType )
{
	return file.lootTypeData[ lootType ]
}

table<string, CustomItemGroundActionCB_t> s_customItemGroundActionCallbacks
void function RegisterCustomItemGroundAction( string lootRef, CustomItemGroundActionCB_t func )
{
	Assert( !(lootRef in s_customItemGroundActionCallbacks) )
	s_customItemGroundActionCallbacks[lootRef] <- func
}

LootActionStruct function GroundAction_ForCustomItem( entity player, LootRef lootRef )
{
	if ( lootRef.lootData.ref in s_customItemGroundActionCallbacks )
		return s_customItemGroundActionCallbacks[lootRef.lootData.ref]( player, lootRef )

	return GroundAction_ForBackpackItem( player, lootRef )
}


LootActionStruct function GroundAction_ForBackpackItem( entity player, LootRef lootRef )
{
	LootData lootData = lootRef.lootData
	LootActionStruct as

	as.action = eLootAction.PICKUP


		
		if ( lootData.ref.find( XPCACHE_BASIC_NAME ) == 0 )
		{
			if( UpgradeCore_IsPlayerAtMaxLevel( player ) )
			{
				as.action = eLootAction.NONE

					as.displayString = Localize( "#LEGEND_UPGRADE_EVO_CACHE_PICKUP_MAX_LEVEL_DENY" )

			}
		}


	return as
}


LootActionStruct function GroundAction_ForResource( entity player, LootRef lootRef )
{
	LootActionStruct as

	if ( player.GetShieldHealthMax() == 0 )
	{
		as.action = eLootAction.NONE
		as.displayString = "#REASON_NO_SHIELDS"
	}
	else if ( GetShieldHealthFrac( player ) == 1.0 )
	{
		as.action = eLootAction.NONE
		as.displayString = "#REASON_FULL_SHIELDS"
	}
	else
	{
		as.action = eLootAction.USE
	}

	return as
}


LootActionStruct function GroundAction_ForEquipment( entity player, LootRef lootRef )
{
	LootActionStruct as

	LootData lootData     = lootRef.lootData
	LootTypeData lt       = GetLootTypeData( lootData.lootType )
	EquipmentSlot es      = Survival_GetEquipmentSlotDataByRef( lt.equipmentSlot )
	LootData equippedData = EquipmentSlot_GetEquippedLootDataForSlot( player, lt.equipmentSlot )
	int tier              = equippedData.tier

	bool isDifferent = equippedData.ref != lootData.ref
	bool hasPerk     = (lootData.passive != ePassives.INVALID)

	if ( tier == 0 )
	{
		as.action = eLootAction.EQUIP
	}








	if  ( lootData.lootType == eLootType.GADGET )
	{
		if ( tier == 0 ) 
		{
			as.action = eLootAction.EQUIP
		}
		else if ( lootData.ref != equippedData.ref ) 
		{
			as.action = eLootAction.SWAP
		}
		else 
		{
			
			
			

			if ( player != GetLocalClientPlayer() )
			{
				as.action = eLootAction.NONE
				return as
			}


			entity gadgetWeapon = player.GetNormalWeapon( WEAPON_INVENTORY_SLOT_GADGET )
			if( IsValid( gadgetWeapon ) )
			{
				int ammo = gadgetWeapon.GetWeaponPrimaryClipCount()
				int maxAmmo = gadgetWeapon.GetWeaponPrimaryClipCountMax()
				if( ammo == 0 ) 
				{
					as.action = eLootAction.NONE
					return as
				}
				if( ammo < maxAmmo ) 
				{
					as.action = eLootAction.PICKUP
				}
			}
		}
	}
	else if ( lootData.tier > tier || (lootData.ref != equippedData.ref && lootData.tier == tier && hasPerk) )
	{
		as.action = eLootAction.EQUIP
	}
	else
	{
		if ( lootData.lootType == eLootType.ARMOR )
		{
			int currentShields = SURVIVAL_GetPlayerShieldHealthFromArmor( player )
			int lootShields    = GetPropSurvivalMainProperty( lootRef.lootProperty )

			if ( EvolvingArmor_IsEquipmentEvolvingArmor( lootData.ref ) )
			{
				
				if ( !EvolvingArmor_IsEquipmentEvolvingArmor( equippedData.ref ) )
				{
					if ( currentShields < lootShields )
					{
						as.action = eLootAction.EQUIP
						return as
					}
					else
					{
						as.action = eLootAction.SWAP
						return as
					}
				}

				
				if ( EvolvingArmor_IsEquipmentEvolvingArmor( equippedData.ref ) )
				{
					int currentEvoProgress = EvolvingArmor_GetEvolutionProgress( player )
					int lootEvoProgress = lootRef.lootExtraProperty

					if ( lootData.tier > equippedData.tier || currentShields < lootShields )
					{
						as.action = eLootAction.EQUIP
						return as
					}
					else if ( lootData.tier == equippedData.tier && currentEvoProgress > lootEvoProgress )
					{
						if ( currentShields == lootShields )
							as.action = eLootAction.EQUIP
						else
							as.action = eLootAction.SWAP
						return as
					}
				}
			}
			else
			{
				
				if ( EvolvingArmor_IsEquipmentEvolvingArmor( equippedData.ref ) )
				{
					if ( currentShields >= lootShields )
					{
						as.action = eLootAction.SWAP
						return as
					}
				}
			}


			if ( lootData.lootType == eLootType.ARMOR && UpgradeCore_IsEquipmentArmorCore( lootData.ref ) )
			{
				currentShields += GetPlayerExtraShields( player )
			}


			if ( currentShields < lootShields )
			{
				as.action = eLootAction.EQUIP
				return as
			}
		}

		as.action = eLootAction.NONE
		if ( lootData.ref == equippedData.ref )
			as.displayString = "#REASON_YOU_HAVE_THIS"

		else if ( es.ref == "armor" && UpgradeCore_IsEquipmentArmorCore( lootData.ref ) )
			as.displayString = "#REASON_YOU_HAVE_A_BETTER"

		else if ( es.ref == "armor" )
			as.displayString = "#REASON_YOU_HAVE_BETTER"
		else
			as.displayString = "#REASON_YOU_HAVE_A_BETTER"

			as.displayString = Localize( as.displayString, Localize( es.title ) )

	}


		if ( lootData.lootType == eLootType.ARMOR && UpgradeCore_IsEquipmentArmorCore( lootData.ref ) )
		{
			int currentShields = SURVIVAL_GetPlayerShieldHealthFromArmor( player ) + GetPlayerExtraShields( player )
			if( currentShields != 0 )
			{
				int lootShields    = GetPropSurvivalMainProperty( lootRef.lootProperty )
				as.action = currentShields < lootShields ? eLootAction.EQUIP : eLootAction.NONE
				return as
			}
			else if ( equippedData.ref == "" )
			{
				as.action = eLootAction.EQUIP
				return as
			}
		}



		
		if ( lootData.ref.find( COPYCAT_NAME ) == 0 )
		{
			array<entity> offhandWeapons = player.GetOffhandWeapons()
			string kitAbilityRef = GetWeaponInfoFileKeyField_GlobalString ( lootData.ref, "disguise_ability" )

			if ( kitAbilityRef != "" )
			{
				foreach ( offhand in offhandWeapons )
				{
					if ( kitAbilityRef == offhand.GetWeaponClassName() )
					{
						as.action = eLootAction.NONE

						as.displayString = Localize( "#SURVIVAL_PICKUP_COPYCAT_KIT_DUPE_LEGEND_ERROR" )

					}
				}
			}
		}



		
		if ( lootData.ref.find( XPCACHE_BASIC_NAME ) == 0 || lootData.ref.find( XPCACHE_LARGE_NAME ) == 0 || lootData.ref.find( XPCACHE_ENHANCED_NAME ) == 0 ) 
		{
			if( UpgradeCore_IsPlayerAtMaxLevel( player ) )
			{
				as.action = eLootAction.NONE

					as.displayString = Localize( "#SURVIVAL_PICKUP_COPYCAT_KIT_DUPE_LEGEND_ERROR" )

			}
		}


	return as
}

LootActionStruct function GroundAction_ForWeapons( entity player, LootRef lootRef )
{
	LootActionStruct as
	as.displayString = ""


	if ( SURVIVAL_CountPrimaryWeapons( player ) <= 1 || InventoryHasSingleAkimboWeapon( player, lootRef.lootData.ref ) != -1 )



	{
		as.action = eLootAction.EQUIP
		return as
	}

	do
	{
		if ( DoesPlayerHaveWeaponSling( player ) )
		{
			if ( player.IsSwitching( eActiveInventorySlot.mainHand ) )
			{
				if ( player.GetSelectedWeapon( eActiveInventorySlot.mainHand ) != GetPlayerSlingWeapon( player ) )
					break
			}
			else if ( !IsPlayerHoldingSlingWeapon( player ) )
			{
				break
			}

			if ( !CanPlayerEquipLootEntToSling( player, lootRef.lootEnt, false ) )
			{
				as.action = eLootAction.NONE
				as.displayString = "#REASON_NO_TRANSFER_SLING_BASE_WEAPON"

					as.displayString = Localize( as.displayString )


				return as
			}
			else if ( IsBallisticUltActive( player ) && !IsPlayerWeaponSlingEmpty( player ) )
			{
				as.action = eLootAction.NONE
				as.displayString = "#REASON_NO_TRANSFER_TO_SLING_ULT"

					as.displayString = Localize( as.displayString )


				return as
			}
		}

		break

	} while( true )

	as.action = eLootAction.SWAP
	array<entity> weapons = SURVIVAL_GetPrimaryWeaponsIncludingSling( player, true )

	if ( SURVIVAL_Loot_IsRefValid( weapons[0].GetWeaponClassName() ) )
	{
		LootData weaponData = SURVIVAL_Loot_GetLootDataByRef( weapons[0].GetWeaponClassName() )
		as.additionalData = weaponData
	}
	return as
}

LootActionStruct function GroundAction_ForAttachments( entity player, LootRef lootRef )
{
	LootData lootData = lootRef.lootData

	LootTypeData lt = GetLootTypeData( lootData.lootType )

	LootActionStruct as = SURVIVAL_GetActionForAttachment( player, lootData, false, true, true )

	
	if ( as.action == eLootAction.NONE )
		return GroundAction_ForBackpackItem( player, lootRef )

	return as
}

LootActionStruct function GroundAltAction_ForAttachments( entity player, LootRef lootRef )
{
	if ( GroundAction_ForAttachments( player, lootRef ).action != eLootAction.PICKUP )
		return GroundAction_ForBackpackItem( player, lootRef )

	return GroundAltAction_None( player, lootRef )
}


LootActionStruct function GroundAltAction_ForEquipment( entity player, LootRef lootRef )
{
	LootActionStruct as
	as.action = eLootAction.NONE
	as.displayString = ""
	return as
}

LootActionStruct function GroundAltAction_ForAmmo( entity player, LootRef lootRef )
{
	LootActionStruct as
	as.displayString = ""
	as.action = eLootAction.NONE









	return as
}

LootActionStruct function GroundAltAction_ForWeapons( entity player, LootRef lootRef )
{
	LootActionStruct as
	as.displayString = ""
	as.action = eLootAction.NONE

	if( DoesPlayerHaveWeaponSling( player ) )
	{
		if( CanPlayerEquipLootEntToSling( player, lootRef.lootEnt, false ) )
		{
			if( IsBallisticUltActive( player ) && !IsPlayerWeaponSlingEmpty( player ) )
			{
				as.displayString = "#REASON_NO_TRANSFER_TO_SLING_ULT"

					as.displayString = Localize( as.displayString )

			}
			else
			{
				if ( IsPlayerWeaponSlingEmpty( player ) )
					as.action = eLootAction.EQUIP_TO_SLING
				else
					as.action = eLootAction.SWAP_TO_SLING
			}
		}
		else
		{
			as.displayString = "#REASON_NO_TRANSFER_SLING_BASE_WEAPON"

				as.displayString = Localize( as.displayString )

		}
	}

	return as
}

LootActionStruct function GroundAltAction_ForOrdnance( entity player, LootRef lootRef )
{
	LootActionStruct as
	as.displayString = ""
	as.action = eLootAction.NONE








	return as
}

LootActionStruct function GroundAltAction_ForHealth( entity player, LootRef lootRef )
{
	LootActionStruct as
	as.displayString = ""
	as.action = eLootAction.NONE









	return as
}

LootActionStruct function GroundAltAction_None( entity player, LootRef lootRef )
{
	LootActionStruct as
	as.displayString = ""
	as.action = eLootAction.NONE
	return as
}

int function EquipmentPrimarySwapAction_ForWeapons( entity player )
{
	return eLootAction.PRIMARY_SWAP
}

int function EquipmentCharacterAction1_ForWeapons( entity player )
{
	if( DoesPlayerHaveWeaponSling( player ) )
	{
		return eLootAction.TRANSFER_SLING_MAIN
	}

	return eLootAction.NONE
}

































int function EquipmentCharacterAction2_ForWeapons( entity player )
{
	if( DoesPlayerHaveWeaponSling( player ) )
	{
		if( IsBallisticUltActive( player ) )
		{
			return eLootAction.NONE
		}

		return eLootAction.TRANSFER_SLING_ALT
	}

	return eLootAction.NONE
}



































































bool function AlwaysTrue( entity player, entity prop )
{
	return true
}


bool function MainActionIsNotPickup( entity player, entity ent )
{
	int lootIndex     = ent.GetSurvivalInt()
	LootData lootData = SURVIVAL_Loot_GetLootDataByIndex( lootIndex )
	LootRef lootRef   = SURVIVAL_CreateLootRef( lootData, ent )

	LootActionStruct asMain = SURVIVAL_GetActionForGroundItem( player, lootRef, eLootActionType.ALT_ACTION )

	return asMain.action != eLootAction.PICKUP
}