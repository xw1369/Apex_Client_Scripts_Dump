global function PassiveMedic_Init









global function ServerToClient_DisplayCancelReviveHintForPlayer
global function ServerToClient_RemoveCancelReviveHintForPlayer

global function ServerToClient_NumSelfRevivesUsed
global function ServerToClient_DisplaySelfResRuiForPlayer
global function ServerToClient_RemoveDisplaySelfResRuiForlayer







const DEPLOYABLE_SHIELD_FX = $"P_drone_medic_shield"
const DEPLOYABLE_SHIELD_HEALTH = 850

const DEPLOYABLE_SHIELD_RADIUS = 84
const DEPLOYABLE_SHIELD_HEIGHT = 89
const DEPLOYABLE_SHIELD_FOV = 150
const DEPLOYABLE_SHIELD_OFFSET = 64

const DEPLOYABLE_SHIELD_ANGLE_LIMIT = 0.55
const DEPLOYABLE_SHIELD_LINGER_TIME = 0.5

const PASSIV_MEDIC_SHEILD_MODEL = $"mdl/fx/medic_shield_wall.rmdl"
const PASSIV_MEDIC_SHEILD_SOUND = "Lifeline_ReviveShield_Sustain_3P"


const FX_DRONE_MEDIC_JET_CTR			= $"P_LL_med_drone_jet_ctr_loop"
const FX_DRONE_MEDIC_EYE				= $"P_LL_med_drone_eye"
const FX_DRONE_MEDIC_JET_LOOP			= $"P_LL_med_drone_jet_loop"

const asset DRONE_BEAM_EFFECT_DUD = $"P_drone_medic_shield_beam"

const asset DRONE_MODEL = $"mdl/props/lifeline_drone/lifeline_drone.rmdl"
const vector DRONE_MINS = <-9, -9, -10>
const vector DRONE_MAXS = <9, 9, 10>





const string PASSIV_MEDIC_SHIELD_MOVER_SCRIPTNAME = "passive_medic_shield_mover"

struct
{





	var selfResRui


} file

void function PassiveMedic_Init()
{
	Remote_RegisterServerFunction( "ClientCallback_CancelRevive" )
	Remote_RegisterClientFunction( "ServerToClient_DisplayCancelReviveHintForPlayer" )
	Remote_RegisterClientFunction( "ServerToClient_RemoveCancelReviveHintForPlayer" )

	Remote_RegisterClientFunction( "ServerToClient_NumSelfRevivesUsed", "entity", "int", 0, INT_MAX )
	Remote_RegisterClientFunction( "ServerToClient_DisplaySelfResRuiForPlayer", "entity" )
	Remote_RegisterClientFunction( "ServerToClient_RemoveDisplaySelfResRuiForlayer", "entity" )


	RegisterSignal( "OnPassiveMedicReviveEnd" )
	PrecacheScriptString( REVIVE_SHIELD_SCRIPTNAME )






























		RegisterConCommandTriggeredCallback( "+scriptCommand5", AttemptCancelRevive )

		RegisterSignal( "PassiveMedic_DestroySelfResRUI" )


}






































































































































































































































































































































































































































































































































































































































void function AttemptCancelRevive( entity player )
{
	if( !player.ContextAction_IsBeingRevived() )
		return

	if( !IsEntLifelineReviveTarget( player ) )
		return

	if ( !TryCharacterButtonCommonReadyChecks( player ) )
		return

	Remote_ServerCallFunction( "ClientCallback_CancelRevive" )
}

bool function IsEntLifelineReviveTarget( entity ent )
{
	if( !IsValid( ent ) )
		return false

	entity healer = ent.GetPlayerNetEnt( "revivePlayerHealer" )
	if( !IsValid( healer ) )
		return false

	entity healerOwner = healer.GetOwner()

	if( !IsValid( healerOwner ) )
		return false

	asset settings = healerOwner.GetPlayerSettings()

	array<entity> players = GetPlayerArrayOfTeam_Alive( ent.GetTeam() )

	foreach ( entity teammate in players )
	{
		if( teammate.GetPlayerSettings() == settings )
			return true
	}

	return false
}


void function ServerToClient_NumSelfRevivesUsed( entity medic, int numSelfRevives )
{
	if( medic != GetLocalClientPlayer() )
		return

	if( !IsValid( medic ) )
		return

	medic.p.numSelfRevivesUsed = numSelfRevives
}




void function ServerToClient_DisplaySelfResRuiForPlayer( entity player )
{
	if ( player != GetLocalViewPlayer() )
		return

	thread PassiveMedic_UpdateSelfResRUI( player )
}

void function ServerToClient_RemoveDisplaySelfResRuiForlayer( entity player )
{
	if ( player != GetLocalViewPlayer() )
		return

	player.Signal( "PassiveMedic_DestroySelfResRUI" )
}

void function PassiveMedic_UpdateSelfResRUI( entity player )
{
	player.EndSignal( "PassiveMedic_DestroySelfResRUI" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )

	
	if ( file.selfResRui == null )
	{
		file.selfResRui = CreateFullscreenRui( $"ui/upgrade_self_revive.rpak", HUD_Z_BASE ) 
		RuiTrackFloat( file.selfResRui, "bleedoutEndTime", player, RUI_TRACK_SCRIPT_NETWORK_VAR, GetNetworkedVariableIndex( "bleedoutEndTime" ) )
		RuiTrackFloat( file.selfResRui, "reviveEndTime", player, RUI_TRACK_SCRIPT_NETWORK_VAR, GetNetworkedVariableIndex( "reviveEndTime" ) )
	}

	OnThreadEnd(
		function() : ( player )
		{
			RuiDestroyIfAlive( file.selfResRui )
			file.selfResRui = null
		}
	)

	bool isVisible = true

	while( IsValid( player ) && GetGameState() < eGameState.WinnerDetermined )
	{
		if( player.p.numSelfRevivesUsed > 0 )
			return
		wait 1
	}
	
}



void function ServerToClient_DisplayCancelReviveHintForPlayer()
{
	thread _DisplayCancelReviveHintForPlayer()
}

void function ServerToClient_RemoveCancelReviveHintForPlayer()
{
	GetLocalViewPlayer().Signal( "OnPassiveMedicReviveEnd" )
}

void function _DisplayCancelReviveHintForPlayer()
{
	entity player = GetLocalViewPlayer()

	if ( !IsValid( player ) )
		return

	player.Signal( "OnPassiveMedicReviveEnd")

	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnPassiveMedicReviveEnd" )

	AddPlayerHint( 6.5, 0.15, $"", "#MEDIC_PASSIVE_CANCEL_REVIVE_HINT" )

	OnThreadEnd(
		function() : ()
		{
			HidePlayerHint( "#MEDIC_PASSIVE_CANCEL_REVIVE_HINT" )
		}
	)

	WaitForever()
}











