global function ShPassiveWarlordsIre_Init

global function PassiveWarlordsIre_EntityShouldBeHighlighted

global function ServerCallback_WarlordsIre_HighlightTargetRemote


const float WARLORDS_IRE_DURATION_BASE 			= 0.8
const float WARLORDS_IRE_DURATION_EXPLOSION 	= 0.4

const float WARLORDS_IRE_DURATION_FUSE_UPGRADE 	= 1.0

const float WARLORDS_IRE_SPEEDUP_INFO_DURATION 	= 3.0

global const string WARLORDS_IRE_MOD_NAME = "breacher"


struct
{

		table<entity, float> playerHighlightEndTime
		array<entity> displayedWeapons


	float balance_warlordsIreHighlightDurationBase
	float balance_warlordsIreHighlightDurationExplode

		float balance_warlordsIreHighlightDurationFuseUpgrade

} file

void function ShPassiveWarlordsIre_Init()
{
	AddCallback_OnPassiveChanged( ePassives.PAS_WARLORDS_IRE, PassiveWarlordsIre_OnPassiveChanged )






		AddCallback_PlayerClassChanged( OnPlayerClassChanged )
		AddLocalPlayerDidDamageCallback( PassiveWarlordsIre_OnLocalPlayerDidDamage )
		AddCallback_OnPrimaryWeaponStatusUpdate( OnPrimaryWeaponStatusUpdate )


	file.balance_warlordsIreHighlightDurationBase 		= GetCurrentPlaylistVarFloat( "warlordsire_duration_base_override", WARLORDS_IRE_DURATION_BASE )
	file.balance_warlordsIreHighlightDurationExplode 	= GetCurrentPlaylistVarFloat( "warlordsire_duration_explosion_override", WARLORDS_IRE_DURATION_EXPLOSION )

		file.balance_warlordsIreHighlightDurationFuseUpgrade 	= GetCurrentPlaylistVarFloat( "warlordsire_duration_fuse_upgrade_override", WARLORDS_IRE_DURATION_FUSE_UPGRADE )

	Remote_RegisterClientFunction( "ServerCallback_WarlordsIre_HighlightTargetRemote", "entity", "entity", "int", INT_MIN, INT_MAX )
}


float function GetUpgradedWarlordsIreHighlightDurationMultiplier()
{
	return GetCurrentPlaylistVarFloat( "warlordsire_duration_upgraded_multiplier", 1.25 )
}


float function GetWarlordsIreHighlightDurationBase( entity player )
{
	float result = file.balance_warlordsIreHighlightDurationBase


	if( PlayerHasPassive( player, ePassives.PAS_PAS_UPGRADE_ONE ) ) 
	{
		result *= GetUpgradedWarlordsIreHighlightDurationMultiplier()
	}


	return result
}


void function PassiveWarlordsIre_OnPassiveChanged( entity player, int passive, bool didHave, bool nowHas )
{






}























void function PassiveWarlordsIre_OnLocalPlayerDidDamage( entity attacker, entity target, vector damagePosition, int damageType, float damageAmount )
{
	if ( !PassiveWarlordsIre_ValidWarlordsIreHighlightPostDamage( attacker, target ) )
		return

	float highlightDuration = GetWarlordsIreHighlightDurationBase( attacker )


	if ( PlayerHasPassive( attacker, ePassives.PAS_FUSE ) )
	{
		if( IsBitFlagSet( damageType, DF_EXPLOSION ) )
			highlightDuration = file.balance_warlordsIreHighlightDurationFuseUpgrade
		else return
	}
	else

		highlightDuration += IsBitFlagSet( damageType, DF_EXPLOSION ) ? file.balance_warlordsIreHighlightDurationExplode : 0.0

	if ( (target in file.playerHighlightEndTime) )
		file.playerHighlightEndTime[ target ] <- ( Time() + highlightDuration )
	else
		thread PassiveWarlordsIre_HighlightThink( target, highlightDuration )
}

void function PassiveWarlordsIre_HighlightThink( entity target, float highlightDuration )
{
	if ( !IsValid( target ) || ( highlightDuration <= 0.0 ) )
		return

	EndSignal( target, "OnDeath", "OnDestroy" )

	file.playerHighlightEndTime[ target ] <- ( Time() + highlightDuration )
	ManageHighlightEntity( target )

	OnThreadEnd(
		function() : ( target )
		{
			if ( (target in file.playerHighlightEndTime) )
				delete file.playerHighlightEndTime[ target ]

			if ( IsValid( target ) )
				ManageHighlightEntity( target )
		}
	)

	while( ( file.playerHighlightEndTime[ target ] > Time() ) )
		WaitFrame()
}

void function ServerCallback_WarlordsIre_HighlightTargetRemote( entity attacker, entity target, int damageType )
{
	if( IsValid( attacker ) && IsValid( target ) )
	{
		PassiveWarlordsIre_OnLocalPlayerDidDamage( attacker, target, target.GetOrigin(), damageType, 0 )
	}
}


bool function PassiveWarlordsIre_ValidWarlordsIreHighlightPostDamage( entity attacker, entity target )
{
	if ( !IsAlive( attacker ) )
		return false

	if ( !attacker.IsPlayer() )
		return false

	if ( !target.IsPlayer() && !target.IsNPC() )
		return false

	if ( attacker == target )
		return false

	if ( !PlayerHasPassive( attacker, ePassives.PAS_WARLORDS_IRE ) )
		return false

	return true
}

bool function PassiveWarlordsIre_EntityShouldBeHighlighted( entity target )
{

	if ( (target in file.playerHighlightEndTime) )
	{
		if ( file.playerHighlightEndTime[ target ] >= Time() )
			return true
	}


	return false
}


void function OnPlayerClassChanged( entity player )
{
	
	if( player == GetLocalClientPlayer()  )
		OnPrimaryWeaponStatusUpdate( player.GetActiveWeapon( eActiveInventorySlot.mainHand ), ClWeaponStatus_GetWeaponHudRui( player ) )
}

void function OnPrimaryWeaponStatusUpdate( entity selectedWeapon, var weaponRui )
{
	if ( !IsValid( selectedWeapon ) )
		return

	if ( !PlayerHasPassive( GetLocalViewPlayer(), ePassives.PAS_WARLORDS_IRE ) )
		return

	entity lastSelectedWeapon = GetLastSelectedPrimaryWeapon()

	entity weaponInSlot0	= GetLocalViewPlayer().GetNormalWeapon( WEAPON_INVENTORY_SLOT_PRIMARY_0 )
	entity weaponInSlot1 	= GetLocalViewPlayer().GetNormalWeapon( WEAPON_INVENTORY_SLOT_PRIMARY_1 )
	bool noWeapon        	= !IsValid( weaponInSlot0 ) && !IsValid( weaponInSlot1 )
	bool meleeSelected 		= GetLocalViewPlayer().GetNormalWeapon( WEAPON_INVENTORY_SLOT_PRIMARY_2 ) == selectedWeapon

	if ( selectedWeapon.HasMod( WARLORDS_IRE_MOD_NAME ) )
	{
		if ( !file.displayedWeapons.contains( selectedWeapon ) )
		{
			RuiSetBool( weaponRui, "showPassiveBonusWeaponInfo", true )
			RuiSetString( weaponRui, "passiveBonusWeaponInfoText", Localize( "#PAS_WARLORDS_IRE_HUD" ) )
			RuiSetWallTimeWithOffset( weaponRui, "fadeBonusWeaponInfoStartTime", WARLORDS_IRE_SPEEDUP_INFO_DURATION )
			RuiSetImage( weaponRui, "passiveBonusWeaponInfoFrame", $"rui/hud/character_abilities/madmaggie_passive_frame" )
			file.displayedWeapons.append( selectedWeapon )
		}
		else
		{
			RuiSetBool( weaponRui, "showPassiveBonusWeaponInfo", false )
		}

		RuiSetBool( weaponRui, "showPassiveBonusIconWeapon", true )
		RuiSetImage( weaponRui, "passiveBonusIconWeapon", $"rui/hud/character_abilities/madmaggie_passive_weapon_hud_dongle" )
	}
	else if ( ( IsValid( lastSelectedWeapon ) && !lastSelectedWeapon.HasMod( WARLORDS_IRE_MOD_NAME ) ) || noWeapon )
	{



		{
			RuiSetBool( weaponRui, "showPassiveBonusWeaponInfo", false )
			RuiSetString( weaponRui, "passiveBonusWeaponInfoText", "" )
			RuiSetWallTimeBad( weaponRui, "fadeBonusWeaponInfoStartTime" )

			RuiSetBool( weaponRui, "showPassiveBonusIconWeapon", false )
			RuiSetImage( weaponRui, "passiveBonusIconWeapon", $"" )
		}
	}
}

