global function PassiveVantage_Init
global function PassiveVantage_IsInCompatibleWeaponConfig







const float PASSIVE_MAX_FOV = 70
const float PASSIVE_SCOPE_TRACKING_FOV = 3        


const float PASSIVE_RANGED_TRACKING_TIME_MAX = 10
const float PASSIVE_RANGED_TRACKING_TIME_MIN = 2
const float PASSIVE_RANGED_TRACKING_RANGE = 100 * METERS_TO_INCHES 
const float PASSIVE_RANGED_TRACKING_RANGE_SQR = PASSIVE_RANGED_TRACKING_RANGE * PASSIVE_RANGED_TRACKING_RANGE
const asset PASSIVE_RANGED_TRACKING_ICON = $"rui/hud/character_abilities/vantage_gun_mark"










global table < entity, array <entity> > vantageTargetTrackingList

void function PassiveVantage_Init()
{
	AddCallback_OnPassiveChanged( ePassives.PAS_VANTAGE, Vantage_OnPassiveChanged )





	SniperRangeAutoSet_Init()

	RegisterSignal( "EndConditionalScopeTracking" )

	AddCallback_OnPlayerZoomIn( Vantage_PlayerZoomInCallback )
	AddCallback_OnPlayerZoomOut( Vantage_PlayerZoomOutCallback )


		AddCallback_EditLootDesc( Vantage_EditScopesLootDesc )



		AddCallback_OnSelectedWeaponChanged( OnVantageSelectedWeaponChanged )

}

void function Vantage_OnPassiveChanged( entity player, int passive, bool didHave, bool nowHas )
{
	if ( didHave )
	{
		player.Signal( "EndConditionalScopeTracking" )

			SniperRangeAutoSet_Stop( player )






	}

	if ( nowHas )
	{










		if ( !(player in vantageTargetTrackingList) )
		{
			array<entity> targets
			vantageTargetTrackingList[player] <- targets
		}

		thread ScopeTrackingConditional( player, null, PASSIVE_SCOPE_TRACKING_FOV, false, false, vantageTargetTrackingList[player] )
	}
}

void function OnVantageSelectedWeaponChanged( entity selectedWeapon )
{

	entity player = GetLocalViewPlayer()

	if ( !IsAlive( player ) )
		return

	if ( !PlayerHasPassive( player, ePassives.PAS_VANTAGE ) )
		return

	DeactivateSniperRecon( player )
}


void function Vantage_PlayerZoomInCallback( entity player )
{

		if ( !IsAlive( player ) )
			return

		if ( !PlayerHasPassive( player, ePassives.PAS_VANTAGE ) )
			return

		if( !IsFirstTimePredicted() )
			return

		ActivateSniperRecon( player )

}

void function ActivateSniperRecon( entity player )
{

	if ( player == GetLocalViewPlayer() )
	{
		entity weapon = player.GetActiveWeapon( eActiveInventorySlot.mainHand )

		if ( IsValid( weapon )
				&& !Bleedout_IsBleedingOut( player ) )
		{
			bool isCompatibleWeaponConfig = PassiveVantage_IsInCompatibleWeaponConfig( weapon )
			float currentFOV              = weapon.GetWeaponZoomFOV() 


			if ( isCompatibleWeaponConfig )
			{
				thread SniperRangeAutoSet_Start( player )
				thread CL_SniperRecon_UI_Thread( player )
			}
		}
	}

}

void function DeactivateSniperRecon( entity player )
{

		SniperRecon_EndThread( player )
		SniperReconUI_EndThread( player )
		SniperRangeAutoSet_Stop( player )

}

void function Vantage_PlayerZoomOutCallback( entity player )
{

		if( !IsFirstTimePredicted() )
			return


	DeactivateSniperRecon( player )
}


string function Vantage_EditScopesLootDesc( string lootRef, entity player, string originalDesc )
{
	string finalDesc = originalDesc


		
		if (Crafting_IsPlayerAtWorkbench(player))
			return finalDesc


	if ( PassiveVantage_isCompatibleOptic( lootRef )
			&& IsValid( player )
			&& LoadoutSlot_IsReady( ToEHI( player ), Loadout_Character() )
			&& ItemFlavor_GetAsset( LoadoutSlot_GetItemFlavor( ToEHI( player ), Loadout_Character() ) ) == $"settings/itemflav/character/vantage.rpak" )
	{
		finalDesc = finalDesc + Localize( "#VANTAGE_PASSIVE_LOOT_HINT_DESC" )
	}
	return finalDesc
}






















































































































void function ScopeTrackingConditional( entity player, entity weapon, float trackingFOV, bool lockMode, bool fromTac, array <entity> targetExcludeList )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "EndConditionalScopeTracking" )

	OnThreadEnd(
		function() : ( player )
		{
			SniperReconUI_EndThread( player )
			SniperRecon_EndThread( player )
		}
	)

	bool scopeTrackingOn      = false
	bool skipUpdate           = false
	while ( true )
	{
		weapon = player.GetActiveWeapon( eActiveInventorySlot.mainHand )
		bool fullyInAds = player.GetZoomFrac() > 0.99
		
		if ( IsValid( weapon )
				&& fullyInAds
				&& !Bleedout_IsBleedingOut( player )
				&& !StatusEffect_HasSeverity( player, eStatusEffect.silenced )
				&& !player.Player_IsSkywardLaunching()
				&& !StatusEffect_HasSeverity( player, eStatusEffect.is_boxing )
		)
		{
			bool isCompatibleWeaponConfig = PassiveVantage_IsInCompatibleWeaponConfig( weapon )
			float currentFOV              = weapon.GetWeaponZoomFOV()
			if ( isCompatibleWeaponConfig && currentFOV <= PASSIVE_MAX_FOV )
			{
				if ( !scopeTrackingOn )
				{
					if ( weapon.GetWeaponClassName() == "mp_weapon_melee_survival" )
					{
						fromTac = true
					}
					thread SniperRecon_BeginThread( player, weapon, targetExcludeList )




					scopeTrackingOn = true
				}
			}
		}
		else if ( scopeTrackingOn )
		{
			SniperRecon_EndThread( player )
			scopeTrackingOn = false
		}

		WaitFrame()
	}
}


bool function PassiveVantage_isCompatibleOptic( string opticRef )
{
	if ( opticRef == "" )
		return false


		if ( 	opticRef == "optic_cq_hcog_classic" || 		
				opticRef == "optic_cq_holosight" || 		
				opticRef == "optic_cq_holosight_variable" )
		{
			return true
		}


	if ( 	opticRef == "optic_cq_hcog_bruiser" || 		
			opticRef == "optic_ranged_hcog" ||			
			opticRef == "optic_ranged_aog_variable" || 	
			opticRef == "optic_sniper" ||				
			opticRef == "optic_sniper_variable" ||		
			opticRef == "optic_sniper_threat")			
	{
		return true
	}
	return false
}

bool function PassiveVantage_IsInCompatibleWeaponConfig( entity weapon )
{

	return true

	
	if ( IsBitFlagSet( weapon.GetWeaponTypeFlags(), WPT_ULTIMATE ) ||
			IsBitFlagSet( weapon.GetWeaponTypeFlags(), WPT_VIEWHANDS ) )
		return true

	if ( weapon.GetWeaponClassName() == KRABER_WEAPON_NAME )
		return true

	
	
	
	
	
	
	

	string opticAttachment = GetInstalledWeaponAttachmentForPoint( weapon, "sight" )
	bool isCompatibleOptic = PassiveVantage_isCompatibleOptic( opticAttachment )

	if ( !isCompatibleOptic )
		return false

	return true
}
