global function ShFlyers_Init





















global function ServerToClient_PlayLootRarityFXOnDeathboxDrop
global function Flyer_ServerToClient_DisplayFlyerDeathboxPrompt


global function Flyers_GetAllFlyers

global const FLYER_MODEL = $"mdl/Creatures/flyer/flyer_kingscanyon_animated.rmdl"
const FLYER_1000X_MODEL = $"mdl/Creatures/flyer/flyer_kingscanyon_animated.rmdl"
const FLYER_500X_MODEL = $"mdl/Creatures/flyer/flyer_kingscanyon_animated.rmdl"
const FLYER_MODEL_STATIC = $"mdl/Creatures/flyer/flyer_kingscanyon_animated.rmdl"
const asset DEATHBOX_DROP_FX = $"P_loot_flyer"

const TIME_BEFORE_FLYER_DROPS_LOOT = 3.0
const TIME_FOR_CAGED_FLYER_DAMAGED_STATE_TRANSITIONS = 10.0
const TIME_FOR_CAGED_FLYER_TRIGGER_VACATED_STATE_TRANSITIONS = 10.0
float TIME_FOR_CAGED_FLYER_STAY_IN_CAUTIOUS_STATE = 5.0 
const TIME_FOR_CAGED_FLYER_STAY_IN_ANGRY_STATE = 10.0
const DIST_THRESHOLD_FOR_ANGRY_CAGED_FLYER = 275

const bool FLYER_WITH_DEATHBOX_FLYING_IDLE_ALWAYS = false
const float FLYER_WITH_DEATHBOX_FLYING_IDLE_RADIUS = 1500
const int FLYER_WITH_DEATHBOX_HEALTH = 250
const int CAGED_FLYER_HEALTH = 100


const float FLYER_LOOT_LEGENDARY_TIER_PROBABILTY = 0.02
const float FLYER_LOOT_EPIC_TIER_PROBABILITY = 0.38
const int FLYER_LOOT_CAP_ON_EPIC_OR_HIGHER_ITEM_COUNT = 3

const float FLYER_LOOT_TIER_OVERRIDE = -1.0
const int FLYER_PERCHED_APPROACH_DISTANCE_THRESHOLD = 1024
const int FLYER_FLYING_APPROACH_DISTANCE_THRESHOLD = 450

const int FLYER_LOOT_ITEMS_FLOOR = 6
const int FLYER_LOOT_ITEMS_CEILING = 12

global const string DEATHBOX_FLYER_SCRIPT_NAME = "deathboxFlyer"
global const string CAGED_FLYER_SCRIPT_NAME = "cagedFlyer"









#if DEV
struct TestFlyerSpawnDataStruct
{
	vector origin
	vector angles
	bool   startsInFlight
}
#endif

global function IsFlyer
global function IsCagedFlyer
global function IsDeathboxFlyer

enum perchedFlyerState
{
	idle,
	takeOff,
}

struct DeathBoxFlyerDataStruct
{
	bool   isPerched = false
	float  timeTakeoffStarted = -1.0
	bool   droppedLoot = false
	entity deathBox
	entity scriptMoverParent
	bool   startsFlying = false
}

enum cagedFlyerState
{
	IDLE,
	CAUTIOUS_TO_ANGRY,
	CAUTIOUS_TO_IDLE,
	ANGRY,
	INVALID,
}

struct CagedFlyerDataStruct
{
	float  timeLastDamaged = -1.0
	float  timeTriggerLastVacated = -1.0
	float  timeLastBecameCautious = -1.0
	float  timeLastBecameAngry = -1.0
	entity linkedTrigger
}

struct
{
	array< entity >                          deathBoxFlyerNodes
	table< entity, DeathBoxFlyerDataStruct > deathBoxFlyerToDataStructTable 
	table< entity, CagedFlyerDataStruct >    cagedFlyerToDataStructTable 
	int fliersToSpawn = 0





#if DEV
		int                               currentTestFlyerSpawnIndex = -1 
		array< TestFlyerSpawnDataStruct > testflyerSpawnData
		bool flyerSpawnDataSorted = false
#endif
} file

void function ShFlyers_Init()
{
	PrecacheScriptString( DEATHBOX_FLYER_SCRIPT_NAME )
	PrecacheScriptString( CAGED_FLYER_SCRIPT_NAME )

	
	PrecacheModel( FLYER_MODEL_STATIC )
	PrecacheModel( FLYER_MODEL )
	PrecacheModel( FLYER_500X_MODEL )
	PrecacheModel( FLYER_1000X_MODEL )

	PrecacheParticleSystem( DEATHBOX_DROP_FX )

	


	RegisterSignal( "FlyerStopThink" )
	RegisterSignal( "FlyerDeath" )
	RegisterSignal( "StopFlyerIdle" )
	RegisterSignal( "RecalculateFlyerState" )
	RegisterSignal( "CagedFlyerSetPainParameter"  )
	RegisterSignal( "FlyerDroppedDeathbox" )









		if ( EvilFlyersEnabled() )
		{





		}

}

















































































bool function EvilFlyersEnabled()
{





	return false
}











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































void function ServerToClient_PlayLootRarityFXOnDeathboxDrop( entity deathBox  )
{
	thread PlayLootRarityFXOnDeathboxDrop_threaded( deathBox  )
}

void function PlayLootRarityFXOnDeathboxDrop_threaded( entity deathBox  )
{
	
	bool bDeathBoxIsValid = IsValid( deathBox )
	Assert( bDeathBoxIsValid, "ERROR: Deathbox Invalid!" )

	if( !bDeathBoxIsValid )
	{
		return
	}

	EndSignal( deathBox, "OnDeath" )
	EndSignal( deathBox, "OnDestroy" )

	int fxID         = GetParticleSystemIndex( DEATHBOX_DROP_FX )
	vector boxOrigin = deathBox.GetOrigin()
	int deatboxTier  = deathBox.GetNetInt( "lootRarity" )
	vector colorVec  = GetFXRarityColorForTier( deatboxTier )

	int deathBoxFX = StartParticleEffectOnEntity( deathBox, fxID, FX_PATTACH_POINT_FOLLOW, deathBox.LookupAttachment( "FX_CENTER" ) )
	EffectSetControlPointVector( deathBoxFX, 1, colorVec )

	OnThreadEnd(
		function() : ( deathBoxFX )
		{
			if ( EffectDoesExist( deathBoxFX ) )
				EffectStop( deathBoxFX, true, true )
		}
	)
	wait 1.0
}































void function Flyer_ServerToClient_DisplayFlyerDeathboxPrompt()
{
	AddOnscreenPromptFunction( "quickchat", InvokePingFlyerDeathbox, 6.0, Localize( "#PING_FLYER_DEATHBOX" ) )
}

void function InvokePingFlyerDeathbox( entity player )
{
	Remote_ServerCallFunction( "Flyer_ClientToServer_PingFlyerDeathbox" )
}




bool function IsFlyerThatStillHasDeathBox( entity flyer )
{
	if ( !IsValid( flyer ) )
		return false

	if ( !(flyer in file.deathBoxFlyerToDataStructTable) )
		return false

	return IsValid( file.deathBoxFlyerToDataStructTable[ flyer  ].deathBox )
}


entity function GetDeathBoxFromFlyer( entity flyer )
{
	if ( !IsValid( flyer ) )
		return null

	if ( !(flyer in file.deathBoxFlyerToDataStructTable) )
		return null

	if ( !IsValid( file.deathBoxFlyerToDataStructTable[ flyer  ].deathBox ) )
		return null

	return file.deathBoxFlyerToDataStructTable[ flyer  ].deathBox

}

bool function IsFlyer( entity ent )
{




		if ( !(ent instanceof C_DynamicProp) )
			return false


	if ( ent.GetModelName().tolower() != FLYER_MODEL.tolower() ) 
		return false

	return true

}

bool function IsDeathboxFlyer( entity ent  )
{
	if ( !IsFlyer( ent ) )
		return false

	return ent.GetScriptName() == DEATHBOX_FLYER_SCRIPT_NAME

}

bool function IsCagedFlyer( entity ent )
{
	if ( !IsFlyer( ent ) )
		return false

	return ent.GetScriptName() == CAGED_FLYER_SCRIPT_NAME
}

array<entity> function Flyers_GetAllFlyers()
{
	array<entity> allFlyers
	allFlyers.extend( GetEntArrayByScriptName( DEATHBOX_FLYER_SCRIPT_NAME ) )
	allFlyers.extend( GetEntArrayByScriptName( CAGED_FLYER_SCRIPT_NAME ) )

	return allFlyers
}