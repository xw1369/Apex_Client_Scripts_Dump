global function SeasonQuest_SharedInit
global function SeasonQuest_RegisterNetworking
global function SeasonQuest_GetStatusForComicPageIndex
global function SeasonQuest_GetStatusForMissionIndex
global function SeasonQuest_AllTreasurePacksHaveBeenCollectedForPlayer
global function SeasonQuestMission_GetLatestTimeUnlockedMission

global function SeasonQuest_GetActiveSeasonQuest
global function SeasonQuest_GetGet

global function SeasonQuest_GetTreasurePacksLatestPickupTimeForPlayer

global function SeasonQuest_GetComicPagesMaxCount
global function SeasonQuest_GetDefaultMissionIcon
global function SeasonQuest_GetComicPageForIndex
global function SeasonQuest_GetComicPanelDataForIndex
global function SeasonQuest_GetComicPagesReadByPlayer
global function SeasonQuest_GetComicPagesUnlockedByPlayer

global function SeasonQuest_GetUnlockTimeForComicIndex

global function SeasonQuest_GetLoreTypeForMissionIndex

global function SeasonQuest_GetMissionsMaxCount
global function SeasonQuest_GetCompletionRewards
global function SeasonQuest_GetMissionRewardsForIndex
global function SeasonQuest_GetPlaylistForMissionIndex
global function SeasonQuest_GetMissionIndexForPlaylistName
global function SeasonQuest_GetMissionsCompletedForPlayer
global function SeasonQuest_GetUnlockTimeForMissionIndex
global function SeasonQuest_GetTreasurePacksMaxCount
global function SeasonQuest_GetTreasurePacksMaxPurchableCountForPlayer
global function SeasonQuest_GetTreasurePackIndexRequiredForMission
global function SeasonQuest_GetTreasurePackIndexRequiredForComicPage
global function SeasonQuest_GetTreasurePacksCountForPlayer
global function SeasonQuest_HaveStartedQuest
global function SeasonQuest_GetEarnedTreasurePacksCountForPlayer
global function SeasonQuest_GetPurchasedTreasurePacksCountForPlayer
global function SeasonQuest_GetGRXOfferLocation
global function SeasonQuest_GetTreasureBoxPurchaseFlav
global function SeasonQuest_GetTreasurePackRewardsForIndex
global function SeasonQuest_GetGoalModel
global function SeasonQuest_GetMissionForIndex
global function SeasonQuest_GetLastMissionUnlockTime

global function SeasonQuest_GetLoreSequencePrologue
global function SeasonQuest_GetLoreSequenceEpilogue
global function SeasonQuest_GetLoreSequenceStoryChapterDataForMissionIndex
global function SeasonQuest_GetLoreSequenceStoryChapterHasCommunityVote
global function SeasonQuest_GetLoreSequenceStoryChapterFirstPlaylistBoolName
global function SeasonQuest_GetLoreSequenceStoryChapterSecondPlaylistBoolName
global function SeasonQuest_GetLoreSequenceRadioPlayForMissionIndex
global function SeasonQuest_GetLoreSequenceStoryChapterNameForMissionIndex
global function SeasonQuest_GetLoreSequenceQuestItemDataForMissionIndex
global function SeasonQuest_GetLoreSequenceQuestItemNameForMissionIndex
global function SeasonQuest_GetQuestItemNameForMissionIndex
global function SeasonQuest_GetQuestItemDescForMissionIndex
global function SeasonQuest_GetQuestItemIconForMissionIndex
global function SeasonQuest_GetQuestItemSecondIconForMissionIndex

global function SeasonQuest_Tab_GetLongDesc
global function SeasonQuest_Tab_GetLeftCornerImage
global function SeasonQuest_Tab_GetRightCornerImage
global function SeasonQuest_Tab_GetBasicInfoHeader
global function SeasonQuest_Tab_GetDeepLink
global function SeasonQuest_Tab_GetDeepLinkLabel
global function SeasonQuest_Tab_GetDeepStartTime
global function SeasonQuest_Tab_GetDeepFinishTime
global function SeasonQuest_Tab_GetBasicInfoItemText
global function SeasonQuest_Tab_GetArtifactProgressHeader

global function Comic_GetPreviewImage
















global function SeasonQuest_UpdateMinimapRui
global function SeasonQuest_GetCurrentPackCountDesc
global function SCB_DoGotTreasurePackNotify





















#if DEV



#endif





global const SHOW_UNKNOWN_ARTIFACTS = true	

global enum eQuestMissionStatus
{
	
	INVALID = -1,
	LOCKED,
	UNLOCKED_BUT_TOO_EARLY,
	UNLOCKED_BUT_NOT_NEXT,

	LAUNCHABLE,
	COMPLETED
}

struct {
	table< ItemFlavor, array< ItemFlavor > > questMissions
	table< ItemFlavor, array< ItemFlavor > > questComicPages
} file

const string FUNCNAME_DoGotTreasurePackNotify = "SCB_DoGotTreasurePackNotify"
void function SeasonQuest_RegisterNetworking()
{
	Remote_RegisterClientFunction( FUNCNAME_DoGotTreasurePackNotify )
}

const string CC_TreasureBoxDisplayAcknowledged = "ClientCallback_TreasureBoxDisplayAcknowledged"
const string CC_QuestStartedAcknowledged = "ClientCallback_QuestStartedAcknowledged"
const string CC_QuestComicReadAcknowledged = "ClientCallback_QuestComicReadAcknowledged"
const string CC_QuestComicRewardDisplayAcknowledged = "ClientCallback_QuestComicRewardDisplayAcknowledged"
const string CC_QuestMissionReadAcknowledged = "ClientCallback_QuestMissionReadAcknowledged"
const string CC_QueueRadioPlayRewardGranting = "ClientCallback_QueueRadioPlayRewardGranting"

void function SeasonQuest_SharedInit()
{

		Remote_RegisterServerFunction( CC_TreasureBoxDisplayAcknowledged, "int", INT_MIN, INT_MAX )
		Remote_RegisterServerFunction( CC_QuestStartedAcknowledged, "int", INT_MIN, INT_MAX )
		Remote_RegisterServerFunction( CC_QuestComicReadAcknowledged, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX )
		Remote_RegisterServerFunction( CC_QuestComicRewardDisplayAcknowledged, "int", INT_MIN, INT_MAX )
		Remote_RegisterServerFunction( CC_QuestMissionReadAcknowledged, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX )
		Remote_RegisterServerFunction( CC_QueueRadioPlayRewardGranting )
















	AddCallback_OnItemFlavorRegistered( eItemType.quest, OnQuestRegistered )
}


void function OnQuestRegistered( ItemFlavor quest )
{
	array<ItemFlavor> comicPages = RegisterReferencedItemFlavorsFromArray( quest, "comicPages", "flavor" )
	file.questComicPages[ quest ] <- comicPages

	array<ItemFlavor> missions = RegisterReferencedItemFlavorsFromArray( quest, "missions", "flavor" )
	file.questMissions[ quest ] <- missions

	foreach( int idx, ItemFlavor mission in missions )
	{

		string type = SeasonQuest_GetLoreTypeForMissionIndex( quest, idx )
		if( type == "RadioPlay" )
		{
			RegisterItemFlavorFromSettingsAsset( SeasonQuest_GetLoreSequenceRadioPlayForMissionIndex( quest, idx ) )
		}
	}

	RegisterItemFlavorFromSettingsAsset( $"settings/itemflav/grx_sentinel/s05_quest_mission_dummy.rpak" )
	RegisterItemFlavorFromSettingsAsset( $"settings/itemflav/grx_sentinel/s06_quest_comic_dummy.rpak" )


		
		
		

}


bool function SeasonQuest_AllTreasurePacksHaveBeenCollectedForPlayer( entity player, ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	int packCount = SeasonQuest_GetTreasurePacksCountForPlayer( player, quest )
	return (packCount >= SeasonQuest_GetTreasurePacksMaxCount( quest ))
}


int function SeasonQuestMission_GetLatestTimeUnlockedMission()
{
	ItemFlavor ornull quest = SeasonQuest_GetActiveSeasonQuest( GetUnixTimestamp() )
	if ( quest == null )
	{
		return -1
	}
	expect ItemFlavor( quest )

	int missionsCount = SeasonQuest_GetMissionsMaxCount( quest )
	int now = GetUnixTimestamp()

	for( int i = 0; i < missionsCount; i++ )
	{
		int unlockTime = SeasonQuest_GetUnlockTimeForMissionIndex( quest, i )
		if ( now < unlockTime  )
			return ( i - 1 )
	}

	return ( missionsCount - 1 )
}


int function SeasonQuest_GetStatusForComicPageIndex( entity player, ItemFlavor quest, int index )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )

	

	if ( IsEverythingUnlocked() )
		return eQuestMissionStatus.COMPLETED

	
	
	
	
	
	
	
	
	



















	int unlockTime = SeasonQuest_GetUnlockTimeForComicIndex( quest, index )
	if ( unlockTime > GetUnixTimestamp() )
		return eQuestMissionStatus.UNLOCKED_BUT_TOO_EARLY


	int comicsPagesRead = SeasonQuest_GetComicPagesReadByPlayer( player, quest )
	if ( index < comicsPagesRead )
		return eQuestMissionStatus.COMPLETED

	if ( index > (comicsPagesRead) )
		return eQuestMissionStatus.UNLOCKED_BUT_NOT_NEXT

	return eQuestMissionStatus.LAUNCHABLE
}


int function SeasonQuest_GetStatusForMissionIndex( entity player, ItemFlavor quest, int missionIndex )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )

	if ( IsEverythingUnlocked() )
		return eQuestMissionStatus.COMPLETED
	if ( GetCurrentPlaylistVarBool( "seasonquest_force_missions_unlocked", false ) )
		return eQuestMissionStatus.COMPLETED

	int missionsTotalMax = SeasonQuest_GetMissionsMaxCount( quest )

	int missionsDone = SeasonQuest_GetMissionsCompletedForPlayer( player, quest )
	if ( missionIndex < missionsDone )
		return eQuestMissionStatus.COMPLETED


	int unlockTime = SeasonQuest_GetUnlockTimeForMissionIndex( quest, missionIndex )
	if ( unlockTime > GetUnixTimestamp() )
		return eQuestMissionStatus.UNLOCKED_BUT_TOO_EARLY

	if ( missionIndex > (missionsDone) )
		return eQuestMissionStatus.UNLOCKED_BUT_NOT_NEXT

	return eQuestMissionStatus.LAUNCHABLE
}





































































































































































































































const string VARBLOCKNAME_QuestDatas = "questDatas"
const string VARNAME_TB_lastPickupTime = "treasureBox_lastPickupTime"
const string VARNAME_TB_totalPickups = "treasureBox_totalPickups"
const string VARNAME_TB_displayStartNum = "treasureBox_displayStartNum"
const string VARNAME_TB_displayCount = "treasureBox_displayCount"
const string VARNAME_CP_displayFinalRewards = "comicPanel_displayFinalRewards"
const string VARNAME_missionProgress = "missionProgress"
const string VARNAME_comicPagesRead = "comicPagesRead"
const string VARNAME_haveStartedQuest = "haveStartedQuest"
const string VARNAME_TB_lastSeenPurchased = "treasureBox_lastSeenPurchased"
const string VARNAME_lastMissionUnlockTime = "lastMissionUnlockTime"

string function BuildPersistentVarName( ItemFlavor quest, string varName )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	return format( "%s[%s].%s", VARBLOCKNAME_QuestDatas, ItemFlavor_GetGUIDString( quest ), varName )
}






















































































































































































































































































ItemFlavor ornull function SeasonQuest_GetActiveSeasonQuest( int timeNow )
{
	ItemFlavor ornull season = GetActiveSeason( timeNow )
	if ( season == null )
		return null
	expect ItemFlavor( season )
	return SeasonQuest_GetQuestForSeason( season )
}


ItemFlavor function SeasonQuest_GetGet()
{
	return expect ItemFlavor( SeasonQuest_GetActiveSeasonQuest( GetUnixTimestamp() ) )
}


asset function SeasonQuest_GetGoalModel( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	var settingsBlock = ItemFlavor_GetSettingsBlock( quest )
	asset modelAsset = GetSettingsBlockAsset( settingsBlock, "questModel" )
	return modelAsset
}


string function GetRewardSequenceMarketplaceVarForTreasurePacks( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	var settingsBlock = ItemFlavor_GetSettingsBlock( quest )
	return GetSettingsBlockString( settingsBlock, "treasurePacksSequenceMarketplaceVar" )
}

string function SeasonQuest_Tab_GetLongDesc( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	var settingsBlock = ItemFlavor_GetSettingsBlock( quest )
	return GetSettingsBlockString( settingsBlock, "questTabLongDesc" )
}

asset function SeasonQuest_Tab_GetLeftCornerImage( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	var settingsBlock = ItemFlavor_GetSettingsBlock( quest )
	return GetSettingsBlockAsset( settingsBlock, "questTabCornerImage" )
}

asset function SeasonQuest_Tab_GetRightCornerImage( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	var settingsBlock = ItemFlavor_GetSettingsBlock( quest )
	return GetSettingsBlockAsset( settingsBlock, "questTabRightCornerImage" )
}

string function SeasonQuest_Tab_GetBasicInfoHeader( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	var settingsBlock = ItemFlavor_GetSettingsBlock( quest )
	return GetSettingsBlockString( settingsBlock, "questTabBasicInfoHeader" )
}

string function SeasonQuest_Tab_GetDeepLink( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	var settingsBlock = ItemFlavor_GetSettingsBlock( quest )
	return GetSettingsBlockString( settingsBlock, "questTabDeepLink" )
}

string function SeasonQuest_Tab_GetDeepLinkLabel( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	var settingsBlock = ItemFlavor_GetSettingsBlock( quest )
	return GetSettingsBlockString( settingsBlock, "questTabDeepLinkLabel" )
}

int function SeasonQuest_Tab_GetDeepStartTime( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	var settingsBlock    = ItemFlavor_GetSettingsBlock( quest )
	string unlockTimeStr = GetSettingsBlockString( settingsBlock, "deepLinkStartTime" )

	int ornull ut = DateTimeStringToUnixTimestamp( unlockTimeStr )
	if ( ut != null )
		return expect int(ut)
	return INT_MAX
}

int function SeasonQuest_Tab_GetDeepFinishTime( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	var settingsBlock    = ItemFlavor_GetSettingsBlock( quest )
	string unlockTimeStr = GetSettingsBlockString( settingsBlock, "deepLinkFinishTime" )

	int ornull ut = DateTimeStringToUnixTimestamp( unlockTimeStr )
	if ( ut != null )
		return expect int(ut)
	return INT_MAX
}

string function SeasonQuest_Tab_GetBasicInfoItemText( ItemFlavor quest, int index )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )

	string fieldName
	switch( index )
	{
		case 0:
			fieldName = "questTabBasicInfoItemText0"
			break
		case 1:
			fieldName = "questTabBasicInfoItemText1"
			break
		case 2:
			fieldName = "questTabBasicInfoItemText2"
			break
		case 3:
			fieldName = "questTabBasicInfoItemText3"
			break
	}

	var settingsBlock = ItemFlavor_GetSettingsBlock( quest )
	return GetSettingsBlockString( settingsBlock, fieldName )
}

string function SeasonQuest_Tab_GetArtifactProgressHeader( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	var settingsBlock = ItemFlavor_GetSettingsBlock( quest )
	return GetSettingsBlockString( settingsBlock, "questTabArtifactProgressHeader" )
}

string function GetRewardSequenceMarketplaceVarForMissions( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	var settingsBlock = ItemFlavor_GetSettingsBlock( quest )
	return GetSettingsBlockString( settingsBlock, "missionRewardsSequenceMarketplaceVar" )
}

asset function SeasonQuest_GetDefaultMissionIcon( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	var settingsBlock = ItemFlavor_GetSettingsBlock( quest )
	return GetSettingsBlockAsset( settingsBlock, "defaultQuestItemIcon" )
}

string function GetRewardSequenceMarketplaceVarForComic( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	var settingsBlock = ItemFlavor_GetSettingsBlock( quest )
	return GetSettingsBlockString( settingsBlock, "comicPageRewardsSequenceMarketplaceVar" )
}

int function SeasonQuest_GetComicPagesMaxCount( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	return file.questComicPages[ quest ].len()
}

int function SeasonQuest_GetMissionsMaxCount( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	return file.questMissions[ quest ].len()
}


int function SeasonQuest_GetComicPagesReadByPlayer( entity player, ItemFlavor quest )
{
	int forcedPagesRead = -1 
	if ( forcedPagesRead >= 0 )
	{
		int countMax = SeasonQuest_GetComicPagesMaxCount( quest )
		return minint( forcedPagesRead, countMax )
	}

	return player.GetPersistentVarAsInt( BuildPersistentVarName( quest, VARNAME_comicPagesRead ) ) 
}


int function SeasonQuest_GetComicPagesUnlockedByPlayer( entity player, ItemFlavor quest )
{
	int pageCount = SeasonQuest_GetComicPagesMaxCount( quest )
	for( int index = 0; index < pageCount; index++ )
	{

		if ( SeasonQuest_GetStatusForComicPageIndex( player, quest, index ) < eQuestMissionStatus.UNLOCKED_BUT_NOT_NEXT )



			return index
	}
	return pageCount
}


int function SeasonQuest_GetMissionsCompletedForPlayer( entity player, ItemFlavor quest )
{
	int forcedMissionsCleared = GetConVarInt( "seasonquest_force_missionscleared_count" )
	if ( forcedMissionsCleared >= 0 )
	{
		int countMax = SeasonQuest_GetMissionsMaxCount( quest )
		return minint( forcedMissionsCleared, countMax )
	}

	return player.GetPersistentVarAsInt( BuildPersistentVarName( quest, VARNAME_missionProgress ) )
}























































string function SeasonQuest_GetPlaylistForMissionIndex( ItemFlavor flav, int missionIndex )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )
	return SeasonQuestMission_GetPlaylistName( file.questMissions[ flav ][missionIndex] )
}

















int function SeasonQuest_GetMissionIndexForPlaylistName( ItemFlavor flav, string playlist )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )
	playlist = playlist.tolower()

	foreach ( int missionIndex, ItemFlavor mission in file.questMissions[ flav ] )
	{
		if ( SeasonQuestMission_GetPlaylistName( mission ) == playlist )
			return missionIndex
	}

	return -1
}


int function SeasonQuest_GetUnlockTimeForMissionIndex( ItemFlavor flav, int missionIndex )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )
	return SeasonQuestMission_GetUnlockTime( file.questMissions[ flav ][missionIndex] )
}


int function SeasonQuest_GetUnlockTimeForComicIndex( ItemFlavor flav, int comicIndex )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )
	return SeasonQuestComic_GetUnlockTime( file.questComicPages[ flav ][comicIndex] )
}

int function SeasonQuestComic_GetUnlockTime( ItemFlavor comic )
{
	Assert( ItemFlavor_GetType( comic ) == eItemType.quest_comic )
	var settingsBlock    = ItemFlavor_GetSettingsBlock( comic )
	string unlockTimeStr = GetSettingsBlockString( settingsBlock, "unlockTime" )

	int ornull ut = DateTimeStringToUnixTimestamp( unlockTimeStr )
	if ( ut != null )
		return expect int(ut)
	return INT_MAX
}


ItemFlavorBag function SeasonQuest_GetMissionRewardsForIndex( ItemFlavor flav, int missionIndex )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )
	ItemFlavorBag rewards = SeasonQuestMission_GetRewards( flav, file.questMissions[ flav ][missionIndex] )
	return rewards
}


ItemFlavor function SeasonQuest_GetComicPageForIndex( ItemFlavor quest, int index )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	return file.questComicPages[quest][index]
}


ItemFlavor function SeasonQuest_GetMissionForIndex( ItemFlavor quest, int missionIndex )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	return file.questMissions[quest][missionIndex]
}


int function SeasonQuest_GetTreasurePacksMaxCount( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	return GetSettingsArraySize( GetSettingsBlockArray( ItemFlavor_GetSettingsBlock( quest ), "treasurePacksSchedule" ) )
}

int function GetDayIndexOfActiveSeason()
{
	int timeNow = GetUnixTimestamp()
	ItemFlavor ornull seasonNow = GetActiveSeason( timeNow )
	if ( seasonNow == null )
		return -1
	expect ItemFlavor( seasonNow )

	int seasonStartTime = CalEvent_GetStartUnixTime( seasonNow )
	return ((timeNow - seasonStartTime) / SECONDS_PER_DAY)
}

int function SeasonQuest_GetTreasurePacksMaxPurchableCountForPlayer( entity player, ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	const NO_TREASURE_PACKS_TO_BUY = -1

	int timestamp = GetUnixTimestamp()

	int completeDays = GetDayIndexOfActiveSeason()
	int maxPacks = SeasonQuest_GetTreasurePacksMaxCount( quest )
	int maxCatchupIndex = minint( completeDays, maxPacks )
	int currentCount    = SeasonQuest_GetTreasurePacksCountForPlayer( player, quest )
	return maxint( (maxCatchupIndex - currentCount), 0 )
}


int function GetMissionIndexByUnixTimestamp( ItemFlavor quest, int timestamp )
{
	int maxMissions = SeasonQuest_GetMissionsMaxCount( quest )

	for ( int missionIndex = 0; missionIndex < maxMissions; missionIndex++ )
	{
		int unlockTime = SeasonQuest_GetUnlockTimeForMissionIndex( quest, missionIndex )
		if ( unlockTime > timestamp )
			return missionIndex - 1
	}

	
	return maxMissions - 2
}


int function SeasonQuest_GetTreasurePackIndexRequiredForComicPage( ItemFlavor quest, int index )
{
	int packsInSeason               = SeasonQuest_GetTreasurePacksMaxCount( quest )
	int packIndexRequiredForComicPage = -1

	ItemFlavor comicPage = file.questComicPages[ quest ][ index ]
	for ( int packIndex = 0; packIndex < packsInSeason; packIndex++ )
	{
		array<ItemFlavor> items
		array<int> itemCounts
		ItemFlavorBag rewards = SeasonQuest_GetTreasurePackRewardsForIndex( quest, packIndex )

		if ( rewards.flavors.contains( comicPage ) )
		{
			packIndexRequiredForComicPage = packIndex
			break
		}
	}

	return packIndexRequiredForComicPage
}


int function SeasonQuest_GetTreasurePackIndexRequiredForMission( ItemFlavor quest, int missionIndex )
{
	int packsInSeason               = SeasonQuest_GetTreasurePacksMaxCount( quest )
	int packIndexRequiredForMission = -1

	ItemFlavor mission = file.questMissions[ quest ][ missionIndex ]
	for ( int packIndex = 0; packIndex < packsInSeason; packIndex++ )
	{
		array<ItemFlavor> items
		array<int> itemCounts
		ItemFlavorBag rewards = SeasonQuest_GetTreasurePackRewardsForIndex( quest, packIndex )

		if ( rewards.flavors.contains( mission ) )
		{
			packIndexRequiredForMission = packIndex
			break
		}
	}

	return packIndexRequiredForMission
}


ItemFlavorBag function SeasonQuest_GetTreasurePackRewardsForIndex( ItemFlavor quest, int boxIndex )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	var settingsBlock = ItemFlavor_GetSettingsBlock( quest )

	ItemFlavorBag rewards

	var treasurePackScheduleBlockArray = GetSettingsBlockArray( settingsBlock, "treasurePacksSchedule" )
	int packCount                      = GetSettingsArraySize( treasurePackScheduleBlockArray )
	Assert( boxIndex < packCount, "You have bad persistence data, please run mp_rr_box and run script ResetQuestPersistence() from the console." )
	var boxInfoBlock      = GetSettingsArrayElem( treasurePackScheduleBlockArray, boxIndex )
	var rewardsBlockArray = GetSettingsBlockArray( boxInfoBlock, "rewards" )
	foreach ( int rewardIndex, var rewardBlock in IterateSettingsArray( rewardsBlockArray ) )
	{
		asset rewardAsset = GetSettingsBlockAsset( rewardBlock, "flavor" )
		int quantity      = GetSettingsBlockInt( rewardBlock, "quantity" )

		if ( !IsValidItemFlavorSettingsAsset( rewardAsset ) )
		{
			Warning( "Skipping item reward #%d of quest '%s' because the asset is not a valid item flavor: '%s'", rewardIndex, string(ItemFlavor_GetAsset( quest )), string(rewardAsset) )
			continue
		}

		ItemFlavor reward = GetItemFlavorByAsset( rewardAsset )
		if ( !IsQuestActive( quest ) && ItemFlavor_GetType( reward ) == eItemType.voucher )
			continue 

		rewards.flavors.append( reward )
		rewards.quantities.append( quantity )
	}

	return rewards
}


int function SeasonQuest_GetTreasurePacksLatestPickupTimeForPlayer( entity player, ItemFlavor quest )
{
	return player.GetPersistentVarAsInt( BuildPersistentVarName( quest, VARNAME_TB_lastPickupTime ) )
}


int function SeasonQuest_GetTreasurePacksCountForPlayer( entity player, ItemFlavor quest )
{
#if DEV
		if ( DEV_ShouldIgnorePersistence() )
			return 0
#endif

	int maxPacks = SeasonQuest_GetTreasurePacksMaxCount( quest )
	if ( GetCurrentPlaylistVarBool( "seasonquest_force_all_treasurepacks_collected", false ) )
		return maxPacks

	int forcedPacks = GetConVarInt( "seasonquest_force_treasurepacks_count" )
	if ( forcedPacks >= 0 )
		return minint( forcedPacks, maxPacks )

	int earned    = SeasonQuest_GetEarnedTreasurePacksCountForPlayer( player, quest )
	int purchased = SeasonQuest_GetPurchasedTreasurePacksCountForPlayer( player, quest )

	return minint( earned + purchased, SeasonQuest_GetTreasurePacksMaxCount( quest ) )
}


int function SeasonQuest_GetEarnedTreasurePacksCountForPlayer( entity player, ItemFlavor quest )
{
	return player.GetPersistentVarAsInt( BuildPersistentVarName( quest, VARNAME_TB_totalPickups ) )
}

int function SeasonQuest_GetPurchasedTreasurePacksCountForPlayer( entity player, ItemFlavor quest )
{
	return player.GetPersistentVarAsInt( BuildPersistentVarName( quest, VARNAME_TB_lastSeenPurchased ) )
}

int function SeasonQuest_GetLastMissionUnlockTime( entity player, ItemFlavor quest )
{
	return player.GetPersistentVarAsInt( BuildPersistentVarName( quest, VARNAME_lastMissionUnlockTime ) )
}






























































string function SeasonQuest_GetGRXOfferLocation( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( quest ), "grxOfferLocation" )
}


ItemFlavor function SeasonQuest_GetTreasureBoxPurchaseFlav( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )

	return GetItemFlavorByAsset( GetGlobalSettingsAsset( ItemFlavor_GetAsset( quest ), "treasureBoxPurchaseFlav" ) )
}














bool function SeasonQuest_HaveStartedQuest( entity player, ItemFlavor quest )
{
	return (player.GetPersistentVarAsInt( BuildPersistentVarName( quest, VARNAME_haveStartedQuest ) ) != 0)
}








asset function SeasonQuest_GetComicPanelDataForIndex( ItemFlavor quest, int index )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	ItemFlavor comicPage = SeasonQuest_GetComicPageForIndex( quest, index )
	return Comic_GetPanelData( comicPage )
}

asset function Comic_GetPanelData( ItemFlavor comicPage )
{
	Assert( ItemFlavor_GetType( comicPage ) == eItemType.quest_comic )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( comicPage ), "comicChapterDT" )
}

asset function Comic_GetPreviewImage( ItemFlavor comicPage )
{
	Assert( ItemFlavor_GetType( comicPage ) == eItemType.quest_comic )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( comicPage ), "comicChapterPreviewImage" )
}

asset function SeasonQuest_GetLoreSequencePrologue( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( quest ), "loreSequencePrologueDT" )
}


asset function SeasonQuest_GetLoreSequenceEpilogue( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( quest ), "loreSequenceEpilogueDT" )
}


asset function Mission_GetLoreSequenceStoryChapterData( ItemFlavor mission )
{
	Assert( ItemFlavor_GetType( mission ) == eItemType.quest_mission )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( mission ), "loreSequenceChapterPostSuccessDT" )
}

asset function Mission_GetSecondLoreSequenceStoryChapterData( ItemFlavor mission )
{
	Assert( ItemFlavor_GetType( mission ) == eItemType.quest_mission )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( mission ), "secondLoreSequenceChapterPostSuccessDT" )
}

bool function Mission_GetLoreSequenceHasCommunityVote( ItemFlavor mission )
{
	Assert( ItemFlavor_GetType( mission ) == eItemType.quest_mission )
	return GetGlobalSettingsBool( ItemFlavor_GetAsset( mission ), "hasCommunityVote" )
}

string function Mission_GetLoreSequenceFirstPlaylistBoolName( ItemFlavor mission )
{
	Assert( ItemFlavor_GetType( mission ) == eItemType.quest_mission )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( mission ), "firstPlaylistBool" )
}

string function Mission_GetLoreSequenceSecondPlaylistBoolName( ItemFlavor mission )
{
	Assert( ItemFlavor_GetType( mission ) == eItemType.quest_mission )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( mission ), "secondPlaylistBool" )
}

asset function Mission_GetLoreSequenceRadioPlay( ItemFlavor mission )
{
	Assert( ItemFlavor_GetType( mission ) == eItemType.quest_mission )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( mission ), "radioPlay" )
}

asset function Mission_GetLoreSequenceSecondRadioPlay( ItemFlavor mission )
{
	Assert( ItemFlavor_GetType( mission ) == eItemType.quest_mission )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( mission ), "secondRadioPlay" )
}


string function Mission_GetLoreSequenceStoryChapterName( ItemFlavor mission )
{
	Assert( ItemFlavor_GetType( mission ) == eItemType.quest_mission )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( mission ), "loreSequenceChapterPostSuccessName" )
}
asset function Mission_GetLoreSequenceQuestItemData( ItemFlavor mission )
{
	Assert( ItemFlavor_GetType( mission ) == eItemType.quest_mission )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( mission ), "loreSequenceQuestItemDT" )
}
string function Mission_GetLoreSequenceQuestItemName( ItemFlavor mission )
{
	Assert( ItemFlavor_GetType( mission ) == eItemType.quest_mission )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( mission ), "loreSequenceQuestItemName" )
}

string function Mission_GetLoreType( ItemFlavor mission )
{
	Assert( ItemFlavor_GetType( mission ) == eItemType.quest_mission )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( mission ), "loreType" )
}

string function Mission_GetSecondLoreType( ItemFlavor mission )
{
	Assert( ItemFlavor_GetType( mission ) == eItemType.quest_mission )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( mission ), "secondLoreType" )
}

string function SeasonQuest_GetLoreTypeForMissionIndex( ItemFlavor flav, int missionIndex )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )

	bool isEitherOr = SeasonQuest_GetLoreSequenceStoryChapterHasCommunityVote( flav, missionIndex )
	if( isEitherOr )
	{
		string firstPlaylistBoolName = SeasonQuest_GetLoreSequenceStoryChapterFirstPlaylistBoolName( flav, missionIndex )
		bool firstPlaylistBool = GetCurrentPlaylistVarBool( firstPlaylistBoolName, false )

		if( firstPlaylistBool )
			return Mission_GetLoreType( file.questMissions[ flav ][missionIndex] )
		else
			return Mission_GetSecondLoreType( file.questMissions[ flav ][missionIndex] )
	}

	return Mission_GetLoreType( file.questMissions[ flav ][missionIndex] )
}

asset function SeasonQuest_GetLoreSequenceRadioPlayForMissionIndex( ItemFlavor flav, int missionIndex )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )

	bool isEitherOr = SeasonQuest_GetLoreSequenceStoryChapterHasCommunityVote( flav, missionIndex )
	if( isEitherOr )
	{
		string firstPlaylistBoolName = SeasonQuest_GetLoreSequenceStoryChapterFirstPlaylistBoolName( flav, missionIndex )
		bool firstPlaylistBool = GetCurrentPlaylistVarBool( firstPlaylistBoolName, false )

		if( firstPlaylistBool )
			return Mission_GetLoreSequenceRadioPlay( file.questMissions[ flav ][missionIndex] )
		else
			return Mission_GetLoreSequenceSecondRadioPlay( file.questMissions[ flav ][missionIndex] )
	}

	return Mission_GetLoreSequenceRadioPlay( file.questMissions[ flav ][missionIndex] )
}

asset function SeasonQuest_GetLoreSequenceStoryChapterDataForMissionIndex( ItemFlavor flav, int missionIndex )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )

	bool isEitherOr = SeasonQuest_GetLoreSequenceStoryChapterHasCommunityVote( flav, missionIndex )
	if( isEitherOr )
	{
		string firstPlaylistBoolName = SeasonQuest_GetLoreSequenceStoryChapterFirstPlaylistBoolName( flav, missionIndex )

		bool firstPlaylistBool = GetCurrentPlaylistVarBool( firstPlaylistBoolName, false )

		if( firstPlaylistBool )
			return Mission_GetLoreSequenceStoryChapterData( file.questMissions[ flav ][missionIndex] )
		else
			return Mission_GetSecondLoreSequenceStoryChapterData( file.questMissions[ flav ][missionIndex] )
	}

	return Mission_GetLoreSequenceStoryChapterData( file.questMissions[ flav ][missionIndex] )
}

bool function SeasonQuest_GetLoreSequenceStoryChapterHasCommunityVote( ItemFlavor flav, int missionIndex )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )
	return Mission_GetLoreSequenceHasCommunityVote( file.questMissions[ flav ][missionIndex] )
}

string function SeasonQuest_GetLoreSequenceStoryChapterFirstPlaylistBoolName( ItemFlavor flav, int missionIndex )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )
	return Mission_GetLoreSequenceFirstPlaylistBoolName( file.questMissions[ flav ][missionIndex] )
}

string function SeasonQuest_GetLoreSequenceStoryChapterSecondPlaylistBoolName( ItemFlavor flav, int missionIndex )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )
	return Mission_GetLoreSequenceSecondPlaylistBoolName( file.questMissions[ flav ][missionIndex] )
}

string function SeasonQuest_GetLoreSequenceStoryChapterNameForMissionIndex( ItemFlavor flav, int missionIndex )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )
	return Mission_GetLoreSequenceStoryChapterName( file.questMissions[ flav ][missionIndex] )
}
asset function SeasonQuest_GetLoreSequenceQuestItemDataForMissionIndex( ItemFlavor flav, int missionIndex )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )
	return Mission_GetLoreSequenceQuestItemData( file.questMissions[ flav ][missionIndex] )
}
string function SeasonQuest_GetLoreSequenceQuestItemNameForMissionIndex( ItemFlavor flav, int missionIndex )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )
	return Mission_GetLoreSequenceQuestItemName( file.questMissions[ flav ][missionIndex] )
}

string function Mission_GetQuestItemName( ItemFlavor mission )
{
	Assert( ItemFlavor_GetType( mission ) == eItemType.quest_mission )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( mission ), "questItemName" )
}
string function Mission_GetQuestItemDesc( ItemFlavor mission )
{
	Assert( ItemFlavor_GetType( mission ) == eItemType.quest_mission )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( mission ), "questItemDesc" )
}

string function SeasonQuest_GetQuestItemNameForMissionIndex( ItemFlavor flav, int missionIndex )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )
	return Mission_GetQuestItemName( file.questMissions[ flav ][missionIndex] )
}
string function SeasonQuest_GetQuestItemDescForMissionIndex( ItemFlavor flav, int missionIndex )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )
	return Mission_GetQuestItemDesc( file.questMissions[ flav ][missionIndex] )
}

asset function SeasonQuest_GetQuestItemSecondIconForMissionIndex( ItemFlavor flav, int missionIndex )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( file.questMissions[ flav ][missionIndex] ), "secondQuestItemIcon" )
}

asset function SeasonQuest_GetQuestItemIconForMissionIndex( ItemFlavor flav, int missionIndex )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( file.questMissions[ flav ][missionIndex] ), "questItemIcon" )
}

string function SeasonQuestMission_GetPlaylistName( ItemFlavor mission )
{
	Assert( ItemFlavor_GetType( mission ) == eItemType.quest_mission )
	var settingsBlock = ItemFlavor_GetSettingsBlock( mission )
	return GetSettingsBlockString( settingsBlock, "playlistName" )
}


int function SeasonQuestMission_GetUnlockTime( ItemFlavor mission )
{
	Assert( ItemFlavor_GetType( mission ) == eItemType.quest_mission )
	var settingsBlock    = ItemFlavor_GetSettingsBlock( mission )
	string unlockTimeStr = GetSettingsBlockString( settingsBlock, "unlockTime" )

	int ornull ut = DateTimeStringToUnixTimestamp( unlockTimeStr )
	if ( ut != null )
		return expect int(ut)
	return INT_MAX
}


ItemFlavorBag function SeasonQuest_GetCompletionRewards( ItemFlavor quest )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )

	ItemFlavorBag rewards
	foreach ( int rewardIdx, var rewardData in IterateSettingsAssetArray( ItemFlavor_GetAsset( quest ), "completionRewards" ) )
	{
		asset rewardAsset = GetSettingsBlockAsset( rewardData, "flavor" )
		if ( !IsValidItemFlavorSettingsAsset( rewardAsset ) )
		{
			Warning( "Skipping completion reward #%d of quest '%s' because the asset is not a valid item flavor: '%s'", rewardIdx, string(ItemFlavor_GetAsset( quest )), string(rewardAsset) )
			continue
		}

		ItemFlavor reward = GetItemFlavorByAsset( rewardAsset )
		if ( !IsQuestActive( quest ) && ItemFlavor_GetType( reward ) == eItemType.voucher )
			continue 

		rewards.flavors.append( reward )
		rewards.quantities.append( GetSettingsBlockInt( rewardData, "quantity" ) )
	}

	return rewards
}


ItemFlavorBag function SeasonQuestMission_GetRewards( ItemFlavor quest, ItemFlavor mission )
{
	Assert( ItemFlavor_GetType( quest ) == eItemType.quest )
	Assert( ItemFlavor_GetType( mission ) == eItemType.quest_mission )

	ItemFlavorBag rewards
	foreach ( int rewardIdx, var rewardData in IterateSettingsAssetArray( ItemFlavor_GetAsset( mission ), "rewards" ) )
	{
		asset rewardAsset = GetSettingsBlockAsset( rewardData, "flavor" )
		if ( !IsValidItemFlavorSettingsAsset( rewardAsset ) )
		{
			Warning( "Skipping item reward #%d of quest mission '%s' because the asset is not a valid item flavor: '%s'", rewardIdx, string(ItemFlavor_GetAsset( mission )), string(rewardAsset) )
			continue
		}

		ItemFlavor reward = GetItemFlavorByAsset( rewardAsset )
		if ( !IsQuestActive( quest ) && ItemFlavor_GetType( reward ) == eItemType.voucher )
			continue 

		rewards.flavors.append( reward )
		rewards.quantities.append( GetSettingsBlockInt( rewardData, "quantity" ) )
	}

	return rewards
}































#if DEV
const string CMD_GIVETREASUREBOX_1 = "seasonquest_give_treasurebox_1"
const string CMD_GIVETREASUREBOX_5 = "seasonquest_give_treasurebox_5"
const string CMD_FINISHMISSION = "seasonquest_finish_mission"















































































































































#endif


string function SeasonQuest_GetCurrentPackCountDesc()
{
	ItemFlavor ornull quest = SeasonQuest_GetActiveSeasonQuest( GetUnixTimestamp() )
	if ( quest == null )
		return ""
	expect ItemFlavor( quest )

	entity player = GetLocalClientPlayer()
	int packsHave = SeasonQuest_GetTreasurePacksCountForPlayer( player, quest )
	int packsMax = SeasonQuest_GetTreasurePacksMaxCount( quest )
	return Localize( "#QUEST_MAP_INFOBOX_XOFY", packsHave, packsMax )
}

void function SeasonQuest_UpdateMinimapRui( var rui )
{
	
	if ( !IsConnected() )
		return

	ItemFlavor ornull quest = SeasonQuest_GetActiveSeasonQuest( GetUnixTimestamp() )
	if ( quest == null )
	{
		RuiSetBool( rui, "shouldDraw", false )
		return
	}
	expect ItemFlavor( quest )

	RuiSetBool( rui, "shouldDraw", true )
	RuiSetString( rui, "headerText", Localize( "#QUEST_MAP_INFOBOX_TITLE" ) )

	entity player = GetLocalClientPlayer()
	int packsHave = SeasonQuest_GetTreasurePacksCountForPlayer( player, quest )
	int packsMax = SeasonQuest_GetTreasurePacksMaxCount( quest )
	if ( packsHave >= packsMax )
	{
		RuiSetString( rui, "detailsText", Localize( "#QUEST_MAP_INFOBOX_HAVEALL" ) )
		RuiSetString( rui, "timerText", Localize( "#QUEST_MAP_INFOBOX_XOFY", packsHave, packsMax ) )
		return
	}

	int seconds = TreasureBox_SecondsUntilNextPickup( player, quest )
	if ( seconds > 0 )
	{
		RuiSetString( rui, "detailsText", Localize( "#QUEST_MAP_INFOBOX_HAVECOOLDOWN" ) )
		RuiSetString( rui, "timerText", TreasureBox_GetCooldownDesc( player, quest ) )
		return
	}

	RuiSetString( rui, "detailsText", Localize( "#QUEST_MAP_INFOBOX_NEEDONE" ) )
	RuiSetString( rui, "timerText", Localize( "#QUEST_MAP_INFOBOX_XOFY", packsHave, packsMax ) )
}

void function SCB_DoGotTreasurePackNotify()
{
	
	{
		AnnouncementData announcement = Announcement_Create( "" )
		Announcement_SetStyle( announcement, ANNOUNCEMENT_STYLE_GOT_TREASURE_PACK )
		Announcement_SetPurge( announcement, true )
		Announcement_SetOptionalTextArgsArray( announcement, [Localize("#TREASUREPACK_COLLECTED_NOTIFY"), SeasonQuest_GetCurrentPackCountDesc() ] )
		Announcement_SetPriority( announcement, 200 )
		Announcement_SetSoundAlias( announcement, "Season51_loot_pickup_TreasurePack" )
		announcement.duration = 4.0
		AnnouncementFromClass( GetLocalViewPlayer(), announcement )
	}
}















































bool function IsQuestActive( ItemFlavor quest )
{
	ItemFlavor ornull season = SeasonQuest_GetSeasonForQuest( quest )
	Assert( season != null, "No season is associated with this quest." )

	Assert( IsConnected() )


	if ( season == null )
		return false
	else if ( CalEvent_IsActive( expect ItemFlavor( season ), GetUnixTimestamp() ) )
		return true

	return false
}

bool function IsQuestCurrentOrLastSeason( ItemFlavor quest )
{
	ItemFlavor ornull season = SeasonQuest_GetSeasonForQuest( quest )
	Assert( season != null, "No season is associated with this quest." )

	Assert( IsConnected() )


	if ( season == null )
		return false
	else if ( CalEvent_IsActive( expect ItemFlavor( season ), GetUnixTimestamp() ) )
		return true
	else if ( GetPrecedingSeason( GetLatestSeason( GetUnixTimestamp() ) ) == season )
		return true

	return false
}
