global function Sh_ArenaDeathField_Init






global function TeamShouldSeeBeaconMarker

global function GetRingTuningOverrideVar




























































































global function Cl_Deathfield_GetRadiusScale
global function Cl_Deathfield_GetFXIDForRadius
global function Cl_Deathfield_GetFXIDForOuterRadius
#if DEV
global function Cl_Deathfield_SetOpacityOverride
#endif
global function Cl_GetDeathFieldStage
global function Cl_SURVIVAL_GetDeathField
global function Cl_SURVIVAL_GetDeathFieldCurrentRadius
global function Cl_SURVIVAL_GetDeathFieldCenter
global function Cl_SURVIVAL_GetSafeZoneCenter
global function Cl_SURVIVAL_PosInsideDeathField
global function Cl_SURVIVAL_PosInSafeZone
global function ServerCallback_UpdateSurveyBeaconHUDVisibility
global function ServerCallback_SurveyBeaconNotifications
global function SURVIVAL_Deathfield_GetStartRadius
global function SURVIVAL_AddCallback_OnDeathFieldStartShrink
global function SURVIVAL_AddCallback_OnDeathFieldStopShrink
global function UpdateSurveyBeaconHint
global function SurveyBeacon_ShowSquadInfo


global function HasDeathFieldImmunity
global function Deathfield_GetDoesDeathfieldStartEnabled
global function SURVIVAL_GetCurrentDeathFieldStage
global function SURVIVAL_GetCurrentRoundString
global function SURVIVAL_IsFinalDeathFieldStage
global function Survival_GetNumDeathfieldStages

global function AddCallback_OnSurvivalDeathFieldStageChanged
global function RemoveCallback_OnSurvivalDeathFieldStageChanged





global function HasActiveSurveyZone
global function GetActiveSurveyZone
global function TeamHasActiveSurveyZone


table < float, string > distanceToSound =
{
	[ 17000.0 ] = "Survival_Circle_Edge_Large",
	[ 4000.0 ] = "Survival_Circle_Edge_Medium",
	[ 0.0 ] = "Survival_Circle_Edge_Small",
}


const asset DEATHFIELD_EFFECT = $"P_ring_FP_hit_01"
const string COLOR_CORRECTION = "materials/correction/outside_ring.raw_hdr"
const asset OBSERVER_DEATHFIELD_EFFECT = $"P_Observer_outside_heat_1p"

const string DESIGNER_PLACED_CIRCLE_END_SCRIPT_NAME = "circle_end_location_override"
const string DESIGNER_PLACED_CIRCLE_END_RADIUS_NAME = "selection_radius"

const string DESIGNER_PLACED_CIRCLE_END_PLAYLIST_VAR = "sur_circle_end_on_designer_placed_node"
const string DESIGNER_PLACED_TARGET_END_PLAYLIST_VAR = "sur_circle_end_on_target_name"
const string CIRCLE_END_OVERRIDE_PLAYLIST_VAR = "sur_circle_end_override"

global const float REALBIG_CIRCLE_END_RADIUS = 85000
global const float REALBIG_CIRCLE_END_RADIUS_SQ = REALBIG_CIRCLE_END_RADIUS * REALBIG_CIRCLE_END_RADIUS

global const float REALBIG_CIRCLE_END_RADIUS_SMALL_INNER = 30000
global const float REALBIG_CIRCLE_END_RADIUS_SMALL_OUTER = 40000

global const float DEATHFIELD_DAMAGE_CHECK_STEP_TIME = 1.5
global const string FINAL_ROUND_ALIAS_SUFFIX = "Final"

global const float PERSIST_TIME_OUTSIDE_CIRCLE_DEFAULT = 30.0
global const float PERSIST_TIME_OUTSIDE_CIRCLE_LONG = 9999.0

global const string NV_OBSERVER_SURVERY_RING_ENABLED = "PrivateMatch_Observer_SurveyRingEnabled"

global enum ePathfinderNotifications
{
	TEAM_SUCCESS
	NOT_PATHFINDER
	ALREADY_USED
	ALREADY_ACTIVE
}

const int ID_INVALID = -1
global const float RING_START_WAIT_TIME = 5.0
global const float MARGIN_WAIT_TIME = 5.0
const asset SURVEY_BEACON_MODEL = $"mdl/props/pathfinder_beacon_radar/pathfinder_beacon_radar_animated.rmdl"
const asset NEXT_ZONE_SURVEY_BEACON_MODEL = $"mdl/communication/terminal_usable_imc_01.rmdl"

#if DEV
const string DUMMY_ZONE_WP_NAME = "dev_dummy_circle"
#endif

global struct DeathFieldStageData
{
	float  endRadius
	float  shrinkDuration
	float  preShrinkDuration
	float  percentDamagePerTick = 0.2
	float  circleDeviation = 1.0
	float  minimapZoomScale = -1.0




}























struct
{




























	array<DeathFieldStageData> deathFieldStageData

	float					   	overrideStartRadius = -1
	array<float>			   	deathFieldStagesOverrideRadius
	array<float>			   	deathFieldStagesOverrideMinimapZoom
	int                        	deathFieldStartStage
	array<entity>               surveyMinimapEnts
	entity                      observerSurveyMinimapEnt
	array<entity>               surveyBeacons


		entity deathField
		entity safeZone
		array< void functionref ( DeathFieldStageData ) > ClientCallbacks_OnDeathFieldStartShrink
		array< void functionref ( DeathFieldStageData ) > ClientCallbacks_OnDeathFieldStopShrink
		int                                               colorCorrection
		float                                             nextHolsterHintTime
		bool											  trackingObserverDeathfield
		int												  fieldEffectHandle
		float 											  ringOpacityOverrideValue
		array< int > 									  deathFieldFxIdx
		array< int > 									  deathFieldFxOuterIdx


	array<void functionref( int stage, float nextCircleStartTime )> onSurvivalDeathFieldStageChangedCallbacks

	bool usePreciseRingFx
	bool ringOpacityOverrideEnabled

} file

void function Sh_ArenaDeathField_Init()
{
	PrecacheScriptString( "deathField" )


	PrecacheScriptString( ENEMY_SURVEY_BEACON_SCRIPTNAME )
	PrecacheScriptString( NEXT_ZONE_SURVEY_BEACON_SCRIPTNAME )




	PrecacheParticleSystem( $"P_sort_survival_radius_CP_1x1" )
	PrecacheParticleSystem( $"P_sort_survival_radius_CP_1x5" )
	PrecacheParticleSystem( $"P_sort_survival_radius_CP_1x100" )

	PrecacheParticleSystem( $"P_sort_survival_radius_CP_1k_x_1k" )
	PrecacheParticleSystem( $"P_sort_survival_radius_CP_1k_x_5k" )
	PrecacheParticleSystem( $"P_sort_survival_radius_CP_1k_x_100k" )

	PrecacheParticleSystem( $"P_sort_ring_radCP1_opaCP2_1k_x_1k" )
	PrecacheParticleSystem( $"P_sort_ring_radCP1_opaCP2_1k_x_5k" )
	PrecacheParticleSystem( $"P_sort_ring_radCP1_opaCP2_1k_x_100k" )

	PrecacheParticleSystem( $"outside_survival_radius_CP_1x1" )
	PrecacheParticleSystem( $"outside_survival_radius_CP_1x5" )
	PrecacheParticleSystem( $"outside_survival_radius_CP_1x100" )

	PrecacheParticleSystem( $"outside_survival_radius_CP_1k_x_1k" )
	PrecacheParticleSystem( $"outside_survival_radius_CP_1k_x_5k" )
	PrecacheParticleSystem( $"outside_survival_radius_CP_1k_x_100k" )

	PrecacheParticleSystem( $"outside_ring_radCP1_opaCP2_1k_x_1k" )
	PrecacheParticleSystem( $"outside_ring_radCP1_opaCP2_1k_x_5k" )
	PrecacheParticleSystem( $"outside_ring_radCP1_opaCP2_1k_x_100k" )














	file.usePreciseRingFx = GetCurrentPlaylistVarBool( "deathfield_usePreciseRingFx", true )

	file.ringOpacityOverrideEnabled = GetCurrentPlaylistVarBool( "deathfield_ringOpacityOverrideEnabled", true )
	if ( file.ringOpacityOverrideEnabled )
	{
		RegisterNetworkedVariable( "ringOpacityOverride", SNDC_GLOBAL, SNVT_FLOAT_RANGE, 1.0, 0.0, 1.0 )
	}

	PrecacheParticleSystem( DEATHFIELD_EFFECT )
	PrecacheParticleSystem( OBSERVER_DEATHFIELD_EFFECT )

	RegisterSignal( "NewDeathFieldStarting" )
	RegisterSignal( "UpdateSurveyBeaconVisibility" )



























		if( Deathfield_EnforcedRingLethality_Enabled() )
		{
			Sh_DeathField_EnforcedRingLethality_Init()
		}


	InitDeathFieldDataAndStageData()


		file.colorCorrection = ColorCorrection_Register( COLOR_CORRECTION )

		AddCreateCallback( "script_mover", OnPropScriptCreated )
		AddCreateCallback( "prop_script", OnPropScriptCreated )
		AddCreateCallback( "prop_dynamic", OnPropDynamicCreated )
		AddCallback_PlayerClassChanged( SurveyBeaon_ClassChanged )

		AddCallback_OnViewPlayerChanged( OnViewPlayerChanged )

		AddCreatePilotCockpitCallback( TrackDeathfieldDistance )
		AddLocalPlayerTookDamageTypeCallback( eDamageSourceId.deathField, Callback_OnPlayerTakeDeathFieldDamage )
#if DEV
			Waypoints_RegisterCustomType( DUMMY_ZONE_WP_NAME, DEV_OnDummyCircleWpInstanced )
#endif

		SurveyBeacon_AddSurveyBeaconMinimapPackage()

		if ( GetCurrentPlaylistVarBool( "deathfield_sound_override", false ) )
		{
			distanceToSound.clear()
			int idx = 0
			float lastDist = 0
			while ( GetCurrentPlaylistVarString( "deathfield_sound_override_stage_" + idx, "" ) != "" )
			{
				string override = GetCurrentPlaylistVarString( "deathfield_sound_override_stage_" + idx, "" )
				array<string> tokens = split( override, ":" )

				Assert( tokens.len() == 2 )
				float dist = float( tokens[0] )
				string audio = tokens[1]

				if ( idx > 0 )
				{
					Assert( dist < lastDist )
				}

				lastDist = dist
				distanceToSound[ dist ] <- audio
				idx++
			}

			Assert( distanceToSound.len() > 0 )
		}

		if ( GetCurrentPlaylistVarBool( "deathfield_opacity_override", true ) )
		{
			if ( GetCurrentPlaylistVarFloat( "deathfield_ringOpacityOverrideValue", 1.0 ) != 1.0 )
			{
				file.ringOpacityOverrideValue = GetCurrentPlaylistVarFloat( "deathfield_ringOpacityOverrideValue", 1.0 )
			}
			else
			{
				RegisterNetVarFloatChangeCallback( "ringOpacityOverride", Cl_Deathfield_SetOpacityOverride )
			}
		}

		if ( file.ringOpacityOverrideEnabled )
		{
			file.deathFieldFxIdx = [ GetParticleSystemIndex( $"P_sort_ring_radCP1_opaCP2_1k_x_1k" ), GetParticleSystemIndex( $"P_sort_ring_radCP1_opaCP2_1k_x_5k" ), GetParticleSystemIndex( $"P_sort_ring_radCP1_opaCP2_1k_x_100k" ) ]
			file.deathFieldFxOuterIdx = [ GetParticleSystemIndex( $"outside_ring_radCP1_opaCP2_1k_x_1k" ), GetParticleSystemIndex( $"outside_ring_radCP1_opaCP2_1k_x_5k" ), GetParticleSystemIndex( $"outside_ring_radCP1_opaCP2_1k_x_100k" ) ]

		}
		else if ( file.usePreciseRingFx )
		{
			file.deathFieldFxIdx = [ GetParticleSystemIndex( $"P_sort_survival_radius_CP_1k_x_1k" ), GetParticleSystemIndex( $"P_sort_survival_radius_CP_1k_x_5k" ), GetParticleSystemIndex( $"P_sort_survival_radius_CP_1k_x_100k" ) ]
			file.deathFieldFxOuterIdx = [ GetParticleSystemIndex( $"outside_survival_radius_CP_1k_x_1k" ), GetParticleSystemIndex( $"outside_survival_radius_CP_1k_x_5k" ), GetParticleSystemIndex( $"outside_survival_radius_CP_1k_x_100k" ) ]
		}
		else
		{
			file.deathFieldFxIdx = [ GetParticleSystemIndex( $"P_sort_survival_radius_CP_1x1" ), GetParticleSystemIndex( $"P_sort_survival_radius_CP_1x5" ), GetParticleSystemIndex( $"P_sort_survival_radius_CP_1x100" ) ]
			file.deathFieldFxOuterIdx = [ GetParticleSystemIndex( $"outside_survival_radius_CP_1x1" ), GetParticleSystemIndex( $"outside_survival_radius_CP_1x5" ), GetParticleSystemIndex( $"outside_survival_radius_CP_1x100" ) ]
		}

}

























void function GenerateDeathFieldStageData()
{
	file.deathFieldStageData.clear()

	int i = 0
	while ( true )
	{
		float radius = GetRingTuningOverrideVar( "deathfield_radius_" + i, -1.0 )

		bool allowMissingDefaults = false
		if ( radius < 0 )
		{
			if ( file.deathFieldStageData.len() > 0 )
			{
				break
			}
			else
			{
				Warning( "Survival deathfield playlist vars are missing!" )
				allowMissingDefaults = true
			}
		}

		file.deathFieldStageData.append( CreateDeathFieldStageData( i++, allowMissingDefaults ) )
	}
}

float function GetRingTuningOverrideVar( string varName, float defaultValue )
{

	if ( GetCurrentPlaylistVarBool ("deathfield_allows_override", true ) )
	{
		
		const string NO_RING_TUNING_OVERRIDE = ""
		string tuningOverridePlaylist = GetCurrentPlaylistVarString ( "playlist_ring_tuning_override", NO_RING_TUNING_OVERRIDE )

		if ( tuningOverridePlaylist != NO_RING_TUNING_OVERRIDE )
		{
			
			return GetPlaylistVarFloat( tuningOverridePlaylist, varName, defaultValue )
		}
	}
	return GetCurrentPlaylistVarFloat( varName, defaultValue )

}

DeathFieldStageData function CreateDeathFieldStageData( int index, bool allowMissingDefaults )
{
	float lastRadius = SURVIVAL_Deathfield_GetStartRadius()

	if ( file.deathFieldStageData.len() > 0 )
	{
		lastRadius = file.deathFieldStageData[ file.deathFieldStageData.len() - 1 ].endRadius
	}

	bool circleDebug = GetBugReproNum() == 1001

	int currentIndex = file.deathFieldStageData.len()

	float defaultSpeed     = GetRingTuningOverrideVar( "deathfield_default_shrinkSpeed", 140.0 )
	float shrinkSpeed      = GetRingTuningOverrideVar( "deathfield_shrinkSpeed_" + index, -1.0 )
	float circleCloseSpeed = shrinkSpeed > 0 ? shrinkSpeed : defaultSpeed 

	DeathFieldStageData data
	data.circleDeviation = GetRingTuningOverrideVar( "deathfield_circleDeviation_" + index, 1.0 )

	if ( index < file.deathFieldStagesOverrideRadius.len() )
		data.endRadius = file.deathFieldStagesOverrideRadius[ index ]
	else
		data.endRadius = GetRingTuningOverrideVar( "deathfield_radius_" + index, allowMissingDefaults ? 20000.0 : -1.0 )

	if ( index < file.deathFieldStagesOverrideMinimapZoom.len() )
		data.minimapZoomScale = file.deathFieldStagesOverrideMinimapZoom[ index ]
	else if ( data.endRadius <= 600 )
		data.minimapZoomScale = 0.1
	else if ( data.endRadius <= 1000 )
		data.minimapZoomScale = 0.7
	else if ( data.endRadius <= 2000 )
		data.minimapZoomScale = 1.5
	else if ( data.endRadius <= 5000 )
		data.minimapZoomScale =  3.0

	data.preShrinkDuration = GetRingTuningOverrideVar( "deathfield_preShrinkDuration_" + index, allowMissingDefaults ? 240.0 : -1.0 )
	data.shrinkDuration = ((lastRadius - data.endRadius) / circleCloseSpeed)
	data.percentDamagePerTick = GetRingTuningOverrideVar( "deathfield_damagePercent_" + index, allowMissingDefaults ? 0.01 : -1.0 )

	Assert( data.endRadius > 0 )
	Assert( data.preShrinkDuration > 0 )
	Assert( data.shrinkDuration > 0 )
	Assert( data.percentDamagePerTick >= 0 )

	if ( circleDebug )
	{
		data.preShrinkDuration = 10.0
	}

	return data
}


void function InitDeathFieldDataAndStageData()
{
	file.deathFieldStartStage = 0

	GenerateDeathFieldStageData()

	file.deathFieldStartStage = GetCurrentPlaylistVarInt( "survival_death_field_start_stage", 0 )
	if ( file.deathFieldStartStage >= file.deathFieldStageData.len() )
		file.deathFieldStartStage = file.deathFieldStageData.len()
}


float function SURVIVAL_Deathfield_GetStartRadius()
{
	float startRadius = GetRingTuningOverrideVar( "survival_death_field_start_radius", 65000 )

	if ( file.deathFieldStartStage > 0 )
	{
		startRadius = file.deathFieldStageData[file.deathFieldStartStage - 1].endRadius
	}
	else if (file.overrideStartRadius > 0)
	{
		startRadius = file.overrideStartRadius
	}

	return startRadius
}

float function SURVIVAL_Deathfield_GetStartDamage()
{
	int startStage = maxint( file.deathFieldStartStage - 1, 0 )

	return file.deathFieldStageData[startStage].percentDamagePerTick
}

bool function TeamShouldSeeBeaconMarker( int team, entity beacon )
{
	array<entity> players = GetPlayerArrayOfTeam( team )

	bool shouldSee = false

	foreach ( player in players )
	{
		if ( HasActiveSurveyZone( player ) )
			return false

		if ( PlayerShouldSeeSurveyBeaconMarkers( player, beacon ) && !HasActiveSurveyZone( player ) )
			shouldSee = true
	}

	return shouldSee
}







































































































































































bool function Deathfield_GetDoesDeathfieldStartEnabled()
{
	return GetCurrentPlaylistVarBool( "deathfield_start_enabled", false )
}










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































void function SURVIVAL_AddCallback_OnDeathFieldStartShrink( void functionref( DeathFieldStageData ) callbackFunc )
{
	Assert( !file.ClientCallbacks_OnDeathFieldStartShrink.contains( callbackFunc ), "Already added " + string( callbackFunc ) + " with SURVIVAL_AddCallback_OnDeathFieldStartShrink" )
	file.ClientCallbacks_OnDeathFieldStartShrink.append( callbackFunc )
}

void function SURVIVAL_AddCallback_OnDeathFieldStopShrink( void functionref( DeathFieldStageData ) callbackFunc )
{
	Assert( !file.ClientCallbacks_OnDeathFieldStopShrink.contains( callbackFunc ), "Already added " + string( callbackFunc ) + " with SURVIVAL_AddCallback_OnDeathFieldStopShrink" )
	file.ClientCallbacks_OnDeathFieldStopShrink.append( callbackFunc )
}


void function UpdateSurveyBeaconHint()
{
	if ( GetCurrentPlaylistVarBool( "survey_beacons_enabled", true ) == false )
		return

	entity localClientPlayer = GetLocalClientPlayer()
	entity player = localClientPlayer.GetTeam() == TEAM_SPECTATOR ? localClientPlayer : GetLocalViewPlayer()
	if ( !PlayerShouldSeeSurveyBeaconMarkers( player, null ) )
		RemoveMapFeatureItemByName( "#SURVEY_BEACON" )
	else
		SetMapFeatureItem( 100, "#SURVEY_BEACON", "#SURVEY_BEACON_DESC", $"rui/hud/gametype_icons/survival/survey_beacon_only_pathfinder" )
}


void function OnPropDynamicCreated( entity prop )
{
	string modelName = prop.GetModelName()
	if ( modelName == "mdl/fx/bb_shield.rmdl" )
	{
		Chroma_OnBubbleShieldCreated( prop )
	}
}

void function OnPropScriptCreated( entity prop )
{
	if ( prop.GetTargetName() == "surveyZone" )
	{
		file.surveyMinimapEnts.append( prop )
		AddEntityDestroyedCallback( prop, SurveyZoneCleanupOnDestroy )

		entity owner = prop.GetOwner()
		entity localPlayer = GetLocalViewPlayer()
		if ( IsValid( owner ) && owner.GetTeam() == localPlayer.GetTeam() )
		{
			string playerName  = localPlayer == owner ? Localize( "#OBITUARY_YOU" ) : owner.GetPlayerName()
			Obituary_Print_Localized( Localize( "#PLAYER_REVEALED_NEXT_RING", playerName ) )
		}
	}

	if ( prop.GetTargetName() == "deathField" )
	{
		file.deathField = prop

		thread Cl_DeathFieldThink( prop )

		var gamestateRui = ClGameState_GetRui()
		array<var> ruis  = [gamestateRui]
		var cameraRui    = GetCameraCircleStatusRui()
		if ( IsValid( cameraRui ) )
			ruis.append( cameraRui )

		foreach ( rui in ruis )
		{
			RuiTrackFloat3( rui, "deathFieldOrigin", prop, RUI_TRACK_ABSORIGIN_FOLLOW )
		}
	}

	if ( (prop.GetTargetName() == "safeZone") || (prop.GetTargetName() == "safeZone_noline") )
	{
		file.safeZone = prop

		var gamestateRui = ClGameState_GetRui()
		array<var> ruis  = [gamestateRui]
		var cameraRui    = GetCameraCircleStatusRui()
		if ( IsValid( cameraRui ) )
			ruis.append( cameraRui )

		foreach ( rui in ruis )
		{
			RuiTrackFloat3( rui, "safeZoneOrigin", prop, RUI_TRACK_ABSORIGIN_FOLLOW )
		}
	}

	OnSurveyBeaconCreated( prop )
}

void function SurveyZoneCleanupOnDestroy( entity surveyZoneEnt )
{
	file.surveyMinimapEnts.fastremovebyvalue( surveyZoneEnt )
}

int function Cl_Deathfield_GetIndex( float radius )
{
	int idealIdx
	if ( radius <= 3000 )
	{
		idealIdx = 2
	}
	else if ( radius <= 17000 )
	{
		idealIdx = 1
	}
	else
	{
		idealIdx = 0
	}

	return idealIdx
}

int function Cl_Deathfield_GetFXIDForRadius( float radius )
{
	int idealIdx = Cl_Deathfield_GetIndex( radius )
	return file.deathFieldFxIdx[ idealIdx ]
}

int function Cl_Deathfield_GetFXIDForOuterRadius( float radius )
{
	int idealIdx = Cl_Deathfield_GetIndex( radius )
	return file.deathFieldFxOuterIdx[ idealIdx ]
}

void function Cl_DeathFieldThink( entity deathField )
{
	deathField.SetDoDestroyCallback( true )
	deathField.EndSignal( "OnDestroy" )

	int effectID = Cl_Deathfield_GetFXIDForRadius( 64000.0 )
	int ringFX   = StartParticleEffectOnEntity( deathField, effectID, FX_PATTACH_ABSORIGIN, ATTACHMENTID_INVALID )

	table<string, int> e
	e["fx"] <- ringFX

	int effectIDOuter = Cl_Deathfield_GetFXIDForOuterRadius( 64000.0 )
	int ringFXOuter   = StartParticleEffectOnEntity( deathField, effectIDOuter, FX_PATTACH_ABSORIGIN, ATTACHMENTID_INVALID )

	e["fxOuter"] <- ringFXOuter

	entity deathfieldSoundEnt = CreateClientsideScriptMover( $"mdl/dev/empty_model.rmdl", deathField.GetOrigin(), <0, 0, 0> )

	OnThreadEnd(
		function() : ( e, deathfieldSoundEnt )
		{
			deathfieldSoundEnt.Destroy()
			EffectStop( e["fx"], true, true )
			EffectStop( e["fxOuter"], true, true )
		}
	)

	string currentSoundPlaying = ""
	bool wasMoving             = false

	int currentDeathFieldStage = -1
	float lastStartTime        = 0.0
	float lastEndTime          = 0.0

	bool playSoundInPrematch = GetCurrentPlaylistVarBool( "deathfield_play_sound_in_prematch", true )
	vector prevDeathFieldOrigin = deathField.GetOrigin()

	while ( true )
	{
		entity clientPlayer = GetLocalClientPlayer()
		if ( !file.trackingObserverDeathfield && clientPlayer.GetTeam() == TEAM_SPECTATOR && clientPlayer.GetObserverMode() == OBS_MODE_ROAMING )
		{
			TrackDeathfieldDistance( clientPlayer, clientPlayer )
			file.trackingObserverDeathfield = true
		}

		int dIndex 		= GetLocalViewPlayer().DeathFieldIndex()
		int stage       = SURVIVAL_GetCurrentDeathFieldStage()
		float startTime = GetGlobalNetTime( "nextCircleStartTime" ) + MARGIN_WAIT_TIME

		if ( currentDeathFieldStage != stage )
		{
			currentDeathFieldStage = stage
			foreach ( void functionref( int, float ) callback in file.onSurvivalDeathFieldStageChangedCallbacks )
				thread callback( currentDeathFieldStage, startTime )
		}

		float duration  = GetGlobalNetTime( "circleCloseTime" ) - startTime
		float unclampedFrac = -1
		float frac          = 0

		if ( Time() < startTime )
		{
			unclampedFrac = -1
			frac          = 0
		}
		else if ( duration != 0 )
		{
			unclampedFrac = (Time() - startTime) / duration
			frac          = clamp( unclampedFrac, 0.0, 1.0 )
		}

		float radius        = DeathField_GetRadiusForNow( dIndex )
		float radiusScale   = Cl_Deathfield_GetRadiusScale()

		DeathFieldStageData deathFieldData = file.deathFieldStageData[stage]
		deathFieldData.shrinkDuration = duration

		if ( Time() >= startTime && lastStartTime < startTime )
		{
			
			
			foreach ( void functionref( DeathFieldStageData ) callback in file.ClientCallbacks_OnDeathFieldStartShrink )
				callback( deathFieldData )

			lastStartTime = startTime
		}

		if ( Time() >= (startTime + duration) && (startTime + duration) != lastEndTime )
		{
			
			
			foreach ( void functionref( DeathFieldStageData ) callback in file.ClientCallbacks_OnDeathFieldStopShrink )
				callback( deathFieldData )

			lastEndTime = (startTime + duration)
		}

		int idealFx = Cl_Deathfield_GetFXIDForRadius( radius )
		if ( idealFx != effectID )
		{
			effectID = idealFx
			EffectStop( e["fx"], true, true )
			EffectStop( e["fxOuter"], true, true )
			ringFX = StartParticleEffectOnEntity( deathField, effectID, FX_PATTACH_ABSORIGIN, ATTACHMENTID_INVALID )
			e["fx"] = ringFX
			effectIDOuter = Cl_Deathfield_GetFXIDForOuterRadius( radius )
			ringFXOuter   = StartParticleEffectOnEntity( deathField, effectIDOuter, FX_PATTACH_ABSORIGIN, ATTACHMENTID_INVALID )
			e["fxOuter"] = ringFXOuter
		}

		entity player        = GetLocalViewPlayer()
		vector fwdToPlayer   = Normalize( <player.GetOrigin().x, player.GetOrigin().y, 0> - <deathField.GetOrigin().x, deathField.GetOrigin().y, 0> )
		vector circleEdgePos = deathField.GetOrigin() + (fwdToPlayer * radius)
		circleEdgePos.z = player.EyePosition().z

		if ( PositionIsInMapBounds( circleEdgePos ) )
		{
			deathfieldSoundEnt.SetOrigin( circleEdgePos )
			string soundToPlay = GetCircleSoundForSize( radius )

			bool moving = unclampedFrac == frac

			if ( moving )
				soundToPlay = soundToPlay + "_Movement"

			if ( !playSoundInPrematch && GetGameState() == eGameState.Prematch )
			{
				soundToPlay = ""
			}

			if ( (!moving || currentSoundPlaying == "" || wasMoving != moving) && currentSoundPlaying != soundToPlay )
			{
				if ( currentSoundPlaying != "" )
					StopSoundOnEntity( deathfieldSoundEnt, currentSoundPlaying )
				if ( soundToPlay != "" )
					EmitSoundOnEntity( deathfieldSoundEnt, soundToPlay )

				currentSoundPlaying = soundToPlay
				wasMoving = moving
			}
		}

		Minimap_SetDeathFieldRadius( radius )
		FullMap_SetDeathFieldRadius( radius )
		
		if ( deathField.GetVelocity() == <0,0,0> || prevDeathFieldOrigin != deathField.GetOrigin() )
		{
			EffectSetControlPointVector( e["fx"], 0, deathField.GetOrigin() )
			EffectSetControlPointVector( e["fx"], 1, <radius / radiusScale, radius, 0> )
			EffectSetControlPointVector( e["fxOuter"], 0, deathField.GetOrigin() )
			EffectSetControlPointVector( e["fxOuter"], 1, <radius / radiusScale, radius, 0> )
		}
		prevDeathFieldOrigin = deathField.GetOrigin()

		if ( file.ringOpacityOverrideEnabled )
		{
			EffectSetControlPointVector( e["fx"], 2, < file.ringOpacityOverrideValue, 0, 0 > )
			EffectSetControlPointVector( e["fxOuter"], 2, < file.ringOpacityOverrideValue, 0, 0 > )
		}

		WaitFrame()
	}
}

void function Cl_Deathfield_SetOpacityOverride( entity e, float newVal )
{
	file.ringOpacityOverrideValue = newVal
}

float function Cl_Deathfield_GetRadiusScale()
{
	return file.usePreciseRingFx ? 1000.0 : 1.0
}

string function GetCircleSoundForSize( float radius )
{
	foreach ( distance, sound in distanceToSound )
	{
		if ( distance < radius )
		{
			return sound
		}
	}

	return ""
}

void function ServerCallback_SurveyBeaconNotifications( entity beacon, int notificationNumber )
{

	asset surveyBeaconIcon = SurveyBeacon_GetBeaconIcon( beacon )
	switch ( notificationNumber )
	{
		case ePathfinderNotifications.TEAM_SUCCESS:
			
			entity localViewPlayer = GetLocalViewPlayer()
			if ( IsValid( localViewPlayer ) && PlayerHasPassive( localViewPlayer, ePassives.PAS_PATHFINDER ) )
			{



				{
					AddPlayerHint( 2.5, 0.25, $"rui/hud/ultimate_icons/ultimate_pathfinder", "#SURVEY_PATHFINDER_SUCCESS" )
				}
			}

			clGlobal.levelEnt.Signal( "UpdateSurveyBeaconVisibility" )
			if ( Perks_Enabled() )
			{
				clGlobal.levelEnt.Signal( "UpdatePerkMinimapReady" )
			}

			break

		case ePathfinderNotifications.NOT_PATHFINDER:
			AddPlayerHint( 1.25, 0.25, surveyBeaconIcon, "#SURVEY_NOT_PATHFINDER" )
			break

		case ePathfinderNotifications.ALREADY_ACTIVE:
			AddPlayerHint( 1.25, 0.25, surveyBeaconIcon, "#SURVEY_ALREADY_ACTIVE" )
			break

		case ePathfinderNotifications.ALREADY_USED:
			AddPlayerHint( 1.25, 0.25, surveyBeaconIcon, "#SURVEY_ALREADY_USED" )
			break
	}

	bool showSquadInfo =  GetCurrentPlaylistVarBool( "beacon_show_squad_info", false )
	if (showSquadInfo)
		SurveyBeacon_ShowSquadInfo()
}

void function SurveyBeacon_ShowSquadInfo()
{
	thread SurveyBeacon_ShowSquadInfo_Thread()
}

void function  SurveyBeacon_ShowSquadInfo_Thread()
{
	var gamestateRui = ClGameState_GetRui()
	float squadInfoShowtime = GetCurrentPlaylistVarFloat( "beacon_info_duration", 7.0 )
	RuiSetFloat( gamestateRui, "scoreAlpha", 1 )
	wait squadInfoShowtime
	RuiSetFloat( gamestateRui, "scoreAlpha", 0 )
}









































































void function ServerCallback_UpdateSurveyBeaconHUDVisibility()
{
	clGlobal.levelEnt.Signal( "UpdateSurveyBeaconVisibility" )
	clGlobal.levelEnt.Signal( "UpdatePerkMinimapReady" )
}

void function SurveyBeaon_ClassChanged( entity player )
{
	clGlobal.levelEnt.Signal( "UpdateSurveyBeaconVisibility" )
}

void function OnViewPlayerChanged( entity viewPlayer )
{
	entity localClientPlayer = GetLocalClientPlayer()
	if ( GameMode_IsActive( eGameModes.SURVIVAL ) && localClientPlayer && localClientPlayer.GetTeam() == TEAM_SPECTATOR )
	{
		RuiSetBool( ClGameState_GetRui(), "hideDeathFieldWarning", ( localClientPlayer.GetObserverMode() == OBS_MODE_ROAMING ) )
	}
}















#if DEV
void function DEV_OnDummyCircleWpInstanced( entity wp )
{
	float startTime = wp.GetWaypointFloat( 0 )
	float endTime = wp.GetWaypointFloat( 1 )
	float endRadius = float( wp.GetWaypointInt( 0 ) )




}
#endif


int function SURVIVAL_GetCurrentDeathFieldStage()
{
	return GetGlobalNetInt( "currentDeathFieldStage" )
}


string function SURVIVAL_GetCurrentRoundString()
{
	int curStage = SURVIVAL_GetCurrentDeathFieldStage()

	
	
	if ( SURVIVAL_IsFinalDeathFieldStage() )
		return FINAL_ROUND_ALIAS_SUFFIX
	else
		return string( curStage + 1 )

	unreachable
}


bool function SURVIVAL_IsFinalDeathFieldStage()
{
	int curStage = SURVIVAL_GetCurrentDeathFieldStage()

	return (curStage >= file.deathFieldStageData.len() - 1)
}


void function AddCallback_OnSurvivalDeathFieldStageChanged( void functionref( int stage, float nextCircleStartTime ) callback )
{
	Assert( !file.onSurvivalDeathFieldStageChangedCallbacks.contains( callback ), "Tried to add a callback that was already added" )

	file.onSurvivalDeathFieldStageChangedCallbacks.append( callback )
}


void function RemoveCallback_OnSurvivalDeathFieldStageChanged( void functionref( int stage, float nextCircleStartTime ) callback )
{
	Assert( file.onSurvivalDeathFieldStageChangedCallbacks.contains( callback ), "Tried to remove a callback that was not added" )

	file.onSurvivalDeathFieldStageChangedCallbacks.fastremovebyvalue( callback )
}


bool function SURVIVAL_DeathFieldIsValid( int realm )
{
	if ( realm in file.deathField )
		return IsValid( file.deathField[ realm ] )

	return false
}










bool function HasDeathFieldImmunity( entity player )
{
	return player.GetPlayerNetBool( "hasDeathFieldImmunity" )
}










vector function Cl_SURVIVAL_GetDeathFieldCenter()
{
	if ( IsValid( file.deathField ) )
		return file.deathField.GetOrigin()
	else
		return <0, 0, 0>

	unreachable
}

vector function Cl_SURVIVAL_GetSafeZoneCenter()
{
	if ( IsValid( file.safeZone ) )
		return file.safeZone.GetOrigin()
	else
		return <0, 0, 0>

	unreachable
}




float function Cl_SURVIVAL_GetDeathFieldCurrentRadius()
{
		float startRadius = SURVIVAL_Deathfield_GetStartRadius()

		int i = SURVIVAL_GetCurrentDeathFieldStage()

		if ( i == -1 )
			return startRadius

		float startTime = GetGlobalNetTime( "nextCircleStartTime" ) + MARGIN_WAIT_TIME
		DeathFieldStageData data = file.deathFieldStageData[i]
		if ( i > 0 )
		{
			DeathFieldStageData prevData = file.deathFieldStageData[i - 1]
			startRadius = prevData.endRadius
		}

		float duration = data.shrinkDuration
		float endRadius = data.endRadius

		float frac = (Time() - startTime) / duration
		frac = clamp( frac, 0.0, 1.0 )
		return startRadius + ((endRadius - startRadius) * frac)
}



bool function Cl_SURVIVAL_PosInsideDeathField( vector position )
{
	int dIndex = GetLocalViewPlayer().DeathFieldIndex()
	bool isInside = DeathField_PointDistanceFromFrontier( position, dIndex ) > 0.0
	return isInside
}



bool function Cl_SURVIVAL_PosInSafeZone( vector position )
{
	int i = SURVIVAL_GetCurrentDeathFieldStage()

	if ( i == -1 )
		return true

	DeathFieldStageData data = file.deathFieldStageData[i]
	float endRadius = data.endRadius
	vector deathFieldCenter = Cl_SURVIVAL_GetSafeZoneCenter()

	float distanceFromCenter = Distance2D( position, deathFieldCenter )
	return distanceFromCenter < endRadius
}










































































































bool function HasActiveSurveyZone( entity player )
{
	if ( !IsValid( player ) )
		return false
	foreach ( surveyZone in file.surveyMinimapEnts )
	{
		entity owner = surveyZone.GetOwner()

		if ( IsValid(owner) && owner.GetTeam() == player.GetTeam() ) 
		{
			if ( !player.HasPassive( ePassives.PAS_PATHFINDER ) ) 
			{
				return true
			}
			if ( owner == player) 
			{
				return true
			}
		}
	}
	return false  
}

entity function GetActiveSurveyZone( entity player )
{
	if ( !IsValid( player ) )
		return null
	foreach ( surveyZone in file.surveyMinimapEnts )
	{
		entity owner = surveyZone.GetOwner()

		if ( IsValid(owner) && owner.GetTeam() == player.GetTeam() ) 
		{
			if ( owner == player)
			{
				return surveyZone
			}
		}
	}
	return null
}

bool function TeamHasActiveSurveyZone( int team )
{
	foreach ( surveyZone in file.surveyMinimapEnts )
	{
		entity owner = surveyZone.GetOwner()
		if ( IsValid( owner ) && owner.GetTeam() == team )
		{
			return true
		}
	}
	return false
}




































































void function TrackDeathfieldDistance( entity cockpit, entity player )
{
	thread TrackDeathfieldDistance_Internal( cockpit, player )
}


void function TrackDeathfieldDistance_Internal( entity cockpit, entity player )
{
	player.EndSignal( "OnDestroy" )
	cockpit.EndSignal( "OnDestroy" )

	bool wasShowingDeathFieldFx = false
	int screenFx

	OnThreadEnd(
		function() : ( screenFx, player )
		{
			
			ColorCorrection_SetWeight( file.colorCorrection, 0.0 )
			Chroma_EnteredRing()

			if ( EffectDoesExist( file.fieldEffectHandle ) )
			{
				EffectStop( file.fieldEffectHandle, true, false )
			}

			if ( file.trackingObserverDeathfield && player.GetTeam() == TEAM_SPECTATOR )
			{
				file.trackingObserverDeathfield = false
			}
		}
	)

	ColorCorrection_SetExclusive( file.colorCorrection, true )

	while ( true )
	{
		if ( player.GetTeam() == TEAM_SPECTATOR && player.GetObserverMode() != OBS_MODE_ROAMING )
			return 

		bool shouldShowDeathFieldFx = ShouldShowDeathFieldEffects( player ) 

		if ( wasShowingDeathFieldFx != shouldShowDeathFieldFx )
		{
			if ( shouldShowDeathFieldFx )
			{
				Callback_OnPlayerEnteredDeathfield( player )
				if ( !EffectDoesExist( screenFx ) && player.GetTeam() != TEAM_SPECTATOR && !IsObserverInPrivateGame() ) 
				{
					screenFx = StartParticleEffectOnEntity( cockpit, GetParticleSystemIndex( DEATHFIELD_EFFECT ), FX_PATTACH_ABSORIGIN_FOLLOW, ATTACHMENTID_INVALID )
					file.fieldEffectHandle = screenFx

					EffectSetIsWithCockpit( screenFx, true )
				}
				else if ( !EffectDoesExist( screenFx ) && IsObserverInPrivateGame() )
				{
					screenFx = StartParticleEffectOnEntity( cockpit, GetParticleSystemIndex( OBSERVER_DEATHFIELD_EFFECT ), FX_PATTACH_ABSORIGIN_FOLLOW, ATTACHMENTID_INVALID )
					file.fieldEffectHandle = screenFx

					EffectSetIsWithCockpit( screenFx, true )
				}

				ColorCorrection_SetWeight( file.colorCorrection, 1.0 )

				Chroma_LeftRing()
			}
			else
			{
				Callback_OnPlayerLeftDeathfield( player )

				if ( EffectDoesExist( screenFx ) )
				{
					EffectStop( screenFx, true, true )
				}

				ColorCorrection_SetWeight( file.colorCorrection, 0.0 )

				Chroma_EnteredRing()
			}
			wasShowingDeathFieldFx = shouldShowDeathFieldFx
		}

		WaitFrame()
	}
}


bool function ShouldShowDeathFieldEffects( entity player )
{
	bool shouldShow = true

	if ( player.GetTeam() != TEAM_SPECTATOR && !IsAlive( player ) )
		shouldShow = false

	if ( player.ContextAction_IsInVehicle() )
	{
		if ( DeathField_PointDistanceFromFrontier( player.EyePosition(), player.DeathFieldIndex() ) >= 0 )
			shouldShow = false






	}
	else
	{
		if ( DeathField_PointDistanceFromFrontier( player.GetOrigin(), player.DeathFieldIndex() ) >= 0 )
			shouldShow = false






	}


		if ( Deathfield_GetDoesDeathfieldStartEnabled() && player.GetPlayerNetBool( "playerInPlane" ) )
		{
			shouldShow = false
		}


	if ( IsViewingSquadSummary() || IsViewingDeathRecap() )
		shouldShow = false

	if ( StatusEffect_HasSeverity( player, eStatusEffect.ring_immunity ) )
		shouldShow = false

	
	if ( HasDeathFieldImmunity( player ) )
		shouldShow = false

	return shouldShow
}


void function Callback_OnPlayerEnteredDeathfield( entity player )
{
	
	printt( "Callback_OnPlayerEnteredDeathfield" )
}


void function Callback_OnPlayerLeftDeathfield( entity player )
{
	
	printt( "Callback_OnPlayerLeftDeathfield" )
}


void function Callback_OnPlayerTakeDeathFieldDamage( float damage, vector damageOrigin, int damageType, int damageSourceId, entity attacker )
{
	thread DisplayHolsterWeaponHint()
}


void function DisplayHolsterWeaponHint()
{
	const HINT_DURATION = 5.0
	const HINT_FADEOUT = 0.5
	const HINT_FIRST_DELAY = 3.0
	const HINT_INTERVAL_TIME = HINT_DURATION + 10.0

	if ( Time() - file.nextHolsterHintTime < HINT_INTERVAL_TIME )
		return

	entity viewPlayer   = GetLocalViewPlayer()
	entity activeWeapon = viewPlayer.GetActiveWeapon( eActiveInventorySlot.mainHand )
	if ( !IsValid( activeWeapon ) )
		return

	if ( activeWeapon.GetWeaponType() != WT_DEFAULT )
		return

	if ( activeWeapon == viewPlayer.GetNormalWeapon( WEAPON_INVENTORY_SLOT_PRIMARY_2 ) )
		return

	if ( DeathField_PointDistanceFromFrontier( viewPlayer.GetOrigin(), viewPlayer.DeathFieldIndex() ) > 0 )
		return

	if ( Bleedout_IsBleedingOut( viewPlayer ) )
		return

	if ( viewPlayer.GetPlayerNetBool( "isHealing" ) )
		return

	AddPlayerHint( HINT_DURATION, HINT_FADEOUT, $"", "#HINT_HOLSTER_WEAPON" )
	file.nextHolsterHintTime = Time() + HINT_INTERVAL_TIME
}













































































































































































































































entity function Cl_SURVIVAL_GetDeathField()
{
	return file.deathField
}

DeathFieldStageData function Cl_GetDeathFieldStage( int index )
{
	return file.deathFieldStageData[ index ]
}


int function Survival_GetNumDeathfieldStages()
{
	return file.deathFieldStageData.len()
}




























void function MinimapPackage_SurveyBeacon( entity ent, var rui )
{
	RuiSetImage( rui, "defaultIcon", $"rui/hud/gametype_icons/survival/survey_beacon_only_pathfinder" )
	RuiSetImage( rui, "clampedDefaultIcon", $"" )
	RuiSetBool( rui, "useTeamColor", false )
}

void function FullmapPackage_SurveyBeacon( entity ent, var rui )
{
	MinimapPackage_SurveyBeacon( ent, rui )
	RuiSetFloat2( rui, "iconScale", <1.5,1.5,0.0> )
	RuiSetFloat3( rui, "iconColor", <0.5,0.5,0.5> )
}

