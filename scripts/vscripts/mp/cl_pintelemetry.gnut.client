global function PIN_Init
global function PIN_Customization
global function PIN_UltimateReadyPing
global function PIN_DynamicDialogue
global function PIN_NET_TraceRouteResult






























































global enum ePINPromoMessageStatus
{
	CLICK,
	IMPRESSION,
	CONVERSION,
}

struct
{
	float startupTime


		entity networkWaypoint









} file

table function PIN_GetPIDM( entity player )
{
	table pidm = {}

	pidm.nucleus <- player.GetPINNucleusId()






		
		if ( PCPlat_IsSteam() )
		{
			pidm.steamuid_hash <- player.GetPINPlatformId()
		}




	return pidm
}

table function PIN_StandardHeader()
{
	entity player = GetLocalClientPlayer()

	return {
		pid				= player.GetPINNucleusPid()
		pidm			= PIN_GetPIDM( player ),
		pidt			= "persona",
		game_type		= "online",
		mode_type		= "multiplayer",

			game_mode	= GAMETYPE,
			map			= GetMapName(),

		plat			= player.GetPlayerPINPlatformName(),
		title_id		= player.GetPlayerPINTitleId(),
		sid				= PIN_GetSessionId(),
	}
}


void function PIN_Init()
{



	file.startupTime = Time()












		Waypoints_RegisterCustomType( "PIN", OnPINWaypointCreated )

}



































































































































































































































































































































































































void function PIN_Customization( ItemFlavor ornull context, ItemFlavor itemFlavor, string customizeAction, int index = 0 )
{
	string customizeTarget
	string customizeType
	string customizeClass = "NULL"

	string selection1 = "NULL"
	string selection1_rarity = "NULL"
	string selection2 = "NULL"
	string selection2_rarity = "NULL"
	string selection3 = "NULL"
	string selection3_rarity = "NULL"
	string selection4 = "NULL"
	string selection4_rarity = "NULL"
	string selection5 = "NULL"
	string selection5_rarity = "NULL"
	string selection6 = "NULL"
	string selection6_rarity = "NULL"
	string selection7 = "NULL"
	string selection7_rarity = "NULL"
	string selection8 = "NULL"
	string selection8_rarity = "NULL"

	string customizeQuality = ItemFlavor_HasQuality( itemFlavor  ) ? GetPINRarity( ItemFlavor_GetQuality( itemFlavor ) + 1 ) : GetPINRarity( eRarityTier.COMMON )

	int indexToUse = index

	switch ( ItemFlavor_GetType( itemFlavor ) )
	{
		case eItemType.weapon_skin:
			customizeTarget = "weapon"
			customizeType = "skin"
			break

		case eItemType.weapon_charm:
			customizeTarget = "weapon"
			customizeType = "weapon_charm"
			break

		case eItemType.gladiator_card_stat_tracker:
			customizeType = customizeType == "" ? "stat_tracker" : customizeType
		case eItemType.gladiator_card_badge:
			customizeType = customizeType == "" ? "badge" : customizeType
		case eItemType.gladiator_card_stance:
			customizeType = customizeType == "" ? "pose" : customizeType
		case eItemType.gladiator_card_frame:
			customizeType = customizeType == "" ? "frame" : customizeType
		case eItemType.gladiator_card_kill_quip:
			customizeType = customizeType == "" ? "kill_quip" : customizeType
		case eItemType.gladiator_card_intro_quip:
			customizeType = customizeType == "" ? "intro_quip" : customizeType
			customizeTarget = "gladiator_card"
			if ( context != null )
				customizeClass = ItemFlavor_GetHumanReadableRefForPIN_Slow( expect ItemFlavor( context ) )
			break

		case eItemType.emote_icon:
			customizeType = "holospray"
			customizeTarget = "character"
			if ( context != null )
				customizeClass = ItemFlavor_GetHumanReadableRefForPIN_Slow( expect ItemFlavor( context ) )
			break

		case eItemType.character_skin:
			customizeType = customizeType == "" ? "skin" : customizeType
		case eItemType.character_execution:
			customizeType = customizeType == "" ? "finisher" : customizeType
		case eItemType.melee_skin:
			customizeType = customizeType == "" ? "melee" : customizeType
			customizeTarget = "character"
			if ( context != null )
				customizeClass = ItemFlavor_GetHumanReadableRefForPIN_Slow( expect ItemFlavor( context ) )
			break








	}

	if ( indexToUse <= 0 )
	{
		selection1 = ItemFlavor_GetHumanReadableRefForPIN_Slow( itemFlavor ).tolower()
		selection1_rarity = customizeQuality.tolower()
	}
	else if ( indexToUse == 1 )
	{
		selection2 = ItemFlavor_GetHumanReadableRefForPIN_Slow( itemFlavor ).tolower()
		selection2_rarity = customizeQuality.tolower()
	}
	else if ( indexToUse == 2 )
	{
		selection3 = ItemFlavor_GetHumanReadableRefForPIN_Slow( itemFlavor ).tolower()
		selection3_rarity = customizeQuality.tolower()
	}
	else if ( indexToUse == 3 )
	{
		selection4 = ItemFlavor_GetHumanReadableRefForPIN_Slow( itemFlavor ).tolower()
		selection4_rarity = customizeQuality.tolower()
	}
	else if ( indexToUse == 4 )
	{
		selection5 = ItemFlavor_GetHumanReadableRefForPIN_Slow( itemFlavor ).tolower()
		selection5_rarity = customizeQuality.tolower()
	}
	else if ( indexToUse == 5 )
	{
		selection6 = ItemFlavor_GetHumanReadableRefForPIN_Slow( itemFlavor ).tolower()
		selection6_rarity = customizeQuality.tolower()
	}
	else if ( indexToUse == 6 )
	{
		selection7 = ItemFlavor_GetHumanReadableRefForPIN_Slow( itemFlavor ).tolower()
		selection7_rarity = customizeQuality.tolower()
	}
	else if ( indexToUse == 7 )
	{
		selection8 = ItemFlavor_GetHumanReadableRefForPIN_Slow( itemFlavor ).tolower()
		selection8_rarity = customizeQuality.tolower()
	}

	AddPINTelemetryEvent( "customization",
		PIN_StandardHeader(),
		{
			selection =
			{
				selection1 = selection1
				selection1_rarity = selection1_rarity
				selection2 = selection2
				selection2_rarity = selection2_rarity
				selection3 = selection3
				selection3_rarity = selection3_rarity
				selection4 = selection4
				selection4_rarity = selection4_rarity
				selection5 = selection5
				selection5_rarity = selection5_rarity
				selection6 = selection6
				selection6_rarity = selection6_rarity
				selection7 = selection7
				selection7_rarity = selection7_rarity
				selection8 = selection8
				selection8_rarity = selection8_rarity
				s_class = customizeClass
			},
			target  = customizeTarget,
			type    = customizeType,
			action  = customizeAction,
		}
	)
}


string function GetPINRarity( int tier )
{
	switch ( tier )
			{
		case 0:
		case 1:
			return "common"

		case 2:
			return "rare"

		case 3:
			return "epic"

		case 4:
			return "legendary"

		case 5:
			return "heirloom"

		case 6:
			return "iconic"

		default:
			Assert( false, "Unhandled loot rarity " + tier )
			return "unknown_" + tier
		}

	unreachable
}


void function OnPINWaypointCreated( entity wp )
{
	file.networkWaypoint = wp

	RunUIScript( "UpdateMatchPINData", "mid", wp.GetWaypointString( 0 ) )
	RunUIScript( "UpdateMatchPINData", "map", GetMapName() )
	RunUIScript( "UpdateMatchPINData", "match_type", GetCurrentPlaylistVarString( "pin_match_type", "survival" ) )
}





























































































































































































































































































void function PIN_UltimateReadyPing( entity player, string pingType, bool isUltinInventory )
{
	AddPINTelemetryEvent( "tag",
		PIN_StandardHeader(),
		{
			tag_type = pingType,
			ult_inv = isUltinInventory,
		}
	)
}

void function PIN_DynamicDialogue( string alias )
{
	AddPINTelemetryEvent( "tag",
		PIN_StandardHeader(),
		{
			tag_type = alias,
		}
	)
}

void function PIN_NET_TraceRouteResult(entity player, table result)
{
	AddPINTelemetryEvent("trace_route_result", PIN_StandardHeader(), result)
}
















































































































































































































































































































































































































