


global function ShMusic_LevelInit



global function Loadout_MusicPack
global function MusicPack_GetSortOrdinal

global function MusicPack_GetPreviewMusic



global function GetMusicPackForPlayer
global function GetMusicPackDefaultIsSelectedLoadout
global function WaitForMusicPackForPlayer


global function MusicPack_GetMainMenuToLobbyMusic
global function MusicPack_GetLobbyMusic
global function MusicPack_GetLobbyIntoCharacterSelectMusic
global function MusicPack_GetCharacterSelectMusic_Squad
global function MusicPack_GetCharacterSelectMusic_Duo
global function MusicPack_GetCharacterSelectMusic_Solo
global function MusicPack_GetCharacterSelectMusic_Quad
global function MusicPack_GetSkydiveMusic
global function MusicPack_GetWinMusic
global function MusicPack_GetLossMusic
global function MusicPack_GetFiringRangeMusic

global function MusicPack_IsCharacterBased
global function MusicPack_GetCharacter
global function MusicPack_GetPortraitImage
global function MusicPack_GetPortraitBlend










global function ServerCallback_PlayMatchEndMusic






























global const string LOOT_CEREMONY_MUSIC_P1 = "Music_LootCeremony_Pt1"
global const string LOOT_CEREMONY_MUSIC_P2 = "Music_LootCeremony_Pt2"

global array<string> WORKAROUND_UI_MUSIC_SOUND_LIST = [
	"Music_FrontEnd",
	"mainmenu_music_Event1", "Music_Lobby_Event1", 
	
	"SQ_Music_Lobby_Silence"
	LOOT_CEREMONY_MUSIC_P1,
	LOOT_CEREMONY_MUSIC_P2
]

struct FileStruct_LifetimeLevel
{
	LoadoutEntry&          musicPackSelectionSlot
	table<ItemFlavor, int> musicPackFlavorSortOrdinalMap




}
FileStruct_LifetimeLevel& fileLevel












void function ShMusic_LevelInit()
{
	FileStruct_LifetimeLevel newFileGame
	fileLevel = newFileGame

	AddCallback_RegisterRootItemFlavors( OnRegisterRootItemFlavors )




}



void function OnRegisterRootItemFlavors()
{
	array<ItemFlavor> musicPackList = []
	foreach ( asset musicPackAsset in GetBaseItemFlavorsFromArray( "musicPacks" ) )
	{
		if ( musicPackAsset == $"" )
			continue

		ItemFlavor ornull musicPack = RegisterItemFlavorFromSettingsAsset( musicPackAsset )
		if ( musicPack == null )
			continue

		expect ItemFlavor( musicPack )
		musicPackList.append( musicPack )


			array<string> verificationFields = [
				
				
				
				"musicLobby",
				
				"musicCharacterSelect",
				"musicSkydive",
				"musicWin",
				"musicLoss",
			]

			foreach( string field in verificationFields )
			{
				string alias = GetGlobalSettingsString( musicPackAsset, field )
				if ( !DoesAliasExist( alias ) )
					Warning( "Music Pack Asset '%s' has invalid '%s' miles event '%s'", string(ItemFlavor_GetAsset( musicPack )), field, alias )
			}

	}

	foreach ( musicPack in musicPackList )
	{
		string alias1 = MusicPack_GetMainMenuToLobbyMusic( musicPack )
		if ( !WORKAROUND_UI_MUSIC_SOUND_LIST.contains( alias1 ) )
			WORKAROUND_UI_MUSIC_SOUND_LIST.append( alias1 )

		string alias2 = MusicPack_GetLobbyMusic( musicPack )
		if ( !WORKAROUND_UI_MUSIC_SOUND_LIST.contains( alias2 ) )
			WORKAROUND_UI_MUSIC_SOUND_LIST.append( alias2 )
	}

	MakeItemFlavorSet( musicPackList, fileLevel.musicPackFlavorSortOrdinalMap, true )

	LoadoutEntry entry = RegisterLoadoutSlot( eLoadoutEntryType.ITEM_FLAVOR, "music_pack_selection", eLoadoutEntryClass.ACCOUNT )
	entry.networkTo = eLoadoutNetworking.PLAYER_EXCLUSIVE
#if DEV
		entry.DEV_name       = "Music Pack"
#endif
	fileLevel.musicPackSelectionSlot = entry
	entry.validItemFlavorList = musicPackList
	entry.defaultItemFlavor = musicPackList[1]
	entry.favoriteItemFlavor = musicPackList[0]
	entry.maxFavoriteCount = 8










}




ItemFlavor function GetMusicPackForPlayer( entity player )
{
	LoadoutEntry entry = Loadout_MusicPack()
	if ( !LoadoutSlot_IsReady( ToEHI( player ), entry ) )
		return GetDefaultItemFlavorForLoadoutSlot( EHI_null, entry )

	ItemFlavor flav = LoadoutSlot_GetItemFlavor( ToEHI( player ), entry )


		if ( !IsLobby() && ItemFlavor_IsTheRandom( flav ) )
		{
			int guid = player.GetNonRewindMusicPack()
			if ( guid != 0 )
				flav = GetItemFlavorByGUID( guid )
		}

		asset customPack = GetCurrentPlaylistVarAsset( "force_custom_musicpack" )
		if ( customPack != $"" )
		{
			printf( "%s() - Playlist forcing music pack to: '%s'", FUNC_NAME(), string( customPack ) )
			flav = GetItemFlavorByAsset( customPack )
		}




	return flav
}

bool function GetMusicPackDefaultIsSelectedLoadout( entity player )
{
	LoadoutEntry entry = Loadout_MusicPack()
	if ( !LoadoutSlot_IsReady( ToEHI( player ), entry ) )
		return true

	ItemFlavor flav = LoadoutSlot_GetItemFlavor( ToEHI( player ), entry )
	if ( ItemFlavor_IsTheDefault( flav ) )
		return true

	return false
}




ItemFlavor function WaitForMusicPackForPlayer( entity player )
{
	return LoadoutSlot_WaitForItemFlavor( ToEHI( player ), Loadout_MusicPack() )
}




LoadoutEntry function Loadout_MusicPack()
{
	return fileLevel.musicPackSelectionSlot
}




int function MusicPack_GetSortOrdinal( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )

	return fileLevel.musicPackFlavorSortOrdinalMap[flavor]
}




string function MusicPack_GetPreviewMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicPreview" )
}












string function MusicPack_GetMainMenuToLobbyMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicMainMenuToLobby" )
}




string function MusicPack_GetLobbyMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicLobby" )
}

string function MusicPack_GetFiringRangeMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicFiringRange" )
}




string function MusicPack_GetLobbyIntoCharacterSelectMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicLobbyToCharacterSelect" )
}




string function MusicPack_GetCharacterSelectMusic_Squad( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicCharacterSelect" )
}




string function MusicPack_GetCharacterSelectMusic_Duo( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicCharacterSelectDuo" )
}




string function MusicPack_GetCharacterSelectMusic_Solo( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicCharacterSelectSolo" )
}



string function MusicPack_GetCharacterSelectMusic_Quad( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicCharacterSelectQuad" )
}




string function MusicPack_GetSkydiveMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicSkydive" )
}




string function MusicPack_GetWinMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicWin" )
}




string function MusicPack_GetLossMusic( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "musicLoss" )
}




bool function MusicPack_IsCharacterBased( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsBool( ItemFlavor_GetAsset( flavor ), "isCharacterBased" )
}




ItemFlavor function MusicPack_GetCharacter( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	Assert( MusicPack_IsCharacterBased( flavor ) )

	asset characterAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "character" )
	Assert( characterAsset != $"" && IsValidItemFlavorSettingsAsset( characterAsset ) )

	return GetItemFlavorByAsset( characterAsset )
}




asset function MusicPack_GetPortraitImage( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )

	if ( MusicPack_IsCharacterBased( flavor ) )
		return CharacterClass_GetGalleryPortrait( MusicPack_GetCharacter( flavor ) )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "portraitImage" )
}




float function MusicPack_GetPortraitBlend( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.music_pack )
	return GetGlobalSettingsFloat( ItemFlavor_GetAsset( flavor ), "portraitBlend" )
}







































































void function ServerCallback_PlayMatchEndMusic()
{
	
	

	entity clientPlayer = GetLocalClientPlayer()
	if ( clientPlayer.GetTeam() == GetWinningTeam() && GetWinningTeam() >= TEAM_MULTITEAM_FIRST )
	{
		EmitUIMusic( MusicPack_GetWinMusic( GetMusicPackForPlayer( clientPlayer ) ) )
	}
	else
	{
		StopUISoundByName( MusicPack_GetLossMusic( GetMusicPackForPlayer( clientPlayer ) ) )
		EmitUIMusic( MusicPack_GetLossMusic( GetMusicPackForPlayer( clientPlayer ) ) )
	}
}
























ItemFlavor function __GetMusicPackForPlayer_RollTheRandom( entity player )
{
	ItemFlavor music = WaitForMusicPackForPlayer( player )

	if ( GRX_IsInventoryReady( player ) && ItemFlavor_IsTheRandom( music ) )
	{
		LoadoutEntry musicSlot  = Loadout_MusicPack()
		array<ItemFlavor> items = clone GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), musicSlot )

		foreach ( item in clone items )
		{
			if (
				( ItemFlavor_GetGRXMode( item ) != GRX_ITEMFLAVORMODE_NONE && !GRX_IsItemOwnedByPlayer( item, player ) )
				|| ItemFlavor_IsTheRandom( item )
				)
				items.fastremovebyvalue( item )
		}

		if ( items.len() > 0 )
		{
			music = items.getrandom()
		}
	}

	return music
}























































































































































































