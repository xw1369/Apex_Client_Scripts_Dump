







global function AllianceProximity_Init
global function AllianceProximity_IsUsingAlliances 
global function AllianceProximity_IsUsingAllianceProximity 
global function AllianceProximity_IsUsingAllianceProximityDistanceChecks 
global function AllianceProximity_GetMaxDistForProximity 
global function AllianceProximity_GetMaxNumAlliances 
global function AllianceProximity_GetMaxNumPlayersPerAlliance 
global function AllianceProximity_GetAllianceFromTeam 
global function AllianceProximity_GetTeamsInAlliance 
global function AllianceProximity_GetRepresentativeTeamForAlliance 
global function AllianceProximity_GetTeamsInSameAllianceAsTeam 
global function AllianceProximity_IsTeamInAnAlliance 
global function AllianceProximity_GetOtherAlliances 
global function AllianceProximity_GetOtherAlliance 
global function AllianceProximity_GetAllAlliances 
global function AllianceProximity_GetAllTeamsOrAlliances 
global function AllianceProximity_GetAllTeamsInAlliances 
global function AllianceProximity_RegisterNonPlayerTeamToAlliances 
global function AddCallback_AllianceProximity_OnTeamPutIntoAlliance 


global function AllianceProximity_ShouldTryToTransmitPingOrIconToAlliance 
global function AllianceProximity_ShouldOnlyDisplayPriorityPingsForAlliance 
global function AllianceProximity_SetPriorityPingsForAlliance 
global function AllianceProximity_GetOriginalPlayerTeam_FromPlayerEHI 
global function AllianceProximity_GetLivingAllianceMembersInProximity 
global function AllianceProximity_GetLivingPlayerTeamsInAlliance 
global function AllianceProximity_GetNumPlayersInAlliance 
global function AllianceProximity_GetAllPlayersInAlliance 
global function AllianceProximity_GetGroupsOfAllAlliancePlayers 
global function AllianceProximity_GetAllPlayersInOtherAlliances 
global function AllianceProximity_GetPlayersInSameAllianceAsTeam 
global function AllianceProximity_GetLivingPlayerTeamsInSameAllianceAsTeam 
global function AllianceProximity_GetPopulatedTeamsInAlliance 
global function AllianceProximity_GetAllianceScoreDifference 













global function AllianceProximity_ManageIconVisibility_Thread
global function AllianceProximity_GetUIAllianceFromTeam
global function AllianceProximity_GetAllianceFromTeamWithObserverCorrection
global function AllianceProximity_GetUIAlliance
global function AllianceProximity_ServerCallback_SetTeamToAllianceOnClient
global function AllianceProximity_MuteAllianceOnMatchEndReassignment









global function AllianceProximity_GetAllianceColor
global function AllianceProximity_GetAllianceColorFromTeam


struct {
	array < int > allAlliances
	array < int > allAllianceTeams

	table< int, int > teamToAllianceTable
	table< int, array< int > > allianceToTeamsTable
	array<void functionref( int, int )> callbacks_AllianceProximity_OnTeamPutIntoAlliance


		table< EHI, int > playerEHIToOriginalTeamTable 
		bool isMinimapDisabled
		array < int > priorityPingTypes













} file


void function AllianceProximity_Init()
{
#if DEV
		printt( "ALLIANCE PROXIMITY: Running ", FUNC_NAME() )
#endif

#if DEV
		Assert( AllianceProximity_GetMaxNumAlliances() <= 0 || AllianceProximity_GetMaxNumAlliances() <= GetCurrentPlaylistVarInt( "max_teams", 0 ), "ALLIANCE PROXIMITY: Trying to use Alliances but have set more alliances ( " + AllianceProximity_GetMaxNumAlliances() + " ) than squads ( " + GetCurrentPlaylistVarInt( "max_teams", 0 ) + " )" )
#endif

	
	if ( !AllianceProximity_IsUsingAlliances() )
		return

	
	
	
	
	
	
	
	

	Remote_RegisterClientFunction( "AllianceProximity_ServerCallback_SetTeamToAllianceOnClient", "int", TEAM_MULTITEAM_FIRST, TEAM_MULTITEAM_LAST, "int", ALLIANCE_NONE, AllianceProximity_GetMaxNumAlliances() + 1 )
	Remote_RegisterClientFunction( "AllianceProximity_MuteAllianceOnMatchEndReassignment" )

	file.allAllianceTeams = GetAllTeams() 

	
	AllianceProximity_SetTeamsToAlliances()

	
	






		AddCreateCallback( "player", AllianceProximity_OnPlayerCreated )



		file.isMinimapDisabled = MiniMapIsDisabled()

}




void function AddCallback_AllianceProximity_OnTeamPutIntoAlliance( void functionref( int, int ) func )
{
	Assert( !file.callbacks_AllianceProximity_OnTeamPutIntoAlliance.contains( func ) )
	file.callbacks_AllianceProximity_OnTeamPutIntoAlliance.append( func )
}



bool function AllianceProximity_IsUsingAlliances()
{
	return AllianceProximity_GetMaxNumAlliances() > 0 && !IsLobby()
}



bool function AllianceProximity_IsUsingAllianceProximity()
{
	return GetCurrentPlaylistVarBool( "use_proximity_alliance_members", false )
}



bool function AllianceProximity_IsUsingAllianceProximityDistanceChecks()
{
	return AllianceProximity_GetMaxDistForProximity() > 0.0 && AllianceProximity_IsUsingAllianceProximity()
}



bool function AllianceProximity_ShouldOnlyDisplayPriorityPingsForAlliance()
{
	return GetCurrentPlaylistVarBool( "use_proximity_alliance_priority_pings", false )
}




void function AllianceProximity_SetPriorityPingsForAlliance( array < int > priorityPingTypes )
{
	Assert( AllianceProximity_ShouldOnlyDisplayPriorityPingsForAlliance(), "ALLIANCE PROXIMITY: Setting priority pings using " + FUNC_NAME() + " for a mode that doesn't have priority pings enabled." )


#if DEV
		if ( file.priorityPingTypes.len() > 0 )
			Warning( "ALLIANCE PROXIMITY: Setting priority pings for alliance when we already have defined priority pings, the old pings will be overridden" )
#endif


	file.priorityPingTypes = priorityPingTypes
}




bool function AllianceProximity_ShouldTryToTransmitPingOrIconToAlliance( bool isPing, int pingType = -1 )
{
	
	if ( !AllianceProximity_IsUsingAllianceProximity() )
		return false

#if DEV
		if ( AllianceProximity_ShouldOnlyDisplayPriorityPingsForAlliance() && file.priorityPingTypes.len() < 1 )
			Warning( "ALLIANCE PROXIMITY: AllianceProximity_ShouldOnlyDisplayPriorityPingsForAlliance is set to true but there are no priority pings defined, use AllianceProximity_SetPriorityPingsForAlliance to set them" )
#endif

	
	if ( AllianceProximity_ShouldOnlyDisplayPriorityPingsForAlliance() && ( !isPing || pingType == -1 || !file.priorityPingTypes.contains( pingType ) ) )
		return false

	return true
}



bool function AllianceProximity_IsTeamInAnAlliance( int team )
{
	return team in file.teamToAllianceTable
}


bool function AllianceProximity_ShouldAllTeamsStartOnTheSameAlliance()
{
	return GetCurrentPlaylistVarBool( "start_with_teams_on_same_alliance", false )
}


int function AllianceProximity_GetMaxNumAlliances()
{
	return GetCurrentPlaylistVarInt( "max_alliances", 0 )
}


int function AllianceProximity_GetMaxNumPlayersPerAlliance()
{
	int maxPlayers = GetCurrentPlaylistVarInt( "max_players", 0 )

	if ( maxPlayers <= 0 )
		return 0




		bool tooEarlyToCheckMaxNumAlliances = !Flag( "EntitiesDidLoad" ) || GetGameState() < eGameState.Playing


	if ( tooEarlyToCheckMaxNumAlliances && AllianceProximity_ShouldAllTeamsStartOnTheSameAlliance() )
		return maxPlayers

	return maxPlayers / AllianceProximity_GetMaxNumAlliances()
}











void function AllianceProximity_RegisterNonPlayerTeamToAlliances( int team )
{
	if ( !AllianceProximity_GetAllTeamsInAlliances( false ).contains( team ) )
	{
#if DEV
			printt( "ALLIANCE PROXIMITY: ", FUNC_NAME(), " adding team: ", team, " to file.allAllianceTeams and putting them on alliance: ", ALLIANCE_A )
#endif
		file.allAllianceTeams.append( team )
		
		AllianceProximity_SetTeamToAlliance_Internal( team, ALLIANCE_A )
	}
}


vector function AllianceProximity_GetAllianceColor( int alliance )
{
	switch( alliance )
	{
		case ALLIANCE_A:	return GetKeyColor( COLORID_CONTROL_FRIENDLY ) / 255.0
		case ALLIANCE_B:	return GetKeyColor( COLORID_CONTROL_ENEMY ) / 255.0
		default:
			return <0.0, 0.0, 0.0>
	}

	unreachable
}
vector function AllianceProximity_GetAllianceColorFromTeam( int team )
{
	int alliance = AllianceProximity_GetAllianceFromTeam( team )
	return AllianceProximity_GetAllianceColor( alliance )
}



int function AllianceProximity_GetAllianceFromTeam( int team )
{
	if ( team < TEAM_MULTITEAM_FIRST )
		return ALLIANCE_NONE

#if DEV
		string teamInAlliances
		foreach( registeredTeam in file.allAllianceTeams )
			teamInAlliances += registeredTeam + " "
		Assert( AllianceProximity_IsTeamInAnAlliance( team ), "ALLIANCE PROXIMITY: Attempted to get an Alliance from a Team that isn't in the teamToAllianceTable, probably didn't run the AllianceProximity_SetTeamsToAlliances function first.\nAlliances ON = " + AllianceProximity_IsUsingAlliances() + "\nTeam = " + team + "\nTeamsInAlliance = " + teamInAlliances )
#endif

	return file.teamToAllianceTable[ team ]
}


int function AllianceProximity_GetAllianceFromTeamWithObserverCorrection( int team )
{
	entity localPlayer = GetLocalClientPlayer()
	bool isObserver = false

	if( IsValid( localPlayer ) )
	{
		isObserver = localPlayer.GetTeam() == TEAM_SPECTATOR || localPlayer.GetTeam() == TEAM_UNASSIGNED
	}

	return ( isObserver )? 0: AllianceProximity_GetAllianceFromTeam( localPlayer.GetTeam() )

}



int function AllianceProximity_GetUIAllianceFromTeam( int team )
{
	int alliance = AllianceProximity_GetAllianceFromTeam( team )
	return AllianceProximity_GetUIAlliance( alliance )
}



int function AllianceProximity_GetUIAlliance( int alliance )
{
	entity localPlayer = GetLocalViewPlayer()
	if( !IsValid( localPlayer ) )
		return alliance

	int localTeam = localPlayer.GetTeam()
	if( localTeam == TEAM_SPECTATOR )
		return alliance

	int localAlliance = AllianceProximity_GetAllianceFromTeam( localTeam )
	int uiAlliance = alliance == localAlliance ? 0 : alliance == 0 ? localAlliance : alliance
	return uiAlliance
}



array< int > function AllianceProximity_GetOtherAlliances( int alliance )
{
	array< int > otherAlliances = []

	foreach( key, value in file.allianceToTeamsTable )
	{
		if ( key != alliance )
			otherAlliances.append( key )
	}

	return otherAlliances
}


array < int > function AllianceProximity_GetAllAlliances()
{
	array< int > resultArray = clone file.allAlliances
	return resultArray
}

array < int > function AllianceProximity_GetAllTeamsOrAlliances()
{
	if ( AllianceProximity_IsUsingAlliances() )
		return AllianceProximity_GetAllAlliances()

	return GetAllTeams()
}


array < int > function AllianceProximity_GetAllTeamsInAlliances( bool playerTeamsOnly )
{
	if ( playerTeamsOnly )
		return GetAllTeams()

	
	return clone file.allAllianceTeams
}


int function AllianceProximity_GetOtherAlliance( int alliance )
{
	Assert( AllianceProximity_GetMaxNumAlliances() == 2, "ALLIANCE PROXIMITY: Running " + FUNC_NAME() + " in a mode with maxAlliances not equal to 2, you probably want to use AllianceProximity_GetOtherAlliances" )
	return alliance == ALLIANCE_A ? ALLIANCE_B : ALLIANCE_A
}



int function AllianceProximity_GetOriginalPlayerTeam_FromPlayerEHI( EHI playerEHI )
{
#if DEV
		Assert(  EHIHasValidScriptStruct( playerEHI ), "ALLIANCE PROXIMITY: Attempted to run " + FUNC_NAME() + " on an Invalid playerEHI" )
#endif

	int team = EHI_GetTeam( playerEHI )

	if ( playerEHI in file.playerEHIToOriginalTeamTable )
	{
		team = file.playerEHIToOriginalTeamTable[ playerEHI ]
	}

	return team
}















float function AllianceProximity_GetMaxDistForProximity()
{
	return GetCurrentPlaylistVarFloat( "max_dist_proximity_alliance_members", 0.0 )
}




array<entity> function AllianceProximity_GetLivingAllianceMembersInProximity( int team, vector origin )
{
	array<entity> allianceMembersInProximity = []
	array<entity> livingAlliancePlayers = AllianceProximity_GetPlayersInSameAllianceAsTeam( team, true )

	
	if ( AllianceProximity_IsUsingAllianceProximityDistanceChecks() )
	{
		foreach ( playerAlive in livingAlliancePlayers )
		{
			if ( IsPositionWithinRadius( AllianceProximity_GetMaxDistForProximity(), origin, playerAlive.GetOrigin() ) )
				allianceMembersInProximity.append( playerAlive )
		}
	}
	else 
	{
		allianceMembersInProximity = livingAlliancePlayers
	}

	return allianceMembersInProximity
}





array<entity> function AllianceProximity_GetAllPlayersInAlliance( int alliance, bool shouldReturnOnlyLivingPlayers )
{
	array<entity> allianceMembers = []
	array<entity> players = []

	if ( shouldReturnOnlyLivingPlayers )
	{
		players = GetPlayerArray_AliveConnected()
	}
	else
	{
		players = GetPlayerArray()
	}


	foreach ( playerEnt in players )
	{
		if ( IsValid( playerEnt ) )
		{
			int playerEntAlliance = AllianceProximity_GetAllianceFromTeam( playerEnt.GetTeam() )
			if ( playerEntAlliance == alliance )
				allianceMembers.append( playerEnt )
		}
	}

	return allianceMembers
}





array< array< entity > > function AllianceProximity_GetGroupsOfAllAlliancePlayers( int alliance, int numGroups, bool shouldReturnOnlyLivingPlayers )
{
	array<entity> players = []

	if ( shouldReturnOnlyLivingPlayers )
	{
		players = GetPlayerArray_AliveConnected()
	}
	else
	{
		players = GetPlayerArray()
	}

	table< int, array< entity > > teamInAllianceToPlayersMap

	foreach ( playerEnt in players )
	{
		if ( IsValid( playerEnt ) )
		{
			int team = playerEnt.GetTeam()
			int playerEntAlliance = AllianceProximity_GetAllianceFromTeam( team )
			if ( playerEntAlliance == alliance && team in teamInAllianceToPlayersMap )
			{
				teamInAllianceToPlayersMap[ team ].append( playerEnt )
			}
			else if ( playerEntAlliance == alliance )
			{
				teamInAllianceToPlayersMap[ team ] <- [ playerEnt ]
			}
		}
	}

	array< array< entity > > groupsOfAllianceTeams
	for ( int i = 0; i < numGroups; i++ )
	{
		groupsOfAllianceTeams.append( [] )
	}

	int groupIdx = 0
	foreach( team, teamPlayers in teamInAllianceToPlayersMap )
	{
		groupsOfAllianceTeams[ groupIdx % numGroups ].extend( teamPlayers )
		groupIdx++
	}

	return groupsOfAllianceTeams
}





int function AllianceProximity_GetNumPlayersInAlliance( int alliance, bool shouldOnlyCountLivingPlayers )
{
	return AllianceProximity_GetAllPlayersInAlliance( alliance, shouldOnlyCountLivingPlayers ).len()
}





array<entity> function AllianceProximity_GetAllPlayersInOtherAlliances( int alliance, bool shouldReturnOnlyLivingPlayers )
{
	array <entity> otherAlliancePlayers = []
	array<entity> players = []

	if ( shouldReturnOnlyLivingPlayers )
	{
		players = GetPlayerArray_AliveConnected()
	}
	else
	{
		players = GetPlayerArray()
	}

	foreach ( playerEnt in players )
	{
		if ( IsValid( playerEnt ) )
		{
			int playerEntAlliance = AllianceProximity_GetAllianceFromTeam( playerEnt.GetTeam() )
			if ( playerEntAlliance != alliance )
				otherAlliancePlayers.append( playerEnt )
		}
	}

	return otherAlliancePlayers
}






array<entity> function AllianceProximity_GetPlayersInSameAllianceAsTeam( int playerTeam, bool shouldReturnOnlyLivingPlayers )
{
	int alliance = AllianceProximity_GetAllianceFromTeam( playerTeam )
	array<entity> allianceMembers = AllianceProximity_GetAllPlayersInAlliance( alliance, shouldReturnOnlyLivingPlayers )
	array<entity> playersInSameAllianceAsTeam = allianceMembers

	foreach ( playerEnt in allianceMembers )
	{
		int playerEntTeam = playerEnt.GetTeam()
		if ( playerEntTeam == playerTeam )
			playersInSameAllianceAsTeam.fastremovebyvalue( playerEnt )
	}

	return playersInSameAllianceAsTeam
}



array<int> function AllianceProximity_GetTeamsInSameAllianceAsTeam( int playerTeam )
{
	int alliance = AllianceProximity_GetAllianceFromTeam( playerTeam )
	array<int> uniqueAllianceTeams = AllianceProximity_GetTeamsInAlliance( alliance )
	array<int> teamsInSameAllianceAsTeam = []

	foreach ( team in uniqueAllianceTeams )
	{
		if ( team != playerTeam )
			teamsInSameAllianceAsTeam.append( team )
	}

	return teamsInSameAllianceAsTeam
}



array<int> function AllianceProximity_GetLivingPlayerTeamsInSameAllianceAsTeam( int playerTeam )
{
	int alliance = AllianceProximity_GetAllianceFromTeam( playerTeam )
	array<int> uniqueAllianceTeams = AllianceProximity_GetLivingPlayerTeamsInAlliance( alliance )
	array<int> teamsInSameAllianceAsTeam = []

	foreach ( team in uniqueAllianceTeams )
	{
		if ( team != playerTeam )
			teamsInSameAllianceAsTeam.append( team )
	}

	return teamsInSameAllianceAsTeam
}



array< int > function AllianceProximity_GetTeamsInAlliance( int alliance )
{
#if DEV
		string alliancesWithTeams
		foreach( tableAlliance, team in file.allianceToTeamsTable )
			alliancesWithTeams += tableAlliance + " "
		Assert( alliance in file.allianceToTeamsTable , "ALLIANCE PROXIMITY: " + FUNC_NAME() + " attempted to get an Alliance that isn't in the allianceToTeamsTable, probably didn't run the AllianceProximity_SetTeamsToAlliances function first.\nAlliances ON = " + AllianceProximity_IsUsingAlliances() + "\nAlliance = " + alliance + "\nAlliances in Table = " + alliancesWithTeams )
#endif

	
	return clone file.allianceToTeamsTable[ alliance ]
}



array< int > function AllianceProximity_GetPopulatedTeamsInAlliance( int alliance )
{
	array < int > teams
	array < int > teamsToTest = AllianceProximity_GetTeamsInAlliance( alliance )
	foreach ( team in teamsToTest )
	{
		if ( GetPlayerArrayOfTeam( team ).len() > 0 )
			teams.append( team )
	}

	return teams
}

















































































int function AllianceProximity_GetRepresentativeTeamForAlliance( int alliance )
{
#if DEV
		int maxTeams = GetCurrentPlaylistVarInt( "max_teams", 0 )








#endif









	int repTeam = TEAM_INVALID


		array< int > populatedTeams = AllianceProximity_GetPopulatedTeamsInAlliance( alliance )

		if ( populatedTeams.len() > 0 )
		{
			foreach ( team in populatedTeams )
			{
				
				if ( GamemodeUtility_GetIsTeamIndexValidPlayerTeam( team ) )
				{
					repTeam = team
					break
				}
			}
		}

		
		if ( repTeam == TEAM_INVALID )

		{
			array<int> teamsInAlliance = AllianceProximity_GetTeamsInAlliance( alliance )

#if DEV
				if ( teamsInAlliance.len() == 0 )
				{
					array < int > otherAlliancesArray = AllianceProximity_GetOtherAlliances( alliance )
					int numTeamsInOtherAlliances = 0

					foreach ( otherAlliance in otherAlliancesArray )
					{
						numTeamsInOtherAlliances += AllianceProximity_GetTeamsInAlliance( otherAlliance ).len()
					}

					if ( numTeamsInOtherAlliances == maxTeams )
						Assert( false, "ALLIANCE PROXIMITY: " + FUNC_NAME() + " tried to get a team from an alliance but there are no teams in alliance " + alliance + " ( looks like all teams got assigned to other alliances ), THIS WILL CAUSE AN INVALID TEAM TO BE RETURNED." )
				}
#endif

			Assert( teamsInAlliance.len() > 0, "ALLIANCE PROXIMITY: " + FUNC_NAME() + " tried to get a team from an alliance but there are no teams in alliance " + alliance + ", THIS WILL CAUSE AN INVALID TEAM TO BE RETURNED." )

			
			
			foreach ( team in teamsInAlliance )
			{
				
				if ( GamemodeUtility_GetIsTeamIndexValidPlayerTeam( team ) )
				{
					repTeam = team
					break
				}
			}
		}

	Assert( repTeam > TEAM_INVALID, "ALLIANCE PROXIMITY: " + FUNC_NAME() + " is going to return an Invalid Team Index." )

	return repTeam
}











array<int> function AllianceProximity_GetLivingPlayerTeamsInAlliance( int alliance )
{
	array<int> uniqueAllianceTeams = []
	array<entity> livingPlayers = GetPlayerArray_AliveConnected()

	foreach ( playerEnt in livingPlayers )
	{
		int playerEntTeam = playerEnt.GetTeam()
		int playerEntAlliance = AllianceProximity_GetAllianceFromTeam( playerEntTeam )
		if ( !uniqueAllianceTeams.contains( playerEntTeam ) && playerEntAlliance == alliance )
			uniqueAllianceTeams.append( playerEntTeam )
	}

	return uniqueAllianceTeams
}




































void function AllianceProximity_OnPlayerCreated( entity player )
{
	if ( GetGameState() < eGameState.WinnerDetermined && IsValid( player ) )
		file.playerEHIToOriginalTeamTable[ ToEHI( player ) ] <- player.GetTeam()
}



void function AllianceProximity_MuteAllianceOnMatchEndReassignment()
{
	if ( GetGameState() < eGameState.WinnerDetermined )
		return

	entity localPlayer = GetLocalClientPlayer()

	if ( !IsValid( localPlayer ) )
		return

	EHI playerEhi = localPlayer.GetEncodedEHandle()
	int playerTeam = AllianceProximity_GetOriginalPlayerTeam_FromPlayerEHI( playerEhi )

	array< entity > teamPlayers = GetPlayerArrayOfTeam( localPlayer.GetTeam() )
	foreach( teamplayer in teamPlayers )
	{
		if ( !IsValid( teamplayer ) )
			continue

		EHI teamplayerEhi = teamplayer.GetEncodedEHandle()
		if ( playerTeam != AllianceProximity_GetOriginalPlayerTeam_FromPlayerEHI( teamplayerEhi ) )
		{
			SetPlayerTempMuted( teamplayer )
		}
	}
}




void function AllianceProximity_SetTeamsToAlliances()
{
	int allianceIndex = 0
	array<int> allTeams = AllianceProximity_GetAllTeamsInAlliances( false )

	foreach ( team in allTeams )
	{
		AllianceProximity_SetTeamToAlliance_Internal( team, allianceIndex )

		
		if ( !AllianceProximity_ShouldAllTeamsStartOnTheSameAlliance() )
		{
			allianceIndex++

			if ( allianceIndex >= AllianceProximity_GetMaxNumAlliances() )
				allianceIndex = 0
		}
	}
}



void function AllianceProximity_SetTeamToAlliance_Internal( int team, int alliance )
{
	array<int> allTeams = AllianceProximity_GetAllTeamsInAlliances( false )

	if ( !allTeams.contains( team ) )
	{
#if DEV
				Assert( false, "ALLIANCE PROXIMITY: " + FUNC_NAME() + " is trying to change the alliance for a team that doesn't exist: " + team + " if this is intentional try the AllianceProximity_RegisterNonPlayerTeamToAlliances function" )
#endif
		return
	}

	if ( alliance >= AllianceProximity_GetMaxNumAlliances() )
	{
#if DEV
			Assert( false, "ALLIANCE PROXIMITY: " + FUNC_NAME() + " is trying to put team: " + team + " into an invalid alliance: " + alliance )
#endif
		return
	}

	int currentAlliance = team in file.teamToAllianceTable ? file.teamToAllianceTable[ team ] : ALLIANCE_NONE
	if ( currentAlliance == alliance )
	{
		printt( "ALLIANCE PROXIMITY: ", FUNC_NAME(), " Exiting, alliance passed in: ", alliance, " for team: ", team, " is the same as the current alliance: ", currentAlliance )
		return
	}


#if DEV
		printt( "ALLIANCE PROXIMITY: Putting team ", team, " on Alliance ", alliance )
#endif









	
	file.teamToAllianceTable[ team ] <- alliance

	
	foreach( allianceToUpdate in file.allAlliances )
	{
		if ( allianceToUpdate in file.allianceToTeamsTable && file.allianceToTeamsTable[ allianceToUpdate ].contains( team ) )
			file.allianceToTeamsTable[ allianceToUpdate ].fastremovebyvalue( team )
	}

	
	if ( alliance in file.allianceToTeamsTable )
	{
		file.allianceToTeamsTable[ alliance ].append( team )
	}
	else
	{
		file.allianceToTeamsTable[ alliance ] <- [ team ]





	}

	if ( !file.allAlliances.contains( alliance ) )
		file.allAlliances.append( alliance )

	
	foreach ( func in file.callbacks_AllianceProximity_OnTeamPutIntoAlliance )
	{
		func( team, alliance )
	}
}



















void function AllianceProximity_ServerCallback_SetTeamToAllianceOnClient( int team, int alliance )
{
	AllianceProximity_SetTeamToAlliance_Internal( team, alliance )
}
























void function AllianceProximity_ManageIconVisibility_Thread( entity ent, var rui, bool isFullMapRui, bool ruiHasBuiltInDistTracking )
{
	entity player = GetLocalClientPlayer()
	
	if ( !AllianceProximity_IsUsingAllianceProximityDistanceChecks() || !IsValid( player ) || !IsValid( ent ) )
		return

	
	if ( file.isMinimapDisabled )
		return

	int playerTeam = player.GetTeam()
	int entTeam = ent.GetTeam()

	
	if ( playerTeam == entTeam || !IsFriendlyTeam( playerTeam, entTeam ) || entTeam == 0 )
		return

	float maxProximity = AllianceProximity_GetMaxDistForProximity()

	
	entity entOwner = ent.GetOwner()
	if ( IsValid( entOwner ) )
	{
		if ( entOwner.IsPlayer() && IsPositionWithinRadius( maxProximity, player.GetOrigin(), entOwner.GetOrigin() ) )
			return
	}

	if ( ruiHasBuiltInDistTracking )
	{
		RuiSetFloat( rui, "maxDrawDistance", maxProximity )
		return
	}

	while ( IsValid( player ) && IsValid( ent ) && IsValid( rui ) )
	{
		if ( IsPositionWithinRadius( maxProximity, player.GetOrigin(), ent.GetOrigin() ) )
		{
			if ( isFullMapRui )
			{
				RuiSetVisible( rui, Fullmap_IsVisible() )
			}
			else
			{
				RuiSetVisible( rui, true )
			}
		}
		else
		{
			RuiSetVisible( rui, false )
		}
		WaitFrame()
	}
}
















































int function AllianceProximity_GetAllianceScoreDifference()
{
	array< int > allAlliances = AllianceProximity_GetAllAlliances()
	int scoreDifference = 0

	
	if ( allAlliances.len() == 2 )
	{
		int allianceAScore = GetAllianceTeamsScore( ALLIANCE_A )
		int allianceBScore = GetAllianceTeamsScore( ALLIANCE_B )
		scoreDifference = maxint( allianceAScore, allianceBScore ) - minint( allianceAScore, allianceBScore )
	}
	else 
	{
		int lowestScore = -1
		int highestScore = 0
		int currentAllianceScore = 0

		foreach( alliance in allAlliances )
		{
			currentAllianceScore = GetAllianceTeamsScore( alliance )
			lowestScore = currentAllianceScore < lowestScore || lowestScore == -1 ? currentAllianceScore : lowestScore
			highestScore = currentAllianceScore > highestScore ? currentAllianceScore : highestScore
		}
		scoreDifference = highestScore - lowestScore
	}


	return scoreDifference
}






















































































