global function ChargePylons_Init














global const asset CHARGE_PYLON_PING_MODEL = $"mdl/test/davis_test/charge_pylong_ping_proxy.rmdl"














































































struct
{









	float chargePylonUseTime = 5.0
} file

void function ChargePylons_Init()
{
	if ( GetCurrentPlaylistVarBool( "charge_pylons_enabled", true ) )
	{


			AddCreateCallback( "prop_dynamic", ChargePylon_Cl_SetButtonUsable )




















		file.chargePylonUseTime = GetCurrentPlaylistVarFloat( "charge_pylons_use_time_override", 5.0 )
	}
}




































































































































































































































































void function ChargePylon_Cl_SetButtonUsable( entity prop )
{
	if ( prop.GetScriptName() == "charge_pylon_button" )
	{
		ChargePylon_SetButtonUsable( prop )
	}
}


void function ChargePylon_SetButtonUsable( entity button )
{



	AddCallback_OnUseEntity_ClientServer( button, ChargePylon_OnUse )

	SetCallback_CanUseEntityCallback( button, ChargePylon_CanUse )

	
	
	
}















void function ChargePylon_OnUse( entity panel, entity user, int useInputFlags )
{
	if ( !IsBitFlagSet( useInputFlags, USE_INPUT_LONG ) )
		return

	ExtendedUseSettings settings

	settings.duration = file.chargePylonUseTime
	settings.useInputFlag = IN_USE_LONG
	settings.successSound = "lootVault_Access"


		settings.loopSound = "survival_titan_linking_loop"
		settings.displayRuiFunc = DisplayRUIForChargePylonExtdUse
		settings.displayRui = $"ui/health_use_progress.rpak"
		settings.icon = $"rui/hud/gametype_icons/survival/data_knife"
		settings.hint = "#HINT_CHARGE_PYLON_ACTIVATING"

		














	thread ExtendedUse( panel, user, settings )
}







































void function DisplayRUIForChargePylonExtdUse( entity ent, entity player, var rui, ExtendedUseSettings settings )
{
	DisplayRuiForLootVaultPanel_Internal( rui, settings.icon, Time(), Time() + settings.duration, settings.hint )
}

void function DisplayRuiForLootVaultPanel_Internal( var rui, asset icon, float startTime, float endTime, string hint )
{
	RuiSetBool( rui, "isVisible", true )
	RuiSetImage( rui, "icon", icon )
	RuiSetGameTime( rui, "startTime", startTime )
	RuiSetGameTime( rui, "endTime", endTime )
	RuiSetString( rui, "hintKeyboardMouse", hint )
	RuiSetString( rui, "hintController", hint )
}





















































bool function ChargePylon_CanUse( entity user, entity button, int useFlags )
{
	if ( Bleedout_IsBleedingOut( user ) )
		return false

	if ( user.ContextAction_IsActive() )
		return false

	entity activeWeapon = user.GetActiveWeapon( eActiveInventorySlot.mainHand )

	if ( IsValid( activeWeapon ) )
	{
		
		var offhandAllowsPickups = activeWeapon.GetWeaponInfoFileKeyField("offhand_allow_player_interact")

		
		if ( activeWeapon.IsWeaponOffhand() && !offhandAllowsPickups)
			return false
	}

	if ( button.e.isBusy )
		return false

	return true
}




















































































































































































































































































































































































































