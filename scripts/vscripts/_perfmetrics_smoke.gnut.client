global function SkinMetrics_Init






global function SkinMetrics_ClientStartRecordingMetrics



struct
{
	string metricsFileName
	string metricsDataBuffer
	array<string> metricsDataCategories

	bool oldDVSEnable
	int oldNotFocusSleep
	int oldFpsMax
	int oldVsyncMode
} skinMetrics

















const int SINGLE_TEST_TIME_SECONDS = 10
const string BLOODHOUND_GUID_STRING = "SAID00898565421"
const string BLOODHOUND_CLASSIC_GUID_STRING = "SAID00845551255"
const string AUTOPISTOL_GUID_STRING = "SAID00686444189"
const string AUTOPISTOL_FACTORY_ISSUE_GUID_STRING = "SAID01309064329"

void function SkinMetrics_Init()
{
	SkinMetrics_RegisterNetworking()









}

void function SkinMetrics_RegisterNetworking()
{
	Remote_RegisterClientFunction( "SkinMetrics_ClientStartRecordingMetrics",
		"int", -INT_MAX, INT_MAX, "int", -INT_MAX, INT_MAX, "int", -INT_MAX, INT_MAX, "int", -INT_MAX, INT_MAX )
	Remote_RegisterServerFunction( "SkinMetrics_OnClientEndRecordingSkinMetrics" )
}










































































































































































































































const string METRICS_FPS = "FPS"
const int SAMPLE_COUNT = SINGLE_TEST_TIME_SECONDS * 30

void function SkinMetrics_ClientStartRecordingMetrics( int legendGUID, int legendSkinGUID, int weaponGUID, int weaponSkinGUID )
{
	skinMetrics.oldDVSEnable = GetConVarBool( "dvs_enable" )
	skinMetrics.oldNotFocusSleep = GetConVarInt( "not_focus_sleep" )
	skinMetrics.oldFpsMax = GetConVarInt( "fps_max" )
	if ( HasConVar( "mat_vsyncMode" ) )
		skinMetrics.oldVsyncMode = GetConVarInt( "mat_vsyncMode" )

	SetConVarBool( "dvs_enable", false )
	SetConVarInt( "not_focus_sleep", 0 ) 	
	SetConVarInt( "fps_max", 0 ) 			
	if ( HasConVar( "mat_vsyncMode" ) )		
		SetConVarInt( "mat_vsyncMode", 0 )

	thread SkinMetrics_ClientStartRecordingMetrics_Thread( legendGUID, legendSkinGUID, weaponGUID, weaponSkinGUID )
}

void function SkinMetrics_ClientStartRecordingMetrics_Thread( int legendGUID, int legendSkinGUID, int weaponGUID, int weaponSkinGUID )
{
	string mapName = GetMapName()
	string hardware = GetPlatformName()
	string buildString = GetGameVersion()

	int buildNum = buildString.slice( buildString.find( "#" ) + 1 ).tointeger()

	string legendName = ItemFlavor_GetAssetShortName( GetItemFlavorByGUID( legendGUID ) )
	string legendSkinName = ItemFlavor_GetAssetShortName( GetItemFlavorByGUID( legendSkinGUID ) )
	string weaponName = ItemFlavor_GetAssetShortName( GetItemFlavorByGUID( weaponGUID ) )
	string weaponSkinName = ItemFlavor_GetAssetShortName( GetItemFlavorByGUID( weaponSkinGUID ) )

	string legendFriendlyName = Localize( ItemFlavor_GetShortName( GetItemFlavorByGUID( legendGUID ) ) )
	string legendSkinFriendlyName = Localize( ItemFlavor_GetLongName( GetItemFlavorByGUID( legendSkinGUID ) ) )
	string weaponFriendlyName = Localize( ItemFlavor_GetShortName( GetItemFlavorByGUID( weaponGUID ) ) )
	string weaponSkinFriendlyName = Localize( ItemFlavor_GetLongName( GetItemFlavorByGUID( weaponSkinGUID ) ) )

	skinMetrics.metricsFileName = format( "skin_metrics_%s_%s_%s_%s_%s_CL#%i.csv", hardware, legendName, legendSkinName, weaponName, weaponSkinName, buildNum )

	skinMetrics.metricsDataBuffer = "Hardware,Build ID,Map,Legend,Legend Skin,Weapon,Weapon Skin,FPS\n"
	skinMetrics.metricsDataBuffer += format( "%s,%s,%s,%s(%s),%s(%s),%s(%s),%s(%s)",
		hardware, buildString, mapName, legendFriendlyName, legendName, legendSkinFriendlyName, legendSkinName,
		weaponFriendlyName, weaponName, weaponSkinFriendlyName, weaponSkinName )
	skinMetrics.metricsDataBuffer += "\n"

	float lastSampleTime = 0.0
	for( int i = 0; i < SAMPLE_COUNT; i++ )
	{
		float now = Time()

		
		
		
		
		if ( now - lastSampleTime > RenderFrameTime() )
		{
			int fps = int( RoundToNearestInt( 1.0 / RenderFrameTime() ) )
			skinMetrics.metricsDataBuffer += format( ",,,,,,,%i\n", fps )
			lastSampleTime = now
		}

		DebugDrawScreenText( 0.8, 0.6, "Legend: " + legendName )
		DebugDrawScreenText( 0.8, 0.62, "Legend skin: " + legendSkinName )
		DebugDrawScreenText( 0.8, 0.64, "Weapon: " + weaponName )
		DebugDrawScreenText( 0.8, 0.66, "Weapon skin: " + weaponSkinName )

		WaitFrame()
	}

	SkinMetrics_ClientEndRecordingSkinMetrics()
}

void function SkinMetrics_ClientEndRecordingSkinMetrics()
{
	SetConVarBool( "dvs_enable", skinMetrics.oldDVSEnable )
	SetConVarInt( "not_focus_sleep", skinMetrics.oldNotFocusSleep )
	SetConVarInt( "fps_max", skinMetrics.oldFpsMax )
	if ( HasConVar( "mat_vsyncMode" ) )
		SetConVarInt( "mat_vsyncMode", skinMetrics.oldVsyncMode )

	Remote_ServerCallFunction( "SkinMetrics_OnClientEndRecordingSkinMetrics" )
	WriteMetricsDataToFile( skinMetrics.metricsFileName, "skin_metrics", skinMetrics.metricsDataBuffer, true )
}

