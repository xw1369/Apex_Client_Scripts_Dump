




global function GamemodeUtility_Init
global function GamemodeUtility_RegisterNetworking
global function GamemodeUtility_IsJIPEnabledInPlaylist	
global function GamemodeUtility_GetMixtapeAbandonPenaltyActive
global function GamemodeUtility_ParseCircleString 
global function GamemodeUtility_ParseVectorString 
global function GamemodeUtility_ParseStringOfVectors 
global function GamemodeUtility_GetKillReplayActive 
global function GamemodeUtility_GetIsTeamIndexValidPlayerTeam 


































global function GamemodeUtility_GetTeamOrAllianceScore 
global function GamemodeUtility_GetAllianceScoreFromTeam 
global function GamemodeUtility_GetScoreDifference	
global function GamemodeUtility_GetScoreDifferenceBetweenTeams	
global function GamemodeUtility_GetWinningTeamOrAlliance	
global function GamemodeUtility_GetWinningAlliance	
global function GamemodeUtility_GetWinningTeamOrAllianceScore	
global function GamemodeUtility_GetAlliancesOrTeamsSortedByScore 
global function GamemodeUtility_GetAlliancesOrTeamsSortedByEliminationAndScore 
global function GamemodeUtility_IsTeamOrAllianceEliminated 
global function GamemodeUtility_IsJIPEnabled	
global function GamemodeUtility_IsJIPPlayerSpawnBonusPending 
global function GamemodeUtility_IsPlayerAbandoning  
global function GamemodeUtility_GetAbandonPenaltyLength 
global function GamemodeUtility_AddCallback_OnPlayerJoinedMatchInProgress 
global function GamemodeUtility_GetMatchTimeLimit 
global function GamemodeUtility_GetMatchTimeLimitWarning 
global function GamemodeUtility_GetMaxPlayersToShowOnPodium 
global function GamemodeUtility_IsSpectatorEnabled 
global function GamemodeUtility_IsPlacementPopupEnabled 
global function GamemodeUtility_GetPlayerArrayOfTeamOrAlliance 
global function GamemodeUtility_GetPlayerTeamOrAlliance 
global function GamemodeUtility_GetObjectiveProgressPercentIntFromFloat 
global function GamemodeUtility_GetLoadoutBonusOrdinanceCount 



global function GamemodeUtility_ServerCallback_DisplayMatchTimeLimitWarning	
global function GamemodeUtility_ServerCallback_PlayMatchEndingCountdownAudio 
global function GamemodeUtility_AnnouncementMessageWarning	
global function GamemodeUtility_GetColorVectorForCaptureObjectiveState	
global function GamemodeUtility_IsPlayerOnTeamObserver	
global function GamemodeUtility_GetLocalTeamPlayers 
global function GamemodeUtility_ServerCallback_PlayerJoinedMatchInProgress 
global function GamemodeUtility_ServerCallback_TriggerScanOfVictimTeam 












const float UNSET_PLAYLIST_VAR_FLOAT = -1
const int UNSET_PLAYLIST_VAR_INT = -1
global const int EXPECTED_PARSED_CIRCLE_VALUE_COUNT = 4

















const float GAMEMODEUTILITY_DEFAULT_MESSAGE_DURATION = 5.0 
const float GAMEMODEUTILITY_MATCH_TIME_LIMIT_WARNING_TIME = 300.0 
const string GAMEMODEUTILITY_NETVAR_MATCH_START = "matchStartTime"
const string GAMEMODEUTILITY_NETVAR_MATCH_END = "matchEndTime"
const int GAMEMODEUTILITY_FINAL_COUNTDOWN_DURATION = 10
const string GAMEMODEUTILITY_FINAL_COUNTDOWN_SFX = "FreeDM_UI_InGame_Timer_10Seconds_1P"



const string SFX_MATCH_TIME_LIMIT = "Ctrl_Match_End_Warning_1p"	
const string SFX_JOIN_MATCH_IN_PROGRESS = "Ctrl_New_Player_Joined" 




global enum eGamemodeUtilityCaptureObjectiveColorState
{
	NEUTRAL,
	CONTESTED,
	FRIENDLY_OWNED,
	ENEMY_OWNED
}










struct {



















		bool isLoweringDVSForGamemode = false 



		array< void functionref( entity ) > onPlayerJoinedMatchInProgressCallbackFuncs 

} file

void function GamemodeUtility_Init()
{



















































	if ( GamemodeUtility_GetShouldTweakDVSForGamemode() )
		AddCreateCallback( "player", GamemodeUtility_OnPlayerCreated_DVSCallback_Client ) 

	if ( GamemodeUtility_ShouldPingVictimSquadLocationOnDown() || GamemodeUtility_ShouldPingVictimSquadLocationOnKill() )
		RegisterSignal( "StartedVictimSquadMapScan" )





}

void function GamemodeUtility_RegisterNetworking()
{

		RegisterNetworkedVariable( GAMEMODEUTILITY_NETVAR_MATCH_START, SNDC_GLOBAL_NON_REWIND, SNVT_TIME, -1.0 )
		RegisterNetworkedVariable( GAMEMODEUTILITY_NETVAR_MATCH_END, SNDC_GLOBAL_NON_REWIND, SNVT_TIME, 0.0 )


	Remote_RegisterClientFunction( "GamemodeUtility_ServerCallback_DisplayMatchTimeLimitWarning", "bool" )
	Remote_RegisterClientFunction( "GamemodeUtility_ServerCallback_PlayMatchEndingCountdownAudio" )
	RegisterNetworkedVariable( "mixtape_isLeaverPenaltyEnabledForMatch", SNDC_GLOBAL, SNVT_BOOL, true )


		RegisterNetVarBoolChangeCallback( "mixtape_isLeaverPenaltyEnabledForMatch", GamemodeUtility_OnLeaverPenaltyStatusChanged )
		RegisterNetVarTimeChangeCallback( GAMEMODEUTILITY_NETVAR_MATCH_START, GamemodeUtility_OnMatchStartTimeChanged )
		RegisterNetVarTimeChangeCallback( GAMEMODEUTILITY_NETVAR_MATCH_END, GamemodeUtility_OnMatchEndTimeChanged )



	
	if ( !IsEliminationBased() )
		RegisterNetworkedVariable( "deaths", SNDC_PLAYER_GLOBAL, SNVT_INT, 0 )



	
	if ( GamemodeUtility_IsJIPEnabledInPlaylist() )
	{

			RegisterNetworkedVariable( "GamemodeUtility_HasJIPPlayerReceivedSpawnBonus", SNDC_PLAYER_EXCLUSIVE, SNVT_BOOL, false )

		Remote_RegisterClientFunction( "GamemodeUtility_ServerCallback_PlayerJoinedMatchInProgress", "entity" )
	}

	if ( GamemodeUtility_ShouldPingVictimSquadLocationOnDown() || GamemodeUtility_ShouldPingVictimSquadLocationOnKill() )
		Remote_RegisterClientFunction( "GamemodeUtility_ServerCallback_TriggerScanOfVictimTeam", "int", 0, TEAM_MULTITEAM_FIRST + MAX_TEAMS + 1 )
}
















bool function GamemodeUtility_IsJIPEnabled()
{
	return GetConVarBool( "match_jip" ) && GamemodeUtility_IsJIPEnabledInPlaylist() && GetGameState() < eGameState.Resolution
}



bool function GamemodeUtility_IsJIPEnabledInPlaylist()
{
	return GetCurrentPlaylistVarBool( "match_jip", false )
}


bool function GamemodeUtility_GetShouldTweakDVSForGamemode()
{
	return GetCurrentPlaylistVarBool( "should_tweak_dvs_for_gamemode", false )
}




































































float function GamemodeUtility_GetMatchTimeLimit()
{
	float matchTimeLimit = GetCurrentPlaylistVarFloat( "match_time_limit", UNSET_PLAYLIST_VAR_FLOAT ) 

#if DEV
		printt( "GAMEMODE UTILITY: Grabbing the match time limit playlist var: match_time_limit. It is returning: " + matchTimeLimit )
#endif

	return matchTimeLimit
}


float function GamemodeUtility_GetMatchTimeLimitWarning()
{
	return GetCurrentPlaylistVarFloat ( "match_time_remaining_warning", GAMEMODEUTILITY_MATCH_TIME_LIMIT_WARNING_TIME )
}

int function GamemodeUtility_GetMaxPlayersToShowOnPodium()
{
	return GetCurrentPlaylistVarInt( "podium_max_players_to_show", GetExpectedSquadSize() )
}

bool function GamemodeUtility_IsSpectatorEnabled()
{
	return GetCurrentPlaylistVarBool( "spectator_enabled", true )
}

bool function GamemodeUtility_IsPlacementPopupEnabled()
{
	return GetCurrentPlaylistVarBool( "placement_popup", false )
}











































































bool function GamemodeUtility_ShouldPingVictimSquadLocationOnDown()
{
	return GetCurrentPlaylistVarBool( "map_ping_victim_squad_on_down", false )
}


bool function GamemodeUtility_ShouldPingVictimSquadLocationOnKill()
{
	return GetCurrentPlaylistVarBool( "map_ping_victim_squad_on_kill", false )
}


float function GamemodeUtility_GetDurationOfVictimSquadMapPing()
{
	return GetCurrentPlaylistVarFloat( "victim_squad_map_ping_duration", 0.0 )
}









bool function GamemodeUtility_GetKillReplayActive()
{
	return GetCurrentPlaylistVarBool( "killreplay_enabled", false )
}















































int function GamemodeUtility_GetLoadoutBonusOrdinanceCount()
{
	return GetCurrentPlaylistVarInt( "set_loadout_bonus_ordinance_count", 1 )
}





















void function GamemodeUtility_AddCallback_OnPlayerJoinedMatchInProgress( void functionref( entity ) func )
{
	Assert( !file.onPlayerJoinedMatchInProgressCallbackFuncs.contains( func ), "GAMEMODE UTILITY: Already added " + string( func ) + " to onPlayerJoinedMatchInProgressCallbackFuncs" )
	file.onPlayerJoinedMatchInProgressCallbackFuncs.append( func )
}






























































































void function GamemodeUtility_OnPlayerCreated_DVSCallback_Client( entity player )
{
	
	if ( GetGameState() <= eGameState.Playing )
	{
		entity localClientPlayer = GetLocalClientPlayer()

		if ( IsValid( player ) && IsValid( localClientPlayer ) && player == GetLocalClientPlayer() )
			thread GamemodeUtility_ManageDVSTweakOnPlayer_Thread()
	}
}



















































void function GamemodeUtility_OnLeaverPenaltyStatusChanged( entity player, bool isLeaverPenaltyEnabled )
{
	if ( !isLeaverPenaltyEnabled )
		Obituary_Print_Localized( Localize( "#GAMEMODES_LEAVER_PENALTY_DEACTIVATED" ).toupper() )
}























































void function GamemodeUtility_ServerCallback_TriggerScanOfVictimTeam( int victimTeam )
{
	
	if ( GetAllTeams().contains( victimTeam ) )
		thread RunVictimSquadMapScan_Thread( victimTeam )
}




const float POST_PULSE_WAIT = 1.0 
const float SCAN_FADE_DURATION = 1.5
void function RunVictimSquadMapScan_Thread( int victimTeam )
{
#if DEV
		Assert( IsNewThread(), "Must be threaded off" )
#endif

	if ( IsValid( clGlobal.levelEnt ) )
		EndSignal( clGlobal.levelEnt, "OnDestroy" )

	entity localPlayer = GetLocalClientPlayer()

	if ( !IsValid( localPlayer ) || !IsAlive( localPlayer ) )
		return

	
	localPlayer.Signal( "StartedVictimSquadMapScan" )

	EndSignal( localPlayer, "OnDestroy", "OnDeath", "StartedVictimSquadMapScan" )

	array<var> fullMapRuis
	array<var> minimapRuis

	OnThreadEnd(
		function() : ( fullMapRuis, minimapRuis )
		{
			foreach( var ruiToDestroy in fullMapRuis )
			{
				Fullmap_RemoveRui( ruiToDestroy )
				RuiDestroyIfAlive( ruiToDestroy )
			}

			foreach( var ruiToDestroy in minimapRuis)
			{
				Minimap_CommonCleanup( ruiToDestroy )
			}
		}
	)

	float scanDuration = GamemodeUtility_GetDurationOfVictimSquadMapPing()
	if ( scanDuration > 0.0 )
	{
		
		vector pulseOrigin = localPlayer.GetOrigin()
		FullMap_PlayCryptoPulseSequence( pulseOrigin, true, scanDuration + POST_PULSE_WAIT )

		
		wait POST_PULSE_WAIT

		
		int team = localPlayer.GetTeam()
		array< entity > livingVictimsArray = GetPlayerArrayOfTeam_Alive( victimTeam )
		array< entity > scanEntsArray
		
		foreach ( victim in livingVictimsArray )
		{
			if ( !Bleedout_IsBleedingOut( victim ) )
				scanEntsArray.append( victim )
		}

		
		float startTime = Time()
		float totalScanDurationWithFadeOut = scanDuration + SCAN_FADE_DURATION
		float endTime = startTime + totalScanDurationWithFadeOut
		float timeToStartFade = startTime + scanDuration

		
		foreach( entity victim in scanEntsArray )
		{





			
			var fRui = FullMap_AddEnemyLocation( victim )
			fullMapRuis.append( fRui )

			
			var mRui = Minimap_AddEnemyToMinimap( victim )
			minimapRuis.append( mRui )
			RuiSetGameTime( mRui, "fadeStartTime", timeToStartFade )
			RuiSetGameTime( mRui, "fadeEndTime", endTime )
		}

		
		wait totalScanDurationWithFadeOut
	}
}
























































































































































































































































































































































































































































































































































































void function GamemodeUtility_OnMatchStartTimeChanged( entity player, float time )
{
	var rui = ClGameState_GetRui()
	if ( RuiIsAlive( rui ) )
	{
		if ( RuiHasGameTimeArg( rui, "matchStartTime" ) )
		{
			RuiSetGameTime( rui, "matchStartTime", time )
		}
	}
}



void function GamemodeUtility_OnMatchEndTimeChanged( entity player, float time )
{
	var rui = ClGameState_GetRui()
	if ( RuiIsAlive( rui ) )
	{
		if ( RuiHasGameTimeArg( rui, "matchEndTime" ) )
		{
			RuiSetGameTime( rui, "matchEndTime", time )
		}
	}
}















































































































































































void function GamemodeUtility_ServerCallback_DisplayMatchTimeLimitWarning( bool isFinalWarning )
{
	entity player = GetLocalViewPlayer()
	if ( !IsValid( player ) )
		return

	
	if ( GamemodeUtility_GetMatchTimeLimitWarning() < 60 )
		return

	string message = Localize( "#CONTROL_MATCH_TIMELIMIT_WARNING", GamemodeUtility_GetMatchTimeLimitWarning()/ 60 )
	if ( isFinalWarning )
		message = Localize( "#CONTROL_MATCH_TIMELIMIT_GAMEEND" )

	GamemodeUtility_AnnouncementMessageWarning( player, message, GamemodeUtility_GetColorVectorForCaptureObjectiveState( eGamemodeUtilityCaptureObjectiveColorState.ENEMY_OWNED ), SFX_MATCH_TIME_LIMIT, GAMEMODEUTILITY_DEFAULT_MESSAGE_DURATION )
}



void function GamemodeUtility_ServerCallback_PlayMatchEndingCountdownAudio()
{
	thread GamemodeUtility_ServerCallback_PlayMatchEndingCountdownAudio_Thread()
}



void function GamemodeUtility_ServerCallback_PlayMatchEndingCountdownAudio_Thread()
{
	if ( IsValid( clGlobal.levelEnt ) )
		EndSignal( clGlobal.levelEnt, "OnDestroy" )

	int secondsElapsed = 0
	while ( secondsElapsed < GAMEMODEUTILITY_FINAL_COUNTDOWN_DURATION )
	{
		if ( IsValid( GetLocalClientPlayer() ) )
			EmitSoundOnEntity( GetLocalClientPlayer(), GAMEMODEUTILITY_FINAL_COUNTDOWN_SFX )

		secondsElapsed += 1
		wait 1.0
	}
}





























































































































































bool function GamemodeUtility_IsJIPPlayerSpawnBonusPending( entity player )
{
	if ( !IsValid( player ) || !GamemodeUtility_IsJIPEnabledInPlaylist() )
		return false

	return player.GetPlayerNetBool( "GamemodeUtility_HasJIPPlayerReceivedSpawnBonus" )
}




























void function GamemodeUtility_ServerCallback_PlayerJoinedMatchInProgress( entity jipPlayer )
{
	entity localPlayer = GetLocalClientPlayer()
	if ( !IsValid( localPlayer ) || !IsValid( jipPlayer ) )  
		return

	
	foreach( playerJoinedMatchInProgressFunc in file.onPlayerJoinedMatchInProgressCallbackFuncs )
	{
		playerJoinedMatchInProgressFunc( jipPlayer )
	}

	
	int jipPlayerTeamOrAlliance = AllianceProximity_IsUsingAlliances() ? AllianceProximity_GetAllianceFromTeam( jipPlayer.GetTeam() ) : jipPlayer.GetTeam()
	int localPlayerTeamOrAlliance = AllianceProximity_IsUsingAlliances() ? AllianceProximity_GetAllianceFromTeam( localPlayer.GetTeam() ) : localPlayer.GetTeam()
	if ( jipPlayerTeamOrAlliance == localPlayerTeamOrAlliance )
		EmitUISound( SFX_JOIN_MATCH_IN_PROGRESS )
}




int function GamemodeUtility_GetScoreDifference()
{
	if ( AllianceProximity_IsUsingAlliances() )
		return AllianceProximity_GetAllianceScoreDifference()

	return GamemodeUtility_GetScoreDifferenceBetweenTeams()
}




int function GamemodeUtility_GetScoreDifferenceBetweenTeams()
{
	int lowestScore = -1
	int highestScore = 0
	int currentTeamScore = 0
	array < int > allTeamsArray = GetAllValidPlayerTeams()

	foreach( team in allTeamsArray )
	{
		currentTeamScore = GameRules_GetTeamScore( team )
		lowestScore = currentTeamScore < lowestScore || lowestScore == -1 ? currentTeamScore : lowestScore
		highestScore = currentTeamScore > highestScore ? currentTeamScore : highestScore
	}

	return highestScore - lowestScore
}




int function GamemodeUtility_GetWinningTeamOrAlliance( bool shouldReturnInvalidInCaseOfTie )
{
	if ( AllianceProximity_IsUsingAlliances() )
		return GamemodeUtility_GetWinningAlliance( shouldReturnInvalidInCaseOfTie )

	int winningTeam = GetWinningTeam( shouldReturnInvalidInCaseOfTie )

	
	
	int fallbackTeam = TEAM_INVALID
	if ( !shouldReturnInvalidInCaseOfTie )
		fallbackTeam = TEAM_MULTITEAM_FIRST

	return winningTeam < TEAM_MULTITEAM_FIRST ? fallbackTeam : winningTeam
}




int function GamemodeUtility_GetWinningAlliance( bool shouldReturnInvalidInCaseOfTie )
{
	int winningAlliance = ALLIANCE_NONE
	int highestScore = 0
	int currentScoreBeingTested = 0
	array < int > allAlliancesArray = AllianceProximity_GetAllAlliances()

	foreach( alliance in allAlliancesArray )
	{
		currentScoreBeingTested = GetAllianceTeamsScore( alliance )

		if ( shouldReturnInvalidInCaseOfTie && currentScoreBeingTested == highestScore && winningAlliance != alliance ) 
		{
			winningAlliance = ALLIANCE_NONE
		}
		else if ( currentScoreBeingTested > highestScore )
		{
			winningAlliance = alliance
			highestScore = currentScoreBeingTested
		}
	}

	return winningAlliance
}




int function GamemodeUtility_GetWinningTeamOrAllianceScore()
{
	int winningTeamOrAlliance = GamemodeUtility_GetWinningTeamOrAlliance( false )

	return GamemodeUtility_GetTeamOrAllianceScore( winningTeamOrAlliance )
}




int function GamemodeUtility_GetTeamOrAllianceScore( int teamOrAlliance )
{
	int teamScore = 0

	if ( teamOrAlliance != TEAM_INVALID )
	{
		if ( AllianceProximity_IsUsingAlliances() )
			teamScore = GetAllianceTeamsScore( teamOrAlliance )
		else
			teamScore = GameRules_GetTeamScore( teamOrAlliance )
	}

	return teamScore
}




int function GamemodeUtility_GetAllianceScoreFromTeam( int team )
{
	int allianceIndex = AllianceProximity_GetAllianceFromTeam( team )
	return GetAllianceTeamsScore( allianceIndex )
}





array < int > function GamemodeUtility_GetAlliancesOrTeamsSortedByScore( bool shouldExcludeEliminated )
{
	array < int > teamsOrAlliances = AllianceProximity_IsUsingAlliances() ? AllianceProximity_GetAllAlliances() : GetAllValidPlayerTeams()

	if ( shouldExcludeEliminated )
	{
		array < int >  nonEliminatedTeamsOrAlliances = []

		foreach( teamOrAlliance in teamsOrAlliances )
		{
			if ( !GamemodeUtility_IsTeamOrAllianceEliminated( teamOrAlliance ) )
				nonEliminatedTeamsOrAlliances.append( teamOrAlliance )
		}

		teamsOrAlliances = nonEliminatedTeamsOrAlliances
	}

	teamsOrAlliances.sort( int function( int a, int b )
	{
		int aScore = GamemodeUtility_GetTeamOrAllianceScore( a )
		int bScore = GamemodeUtility_GetTeamOrAllianceScore( b )

		if ( aScore > bScore )
			return -1
		else if ( aScore < bScore )
			return 1

		return 0
	}
	)

	return teamsOrAlliances
}




array < int > function GamemodeUtility_GetAlliancesOrTeamsSortedByEliminationAndScore()
{
	array < int > teamsOrAlliances = AllianceProximity_IsUsingAlliances() ? AllianceProximity_GetAllAlliances() : GetAllValidPlayerTeams()

	teamsOrAlliances.sort( int function( int a, int b )
	{
		int aScore = GamemodeUtility_GetTeamOrAllianceScore( a )
		int bScore = GamemodeUtility_GetTeamOrAllianceScore( b )
		bool aIsEliminated = GamemodeUtility_IsTeamOrAllianceEliminated( a )
		bool bIsEliminated = GamemodeUtility_IsTeamOrAllianceEliminated( b )

		
		if ( bIsEliminated && !aIsEliminated )
			return -1
		else if ( aIsEliminated && !bIsEliminated )
			return 1

		
		if ( aScore > bScore )
			return -1
		else if ( aScore < bScore )
			return 1

		return 0
	}
	)

	return teamsOrAlliances
}




bool function GamemodeUtility_IsTeamOrAllianceEliminated( int teamOrAlliance )
{
	array < entity > teamOrAlliancePlayers = AllianceProximity_IsUsingAlliances() ? AllianceProximity_GetAllPlayersInAlliance( teamOrAlliance, false ) : GetPlayerArrayOfTeam( teamOrAlliance )

	foreach ( player in teamOrAlliancePlayers )
	{
		if ( !IsValid( player ) )
			continue

		
		if ( player.GetPlayerNetInt( "respawnStatus" ) != eRespawnStatus.SQUAD_ELIMINATED )
			return false
	}

	return true
}













































































































































































bool function GamemodeUtility_IsPlayerAbandoning( entity player )
{
	if ( !GamemodeUtility_GetMixtapeAbandonPenaltyActive() )
		return false

	if ( GetGameState() >= eGameState.WinnerDetermined )
		return false

	if ( !GetGlobalNetBool( "mixtape_isLeaverPenaltyEnabledForMatch" ) )
		return false

	if ( GetGameState() >= eGameState.Prematch && !player.GetPlayerNetBool( "rankedDidPlayerEverHaveAFullTeam" ) )
		return false

	return true
}




int function GamemodeUtility_GetAbandonPenaltyLength( entity player )
{
	if( !IsValid( player ) )
		return 0

	int numGamesAbandoned = expect int ( player.GetPersistentVar( "numControlAbandons" ) ) + 1

	int banLength
	if ( numGamesAbandoned >= 4 )
		banLength = GetCurrentPlaylistVarInt( "mixtape_abandon_penalty_time_4", 60 * 20 ) 
	else
		banLength = GetCurrentPlaylistVarInt( "mixtape_abandon_penalty_time_" + numGamesAbandoned , 60 * 2 ) 

	return banLength
}


















void function GamemodeUtility_AnnouncementMessageWarning( entity player, string messageText, vector titleColor, string soundAlias, float duration )
{
	AnnouncementData announcement = Announcement_Create( messageText )
	Announcement_SetHeaderText( announcement, " " )
	Announcement_SetSubText( announcement, " " )
	Announcement_SetStyle( announcement, ANNOUNCEMENT_STYLE_GENERIC_WARNING )
	Announcement_SetSoundAlias( announcement, soundAlias )
	Announcement_SetPurge( announcement, true )
	Announcement_SetPriority( announcement, 200 ) 
	Announcement_SetDuration( announcement, duration )

	Announcement_SetTitleColor( announcement, titleColor )
	Announcement_SetVerticalOffset( announcement, 140 )
	AnnouncementFromClass( player, announcement )
}




vector function GamemodeUtility_GetColorVectorForCaptureObjectiveState( int objectiveState, bool isRuiUIColor = false )
{
	vector color

	switch( objectiveState )
	{
		case eGamemodeUtilityCaptureObjectiveColorState.NEUTRAL:
			color = GetKeyColor( COLORID_COLORSWATCH_WHITE )
			break
		case eGamemodeUtilityCaptureObjectiveColorState.CONTESTED:
			color = GetKeyColor( COLORID_CONTROL_CONTESTED )
			break
		case eGamemodeUtilityCaptureObjectiveColorState.FRIENDLY_OWNED:
			color = GetKeyColor( COLORID_CONTROL_FRIENDLY )
			break
		case eGamemodeUtilityCaptureObjectiveColorState.ENEMY_OWNED:
			color = GetKeyColor( COLORID_CONTROL_ENEMY )
			break
		default:
			color = GetKeyColor( COLORID_COLORSWATCH_WHITE )
			break
	}

	if ( isRuiUIColor )
		color = SrgbToLinear( color / 255 )

	return color
}



bool function GamemodeUtility_IsPlayerOnTeamObserver( entity player )
{
	if( !IsValid( player ) )
		return false

	return player.GetTeam() == TEAM_SPECTATOR
}





array<entity> function GamemodeUtility_GetLocalTeamPlayers( bool friendly )
{
	
	int localPlayerTeam = GetLocalClientPlayer().GetTeam()
	if ( IsLocalPlayerOnTeamSpectator() )
		localPlayerTeam = TEAM_IMC

	
	int teamOrAllianceToReturn
	array<entity> localTeamPlayersArray

	if ( AllianceProximity_IsUsingAlliances() )
	{
		int localPlayerAlliance = AllianceProximity_GetAllianceFromTeamWithObserverCorrection( localPlayerTeam )
		
		teamOrAllianceToReturn = friendly ? localPlayerAlliance : AllianceProximity_GetOtherAlliance( localPlayerAlliance )
		localTeamPlayersArray = AllianceProximity_GetAllPlayersInAlliance( teamOrAllianceToReturn, false )
	}
	else
	{
		teamOrAllianceToReturn = friendly ? localPlayerTeam : GetOtherTeam( localPlayerTeam )
		localTeamPlayersArray = GetPlayerArrayOfTeam( teamOrAllianceToReturn )
	}

	return localTeamPlayersArray
}









































































































































































































bool function GamemodeUtility_GetMixtapeAbandonPenaltyActive()
{
	return GetCurrentPlaylistVarBool( "mixtape_match_abandon_penalty", false )
}

















































































































































































































































































































int function GamemodeUtility_GetMaxDroppedGrenadesOnDeath()
{
	return GetCurrentPlaylistVarInt( "grenade_ondeath_max_spawncount", 1 )
}







































float function GetPlaylistVar_DeathboxDuration()
{
	return GetCurrentPlaylistVarFloat( "deathbox_duration", 60.0 )
}


































































void function GamemodeUtility_ManageDVSTweakOnPlayer_Thread()
{
#if DEV
		Assert( IsNewThread(), "Must be threaded off" )
#endif

	entity localPlayer = GetLocalClientPlayer()
	if ( !IsValid( localPlayer ) )
		return

	printt( "GAMEMODE UTILITY: " +  FUNC_NAME() + " is running for " + localPlayer )

	EndSignal( localPlayer, "OnDestroy" )

	OnThreadEnd(
		function() : ( localPlayer )
		{
			printt( "GAMEMODE UTILITY: GamemodeUtility_ManageDVSTweakOnPlayer_Thread is going to set LowerDVSForGameMode to false from thread end function" )
			GamemodeUtility_SetDVSSettingsForGamemode( false )
		}
	)

	
	if ( localPlayer.GetPlayerNetBool( "isJumpingWithSquad" ) || localPlayer.GetPlayerNetBool( "isJumpmaster" ) ||  GetGameState() < eGameState.Playing )
		localPlayer.WaitSignal( "DroppodLanded" )

	if ( GetGameState() < eGameState.WinnerDetermined )
	{
		printt( "GAMEMODE UTILITY: " +  FUNC_NAME() + " is going to set LowerDVSForGameMode to true ( player landed from free fall )" )
		GamemodeUtility_SetDVSSettingsForGamemode( true )
	}

	
	ClWaittillGameStateOrHigher( eGameState.WinnerDetermined )
}









void function GamemodeUtility_SetDVSSettingsForGamemode( bool shouldEnableForcedDVSSettings )
{
	printt( "GAMEMODE UTILITY: " +  FUNC_NAME() + " Running with shouldEnableForcedDVSSettings : " + shouldEnableForcedDVSSettings )

	
	if ( shouldEnableForcedDVSSettings && GamemodeUtility_GetShouldTweakDVSForGamemode() && !file.isLoweringDVSForGamemode )
	{
		LowerDVSForGameMode ( true )
		file.isLoweringDVSForGamemode = true
		printt( "GAMEMODE UTILITY: " +  FUNC_NAME() + " Set LowerDVSForGameMode to : true" )
	}

	
	if ( !shouldEnableForcedDVSSettings && file.isLoweringDVSForGamemode)
	{
		LowerDVSForGameMode ( false )
		file.isLoweringDVSForGamemode = false
		printt( "GAMEMODE UTILITY: " +  FUNC_NAME() + " Set LowerDVSForGameMode to : false" )
	}
}



bool function GamemodeUtility_GetIsTeamIndexValidPlayerTeam( int teamIndex )
{
	return TEAM_MULTITEAM_FIRST <= teamIndex && teamIndex < MAX_TEAMS + TEAM_MULTITEAM_FIRST
}


























































































bool function GetPlaylistVar_AllowThirdPerson()
{
	return GetCurrentPlaylistVarBool( "allow_third_person", false )
}


















array < entity > function GamemodeUtility_GetPlayerArrayOfTeamOrAlliance( int teamOrAlliance, bool shouldReturnLivingPlayersOnly )
{
	if ( shouldReturnLivingPlayersOnly )
		return AllianceProximity_IsUsingAlliances() ? AllianceProximity_GetAllPlayersInAlliance( teamOrAlliance, true ) : GetPlayerArrayOfTeam_Alive( teamOrAlliance )

	return AllianceProximity_IsUsingAlliances() ? AllianceProximity_GetAllPlayersInAlliance( teamOrAlliance, false ) : GetPlayerArrayOfTeam( teamOrAlliance )
}





int function GamemodeUtility_GetPlayerTeamOrAlliance( entity player )
{
	return AllianceProximity_IsUsingAlliances() ? AllianceProximity_GetAllianceFromTeam( player.GetTeam() ) : player.GetTeam()
}




int function GamemodeUtility_GetObjectiveProgressPercentIntFromFloat( float progressPercent )
{
	const int PERCENTAGE_MULTIPLIER = 100
	return int( progressPercent * PERCENTAGE_MULTIPLIER )
}












































array< vector > function GamemodeUtility_ParseStringOfVectors( string positionsRawString )
{
	array<string> positionStrings = GetTrimmedSplitString( positionsRawString, "," )
	array<vector> positions
	foreach( positionString in positionStrings )
	{
		vector pos = GamemodeUtility_ParseVectorString( positionString )
		positions.append( pos )
	}

	return positions
}

vector function GamemodeUtility_ParseVectorString( string vectorString )
{
	array< string > valuesAsStrings = GetTrimmedSplitString( vectorString, WHITESPACE_CHARACTERS )
	Assert( valuesAsStrings.len() == 3, "vectorString should have format \"x y z\"")

	vector vec = < float( valuesAsStrings[0] ), float( valuesAsStrings[1] ), float( valuesAsStrings[2] ) >
	return vec
}


array< float > function GamemodeUtility_ParseCircleString( string circleString )
{
	
	
	
	array< float > circleValuesArray
	
	array< string > circleStringValuesArray = GetTrimmedSplitString( circleString, "," )

	
	circleString            = GamemodeUtility_GetParsedStringForCircleValues( circleStringValuesArray )
	circleStringValuesArray = GetTrimmedSplitString( circleString, "<" )

	
	circleString            = GamemodeUtility_GetParsedStringForCircleValues( circleStringValuesArray )
	circleStringValuesArray = GetTrimmedSplitString( circleString, ">" )

	
	circleString            = GamemodeUtility_GetParsedStringForCircleValues( circleStringValuesArray )
	circleStringValuesArray = GetTrimmedSplitString( circleString, " " )

	
	foreach( item in circleStringValuesArray )
	{
		circleValuesArray.append( float( item ) )
	}

	return circleValuesArray
}


string function GamemodeUtility_GetParsedStringForCircleValues( array< string > stringValuesArray )
{
	string parsedPlaylistString = ""
	foreach( item in stringValuesArray )
	{
		parsedPlaylistString += " " + item
	}

	return parsedPlaylistString
}









