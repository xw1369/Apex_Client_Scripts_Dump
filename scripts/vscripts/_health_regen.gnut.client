global function HealthRegen_Init
global function HealthRegen_RegisterNetworking

global function HealthRegen_IsOctane

global function GetPlaylistVar_HealthRegenDelay
global function GetPlaylistVar_HealthRegenPerSec














const string NETVAR_PLAYER_REGEN_DAMAGE_TIME = "HealthRegen_PlayerRegenDamageTime"
const string NETVAR_PLAYER_REGEN_START_DELAY = "HealthRegen_PlayerRegenStartDelay"
const float  TIME_PLAYER_REGEN_START_INVALID = -1.0










































const string SIGNAL_PLAYER_REGEN_START_TIME_UPDATED = "HealthRegen_RegenTimeUpdated"
const string SIGNAL_PLAYER_REGEN_RUI_DESTROYED = "HealthRegen_RuiDestroyed"


struct
{









	var healthRegenRui

} file


void function HealthRegen_Init()
{














	if ( GetPlaylistVar_IsModeRegenActive() )
	{

		RegisterSignal( SIGNAL_PLAYER_REGEN_START_TIME_UPDATED )
		RegisterSignal( SIGNAL_PLAYER_REGEN_RUI_DESTROYED )

		AddCallback_OnClientScriptInit( HealthRegen_InitClient )
		AddCallback_GameStateEnter( eGameState.Postmatch, HealthRegen_OnGameState_Ending ) 

	}
}

void function HealthRegen_RegisterNetworking()
{
	RegisterNetworkedVariable( NETVAR_PLAYER_REGEN_DAMAGE_TIME, SNDC_PLAYER_EXCLUSIVE, SNVT_TIME, TIME_PLAYER_REGEN_START_INVALID )
	RegisterNetworkedVariable( NETVAR_PLAYER_REGEN_START_DELAY, SNDC_PLAYER_EXCLUSIVE, SNVT_TIME, TIME_PLAYER_REGEN_START_INVALID )


	RegisterNetVarTimeChangeCallback( NETVAR_PLAYER_REGEN_DAMAGE_TIME, void function( entity player, float newVal ) : ()
	{
		Signal( clGlobal.signalDummy, SIGNAL_PLAYER_REGEN_START_TIME_UPDATED )
	} )
	RegisterNetVarTimeChangeCallback( NETVAR_PLAYER_REGEN_START_DELAY, void function( entity player, float newVal ) : ()
	{
		Signal( clGlobal.signalDummy, SIGNAL_PLAYER_REGEN_START_TIME_UPDATED )
	} )

}























































































































































































































































































































































































































































































































































































































































































































































































void function HealthRegen_InitClient( entity player )
{
	if ( !GetPlaylistVar_IsModeRegenActive() )
		return

	HealthRegen_RUICreate()
	thread HealthRegen_RunClientLifetime_Thread()
}



void function HealthRegen_RUICreate()
{
	if ( file.healthRegenRui != null )
		return

	file.healthRegenRui = CreateCockpitPostFXRui( $"ui/armor_shieldregen.rpak", MINIMAP_Z_BASE )

	RuiSetFloat( file.healthRegenRui, "maxRegenDelay", GetPlaylistVar_HealthRegenDelay() )
	RuiSetBool( file.healthRegenRui, "upgradeCoreEnabled", UpgradeCore_IsEnabled() )
	RuiSetImage( file.healthRegenRui, "typeIcon", $"rui/hud/unitframes/healthRegen_icon" )
	RuiSetFloat3( file.healthRegenRui, "armorColor", SrgbToLinear( <166, 72, 71> / 255.0 ) )
	RuiSetBool( file.healthRegenRui, "isHealthRegen", true )
	RuiSetBool( file.healthRegenRui, "isDamaged", false )
}



void function HealthRegen_OnGameState_Ending()
{
	Signal( clGlobal.signalDummy, SIGNAL_PLAYER_REGEN_RUI_DESTROYED )

	if ( file.healthRegenRui == null )
		return

	RuiDestroyIfAlive( file.healthRegenRui )
	file.healthRegenRui = null
}



void function HealthRegen_RunClientLifetime_Thread()
{
	EndSignal( clGlobal.signalDummy, SIGNAL_PLAYER_REGEN_RUI_DESTROYED )

	while ( true )
	{
		WaitSignal( clGlobal.signalDummy, SIGNAL_PLAYER_REGEN_START_TIME_UPDATED )

		if ( file.healthRegenRui == null )
			continue

		entity player = GetLocalViewPlayer()
		float damageTime = player.GetPlayerNetTime( NETVAR_PLAYER_REGEN_DAMAGE_TIME )
		float regenStartDelay = player.GetPlayerNetTime( NETVAR_PLAYER_REGEN_START_DELAY )

		if ( regenStartDelay == TIME_PLAYER_REGEN_START_INVALID )
		{
			RuiSetBool( file.healthRegenRui, "isDamaged", false )
			continue
		}

		RuiSetBool( file.healthRegenRui, "isDamaged", true )
		RuiSetGameTime( file.healthRegenRui, "lastDamageTime", damageTime )
		RuiSetFloat( file.healthRegenRui, "regenDelay", regenStartDelay )
	}
}


bool function HealthRegen_IsOctane( entity player )
{
	return ( player.GetPlayerSettings() == $"settings/player/mp/pilot_survival_stim.rpak" )
}

bool function HealthRegen_IsWattson( entity player )
{
	return ( player.GetPlayerSettings() == $"settings/player/mp/pilot_survival_barricade.rpak" )
}

bool function GetPlaylistVar_OtherHealingStartsRegen()
{
	return GetCurrentPlaylistVarBool( "mode_health_regen_starts_from_heal", false )
}

float function GetPlaylistVar_HealthRegenDelay()
{
	return GetCurrentPlaylistVarFloat( "mode_health_regen_delay", 6.0 )
}

float function GetPlaylistVar_HealthRegenPerSec()
{
	return GetCurrentPlaylistVarFloat( "mode_health_regen_amount", 10.0 )
}

bool function GetPlaylistVar_KillStartsRegen()
{
	return GetCurrentPlaylistVarBool( "mode_health_regen_starts_from_kill", false )
}

bool function GetPlaylistVar_IsModeRegenActive()
{
	return GetCurrentPlaylistVarBool( "mode_health_regen_active", false )
}