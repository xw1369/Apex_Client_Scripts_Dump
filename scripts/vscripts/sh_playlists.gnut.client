



global function GetCurrentPlaylistVarTimestamp

global function GetMaxTeamSizeForPlaylist
global function GetPlaylistMaps

global function ForceRefreshVisiblePlaylists
global function GetVisiblePlaylistNames
global function GetPlaylistModNames
global function GetPlaylistIndexForName
global function Playlist_GetLTMSlotPlaylist
global function Playlist_GetNewModeVersion
global function Playlist_GetPlaylistScheduledTimeRange
global function Playlist_GetScheduleData_Deprecated
global function Playlist_ShouldBeHiddenForScheduleBlocks
global function Playlist_GetRankedSeasonEndDate
global function Playlist_HasRankedSeasonEndDate
global function Playlist_ShouldLockRankedPlaylistForPatch
global function Playlist_IsPastRankedSeasonEndDate
global function ShPlaylist_Init
global function GetPlaylistRotationGroup



global function CanPlaylistFitPartySize
global function GetModeEmblemImage
global function GetModeBannerLogo
global function GetModeBannerLogoOrModeEmblemFallback
global function GetImageFromImageMap
global function GetThumbnailImageFromImageMap
global function GetGamemodeLogoFromImageMap
global function GetImageFromMiniIconMap
global function GetBinkFromBinkMap
















#if DEV
global function PrintPlaylists
#endif



global const table<string, asset> GAMEMODE_IMAGE_MAP = {
	play_apex = $"rui/menu/gamemode/play_apex",
	apex_elite = $"rui/menu/gamemode/apex_elite",
	training = $"rui/menu/gamemode/playlist_bg_med_training",



	firing_range = $"rui/menu/gamemode/playlist_bg_med_firing_range",
	generic_01 = $"rui/menu/gamemode/generic_01",
	generic_02 = $"rui/menu/gamemode/generic_02",
	ranked_1 = $"rui/menu/gamemode/playlist_bg_kc_mu2_ranked",
	ranked_2 = $"rui/menu/gamemode/playlist_bg_worldsedge_ranked",
	ranked_3 = $"rui/menu/gamemode/playlist_bg_olympus_mu2_ranked",
	ranked_4 = $"rui/menu/gamemode/playlist_bg_storm_point_ranked",
	ranked_5 = $"rui/menu/gamemode/playlist_bg_divided_moon_ranked",
	ranked_6 = $"rui/menu/gamemode/playlist_bg_storm_point_ranked_mu2",
	solo_iron_crown = $"rui/menu/gamemode/solo_iron_crown",
	solo = $"rui/menu/gamemode/solo_iron_crown",
	duos = $"rui/menu/gamemode/duos_v2",

		duos_valentines = $"rui/menu/gamemode/duos_valentines",

	trios = $"rui/menu/gamemode/trios",


		trios_halloween = $"rui/menu/gamemode/trios_halloween",



		trios_golden_horse = $"rui/menu/gamemode/trios_GH_small",


	panel_worlds_edge = $"rui/menu/gamemode/playlist_bg_worldsedge_vanilla",
	panel_worlds_edge_mu1 = $"rui/menu/gamemode/playlist_bg_worldsedge_mu3",
	panel_worlds_edge_mu2 = $"rui/menu/gamemode/playlist_bg_worldsedge_mu3",
	panel_worlds_edge_mu3 = $"rui/menu/gamemode/playlist_bg_worldsedge_mu3",
	panel_worlds_edge_night = $"rui/menu/gamemode/playlist_bg_worldsedge_night",

	panel_olympus = $"rui/menu/gamemode/playlist_bg_olympus",
	panel_olympus_mu1 = $"rui/menu/gamemode/playlist_bg_olympus_mu1",
	panel_olympus_mu2 = $"rui/menu/gamemode/playlist_bg_olympus_mu2",
	panel_olympus_night = $"rui/menu/gamemode/playlist_bg_olympus_night",

	canyon_land_mu1 = $"rui/menu/gamemode/play_apex",
	panel_canyon_land = $"rui/menu/gamemode/playlist_bg_kc_vanilla",
	panel_canyon_land_mu1 = $"rui/menu/gamemode/playlist_bg_kc",
	panel_canyon_land_mu2 = $"rui/menu/gamemode/playlist_bg_kc_mu2",
	panel_canyon_land_mu3 = $"rui/menu/gamemode/playlist_bg_kc_mu3",
	panel_canyon_land_mu3_hu1 = $"rui/menu/gamemode/playlist_bg_kc_mu3_hu1",
	panel_canyon_land_night = $"rui/menu/gamemode/playlist_bg_kc_night",
	panel_canyon_land_night2 = $"rui/menu/gamemode/playlist_bg_kc_night2",

	panel_storm_point = $"rui/menu/gamemode/playlist_bg_storm_point",
	panel_storm_point_mu1 = $"rui/menu/gamemode/playlist_bg_storm_point_mu1",
	panel_storm_point_mu2 = $"rui/menu/gamemode/playlist_bg_storm_point_mu2",

	panel_divided_moon = $"rui/menu/gamemode/playlist_bg_divided_moon",
	panel_divided_moon_mu1 = $"rui/menu/gamemode/playlist_bg_divided_moon_mu1",

	shotguns_and_snipers = $"rui/menu/gamemode/playlist_bg_shotguns_and_snipers",
	panel_worlds_edge_mu2_airdrop = $"rui/menu/gamemode/playlist_bg_worldsedge_airdrop",
	panel_olympus_airdrop = $"rui/menu/gamemode/playlist_bg_olympus_airdrop",
	panel_canyon_land_mu2_airdrop = $"rui/menu/gamemode/playlist_bg_kc_mu2_airdrop",
	duos_airdrop = $"rui/menu/gamemode/duos_v2",
	trios_airdrop = $"rui/menu/gamemode/trios",

	panel_thunderdome = $"rui/menu/gamemode/playlist_bg_thunderdome",





		shadow_royale = $"rui/menu/gamemode/playlist_bg_shadow_royale",


		winter_express = $"rui/menu/gamemode/playlist_bg_winterexpress",


		tournament = $"rui/menu/gamemode/tournament",

















	live_die_live = $"rui/menu/gamemode/live_die_live",
	third_person = $"rui/menu/gamemode/third_person",
	always_be_closing = $"rui/menu/gamemode/always_be_closing",
	night = $"rui/menu/gamemode/night",
	dummies = $"rui/menu/gamemode/dummies",
	deja_loot = $"rui/menu/gamemode/deja_loot",

		campfire = $"rui/menu/gamemode/flashpoint",
		campfire_oly = $"rui/menu/gamemode/playlist_bg_olympus_mu2_flashpoint",

	explore_mode = $"rui/menu/gamemode/playlist_bg_olympus_explore",






















		control_barometer = $"rui/menu/gamemode/playlist_bg_control_barometer",
		control_hammond_labs = $"rui/menu/gamemode/playlist_bg_control_hammond_labs",
		control_caustic_tt = $"rui/menu/gamemode/playlist_bg_control_caustic_tt",
		control_lava_siphon = $"rui/menu/gamemode/playlist_bg_control_lava_siphon",
		control_hammond_labs_night = $"rui/menu/gamemode/playlist_bg_control_hammond_labs_night",
		control_moon_production_yard = $"rui/menu/gamemode/playlist_bg_divided_moon_production_yard",


		gungame_skull_town = $"rui/menu/gamemode/playlist_bg_gungame_skull_town",
		gungame_fragment_east = $"rui/menu/gamemode/playlist_bg_gungame_fragment_east",
		gungame_estates_night = $"rui/menu/gamemode/playlist_bg_gungame_estates_night",
		gungame_the_wall = $"rui/menu/gamemode/playlist_bg_gungame_the_wall",
		gungame_estates_day = $"rui/menu/gamemode/playlist_bg_gungame_estates_day",


		hardcore_olympus = $"rui/menu/gamemode/playlist_bg_hardcore_olympus",
		hardcore_divided_moon = $"rui/menu/gamemode/playlist_bg_hardcore_divided_moon",
		hardcore_worlds_edge = $"rui/menu/gamemode/playlist_bg_hardcore_worlds_edge",

		tdm_party_crasher = $"rui/menu/gamemode/playlist_bg_arena_party_crasher",
		tdm_overflow = $"rui/menu/gamemode/playlist_bg_arena_overflow",
		tdm_habitat = $"rui/menu/gamemode/playlist_bg_arena_habitat",
		mixtape_phase_runner = $"rui/menu/gamemode/playlist_bg_arena_phase_runner",
		mixtape_moon_core = $"rui/menu/gamemode/playlist_bg_divided_moon_the_core",



		mixtape_wattson = $"rui/menu/gamemode/playlist_bg_mixtape_wattson",
		mixtape_amps = $"rui/menu/gamemode/playlist_bg_mixtape_amps",



		heatwave_storm_point = $"rui/menu/gamemode/playlist_bg_heatwave_storm_point",
		heatwave_divided_moon = $"rui/menu/gamemode/playlist_bg_heatwave_divided_moon",

	s17_chronicle = $"rui/menu/gamemode/playlist_bg_s17_chronicle",

		strikeout_divided_moon = $"rui/menu/gamemode/playlist_bg_strikeout_divided_moon",
		strikeout_olympus_mu2 = $"rui/menu/gamemode/playlist_bg_strikeout_olympus_mu2",
		strikeout_storm_point_mu2 = $"rui/menu/gamemode/playlist_bg_strikeout_storm_point_mu2",
		strikeout_canyonlands_hu = $"rui/menu/gamemode/playlist_bg_strikeout_kings_canyon",
		strikeout_desertlands_hu = $"rui/menu/gamemode/playlist_bg_strikeout_worlds_edge",


		shadow_army = $"rui/menu/gamemode/playlist_bg_shadowarmy"
		shadow_army_cine = $"rui/menu/gamemode/playlist_bg_shadowarmy_cine",
		training_event_locked = $"rui/menu/gamemode/playlist_bg_training_event_locked",
		firing_range_event_locked = $"rui/menu/gamemode/playlist_bg_firing_range_event_locked",
		duos_event_locked = $"rui/menu/gamemode/playlist_bg_duos_event_locked",
		trios_event_locked = $"rui/menu/gamemode/playlist_bg_trios_event_locked",
		play_apex_panel_locked = $"rui/menu/gamemode/playlist_bg_play_apex_panel_locked",
		mixtape_locked = $"rui/menu/gamemode/playlist_bg_mixtape_event_locked",



		trios_bounty_hunt = $"rui/menu/gamemode/playlist_bg_thehunt_trios",
		duos_bounty_hunt = $"rui/menu/gamemode/playlist_bg_thehunt_duos",



		survival_solos = $"rui/menu/gamemode/playlist_bg_survival_solos",



		survival_quads = $"rui/menu/gamemode/playlist_bg_survival_quads",



		bigtdm = $"rui/menu/gamemode/playlist_bg_arena_phase_runner",



		mixtape_treasurehunt_thunderdome = $"rui/menu/gamemode/treasure_hunt/playlist_bg_treasurehunt_thunderdome",
		mixtape_treasurehunt_skulltown = $"rui/menu/gamemode/treasure_hunt/playlist_bg_treasurehunt_skulltown",
		mixtape_treasurehunt_storm_point_mu2 = $"rui/menu/gamemode/treasure_hunt/playlist_bg_treasurehunt_storm_point_mu2",
		mixtape_treasurehunt_monument = $"rui/menu/gamemode/treasure_hunt/playlist_bg_treasurehunt_monument",







}

global const table<string, asset> GAMEMODE_THUMBNAIL_IMAGE_MAP = {
	play_apex = $"rui/menu/gamemode/play_apex",
	apex_elite = $"rui/menu/gamemode/apex_elite",
	training = $"rui/menu/gamemode/playlist_bg_sq_training",



	firing_range = $"rui/menu/gamemode/playlist_bg_sq_firing_range",
	generic_01 = $"rui/menu/gamemode/generic_01",
	generic_02 = $"rui/menu/gamemode/generic_02",
	ranked_1 = $"rui/menu/gamemode/playlist_bg_sq_kc_mu2_ranked",
	ranked_2 = $"rui/menu/gamemode/playlist_bg_sq_worldsedge_ranked",
	ranked_3 = $"rui/menu/gamemode/playlist_bg_sq_olympus_mu2_ranked",
	ranked_4 = $"rui/menu/gamemode/playlist_bg_sq_storm_point_ranked",
	ranked_5 = $"rui/menu/gamemode/playlist_bg_sq_divided_moon_ranked",
	ranked_6 = $"rui/menu/gamemode/playlist_bg_sq_storm_point_ranked_mu2",
	solo_iron_crown = $"rui/menu/gamemode/solo_iron_crown",
	solo = $"rui/menu/gamemode/solo_iron_crown",
	duos = $"rui/menu/gamemode/playlist_bg_sq_duos",

		duos_valentines = $"rui/menu/gamemode/playlist_bg_sq_duos_valentines",


	trios = $"rui/menu/gamemode/playlist_bg_sq_trios",


		trios_halloween = $"rui/menu/gamemode/playlist_bg_sq_trios_halloween",



		trios_golden_horse = $"rui/menu/gamemode/playlist_bg_sq_trios_golden_horse",


	panel_worlds_edge = $"rui/menu/gamemode/playlist_bg_sq_worldsedge_mu3",
	panel_worlds_edge_mu1 = $"rui/menu/gamemode/playlist_bg_sq_worldsedge_mu3",
	panel_worlds_edge_mu2 = $"rui/menu/gamemode/playlist_bg_sq_worldsedge_mu3",
	panel_worlds_edge_mu3 = $"rui/menu/gamemode/playlist_bg_sq_worldsedge_mu3",
	panel_worlds_edge_night = $"rui/menu/gamemode/playlist_bg_sq_worldsedge_night",

	panel_olympus = $"rui/menu/gamemode/playlist_bg_sq_olympus_mu2",
	panel_olympus_mu1 = $"rui/menu/gamemode/playlist_bg_sq_olympus_mu2",
	panel_olympus_mu2 = $"rui/menu/gamemode/playlist_bg_sq_olympus_mu2",
	panel_olympus_night = $"rui/menu/gamemode/playlist_bg_sq_olympus_night",

	canyon_land_mu1 = $"rui/menu/gamemode/play_apex",
	panel_canyon_land = $"rui/menu/gamemode/playlist_bg_sq_kc_mu3_hu1",
	panel_canyon_land_mu1 = $"rui/menu/gamemode/playlist_bg_sq_kc_mu3_hu1",
	panel_canyon_land_mu2 = $"rui/menu/gamemode/playlist_bg_sq_kc_mu3_hu1",
	panel_canyon_land_mu3 = $"rui/menu/gamemode/playlist_bg_sq_kc_mu3_hu1",
	panel_canyon_land_mu3_hu1 = $"rui/menu/gamemode/playlist_bg_sq_kc_mu3_hu1"
	panel_canyon_land_night = $"rui/menu/gamemode/playlist_bg_kc_night",
	panel_canyon_land_night2 = $"rui/menu/gamemode/playlist_bg_sq_kc_night2",

	panel_storm_point = $"rui/menu/gamemode/playlist_bg_sq_storm_point_mu1",
	panel_storm_point_mu1 = $"rui/menu/gamemode/playlist_bg_sq_storm_point_mu1",
	panel_storm_point_mu2 = $"rui/menu/gamemode/playlist_bg_sq_storm_point_mu2",

	panel_divided_moon = $"rui/menu/gamemode/playlist_bg_sq_divided_moon",
	panel_divided_moon_mu1 = $"rui/menu/gamemode/playlist_bg_sq_divided_moon_mu1",

	shotguns_and_snipers = $"rui/menu/gamemode/playlist_bg_sq_shotguns_and_snipers",
	panel_worlds_edge_mu2_airdrop = $"rui/menu/gamemode/playlist_bg_worldsedge_airdrop",
	panel_olympus_airdrop = $"rui/menu/gamemode/playlist_bg_olympus_airdrop",
	panel_canyon_land_mu2_airdrop = $"rui/menu/gamemode/playlist_bg_kc_mu2_airdrop",
	duos_airdrop = $"rui/menu/gamemode/playlist_bg_sq_duos",
	trios_airdrop = $"rui/menu/gamemode/playlist_bg_sq_trios",

	panel_thunderdome = $"rui/menu/gamemode/playlist_bg_sq_thunderdome",





		shadow_royale = $"rui/menu/gamemode/playlist_bg_sq_shadow_royale",


		winter_express = $"rui/menu/gamemode/playlist_bg_sq_winterexpress",


		tournament = $"rui/menu/gamemode/tournament",

















	live_die_live = $"rui/menu/gamemode/live_die_live",
	third_person = $"rui/menu/gamemode/third_person",
	always_be_closing = $"rui/menu/gamemode/always_be_closing",
	night = $"rui/menu/gamemode/night",
	dummies = $"rui/menu/gamemode/dummies",
	deja_loot = $"rui/menu/gamemode/deja_loot",

		campfire = $"rui/menu/gamemode/flashpoint",
		campfire_oly = $"rui/menu/gamemode/playlist_bg_sq_olympus_mu2_flashpoint",

	explore_mode = $"rui/menu/gamemode/playlist_bg_olympus_explore",





















		control_barometer = $"rui/menu/gamemode/playlist_bg_sq_control_barometer",
		control_hammond_labs = $"rui/menu/gamemode/playlist_bg_sq_control_hammond_labs",
		control_caustic_tt = $"rui/menu/gamemode/playlist_bg_sq_control_caustic_tt",
		control_lava_siphon = $"rui/menu/gamemode/playlist_bg_sq_control_lava_siphon",
		control_hammond_labs_night = $"rui/menu/gamemode/playlist_bg_sq_control_hammond_labs_night",
		control_moon_production_yard = $"rui/menu/gamemode/playlist_bg_sq_divided_moon_production_yard",



		gungame_skull_town = $"rui/menu/gamemode/playlist_bg_sq_gungame_skull_town",
		gungame_fragment_east = $"rui/menu/gamemode/playlist_bg_sq_gungame_fragment_east",
		gungame_estates_night = $"rui/menu/gamemode/playlist_bg_sq_gungame_estates_night",
		gungame_the_wall = $"rui/menu/gamemode/playlist_bg_sq_gungame_the_wall",
		gungame_estates_day = $"rui/menu/gamemode/playlist_bg_sq_gungame_estates_day",


		hardcore_olympus = $"rui/menu/gamemode/playlist_bg_sq_hardcore_olympus",
		hardcore_divided_moon = $"rui/menu/gamemode/playlist_bg_sq_hardcore_divided_moon",
		hardcore_worlds_edge = $"rui/menu/gamemode/playlist_bg_sq_hardcore_worlds_edge",


		tdm_party_crasher = $"rui/menu/gamemode/playlist_bg_sq_arena_party_crasher",
		tdm_overflow = $"rui/menu/gamemode/playlist_bg_sq_arena_overflow",
		tdm_habitat = $"rui/menu/gamemode/playlist_bg_sq_arena_habitat",
		mixtape_phase_runner = $"rui/menu/gamemode/playlist_bg_sq_arena_phase_runner",
		mixtape_moon_core = $"rui/menu/gamemode/playlist_bg_sq_divided_moon_the_core",



		mixtape_wattson = $"rui/menu/gamemode/playlist_bg_sq_mixtape_wattson",
		mixtape_amps = $"rui/menu/gamemode/playlist_bg_sq_mixtape_amps",



		heatwave_storm_point = $"rui/menu/gamemode/playlist_bg_sq_heatwave_storm_point",
		heatwave_divided_moon = $"rui/menu/gamemode/playlist_bg_sq_heatwave_divided_moon",


	s17_chronicle = $"rui/menu/gamemode/playlist_bg_sq_s17_chronicle",


		strikeout_divided_moon = $"rui/menu/gamemode/playlist_bg_sq_strikeout_divided_moon",
		strikeout_olympus_mu2 = $"rui/menu/gamemode/playlist_bg_sq_strikeout_olympus_mu2",
		strikeout_storm_point_mu2 = $"rui/menu/gamemode/playlist_bg_sq_strikeout_storm_point_mu2",
		strikeout_canyonlands_hu = $"rui/menu/gamemode/playlist_bg_sq_strikeout_kings_canyon",
		strikeout_desertlands_hu = $"rui/menu/gamemode/playlist_bg_sq_strikeout_worlds_edge",



		shadow_army = $"rui/menu/gamemode/playlist_bg_sq_shadowarmy",
		shadow_army_cine = $"rui/menu/gamemode/playlist_bg_sq_shadowarmy_cine",
		event_locked = $"rui/menu/gamemode/playlist_bg_sq_event_locked",



		trios_bounty_hunt = $"rui/menu/gamemode/playlist_bg_sq_thehunt_trios",
		duos_bounty_hunt = $"rui/menu/gamemode/playlist_bg_sq_thehunt_duos",



		survival_solos = $"rui/menu/gamemode/playlist_bg_sq_survival_solos",



		survival_quads = $"rui/menu/gamemode/playlist_bg_sq_survival_quads",



		bigtdm = $"rui/menu/gamemode/playlist_bg_sq_arena_phase_runner",



		mixtape_treasurehunt_thunderdome = $"rui/menu/gamemode/treasure_hunt/playlist_bg_sq_treasurehunt_thunderdome",
		mixtape_treasurehunt_skulltown = $"rui/menu/gamemode/treasure_hunt/playlist_bg_sq_treasurehunt_skulltown",
		mixtape_treasurehunt_storm_point_mu2 = $"rui/menu/gamemode/treasure_hunt/playlist_bg_sq_treasurehunt_storm_point_mu2",
		mixtape_treasurehunt_monument = $"rui/menu/gamemode/treasure_hunt/playlist_bg_sq_treasurehunt_monument",







}

global const table<string, asset> GAMEMODE_MINI_ICON_MAP = {
	airdrop = $"rui/menu/gamemode_emblem/airdrop_takeover",
}

global const string GAMEMODE_DEFAULT_LOGO_NAME = "BATTLE_ROYALE"
global const asset GAMEMODE_LOGO_SHAREDMAP = $"settings/sharedmap/gamemode_logos.rpak"

const table<string, asset> GAMEMODE_BINK_MAP = {
	play_apex = $"media/gamemodes/play_apex.bik",
	apex_elite = $"media/gamemodes/apex_elite.bik",
	training = $"media/gamemodes/training.bik",
	generic_01 = $"media/gamemodes/generic_01.bik",
	generic_02 = $"media/gamemodes/generic_02.bik",
	ranked_1 = $"media/gamemodes/ranked_1.bik",
	ranked_2 = $"media/gamemodes/ranked_2.bik",
	ranked_3 = $"media/gamemodes/ranked_3.bik",
	solo_iron_crown = $"media/gamemodes/solo_iron_crown.bik",
	solo = $"media/gamemodes/solo_iron_crown.bik",
	duos = $"media/gamemodes/duos_v2.bik",
	trios = $"media/gamemodes/trios.bik",
	worlds_edge = $"media/gamemodes/worlds_edge.bik",
	worlds_edge_mu1 = $"media/gamemodes/worlds_edge_mu1.bik",
	canyon_land_mu1 = $"media/gamemodes/play_apex.bik",
	shotguns_and_snipers = $"media/gamemodes/shotguns_and_snipers.bik",




		shadow_royale = $"media/gamemodes/shadow_squad.bik",


		winter_express = $"media/gamemodes/winter_express.bik",


		tournament = $"media/gamemodes/play_apex.bik",

	live_die_live = $"media/gamemodes/live_die_live.bik",
	third_person = $"media/gamemodes/third_person.bik",
	always_be_closing = $"media/gamemodes/always_be_closing.bik",
	night = $"media/gamemodes/night.bik",
	dummies = $"media/gamemodes/dummies.bik",
	deja_loot = $"media/gamemodes/deja_loot.bik",

	campfire = $"media/gamemodes/campfire.bik",

}









global typedef PlaylistName string
global typedef PlaylistVarName string


global struct TimestampRange
{
	int startUnixTime 
	int endUnixTime 
}
global struct PlaylistScheduleData
{
	array<TimestampRange> blocks
	TimestampRange ornull currentBlock
	TimestampRange ornull nextBlock
}










struct CachedPlaylistData
{
	string name
	int    index

	PlaylistScheduleData& playlistSchedule
}

struct
{
	array<CachedPlaylistData> cachedPlaylistArray
	table<string, CachedPlaylistData> cachedPlaylistMap
	int lastCheckedTime = 0
	bool isOptInEnabled = false
	array<string> cachedPlaylistNames

} file










int ornull function GetCurrentPlaylistVarTimestamp( string varName, int defaultVal )
{
	return DateTimeStringToUnixTimestamp( GetCurrentPlaylistVarString( varName, string(defaultVal) ) )
}




int function GetMaxTeamSizeForPlaylist( PlaylistName playlistName )
{
	int maxTeamSize = GetPlaylistVarInt( playlistName, "max_team_size", 0 )
	if ( maxTeamSize > 0 )
		return maxTeamSize

	int maxPlayers = GetPlaylistVarInt( playlistName, "max_players", 0 )
	int maxTeams   = GetPlaylistVarInt( playlistName, "max_teams", 0 )
	if ( maxTeams == 0 )
		return maxPlayers
	return maxPlayers / maxTeams
}




array<string> function GetPlaylistMaps( PlaylistName playlistName )
{
	array<string> mapsArray

	int numModes = GetPlaylistGamemodesCount( playlistName )
	for ( int modeIndex = 0; modeIndex < numModes; modeIndex++ )
	{
		int numMaps = GetPlaylistGamemodeByIndexMapsCount( playlistName, modeIndex )
		for ( int mapIndex = 0; mapIndex < numMaps; mapIndex++ )
		{
			string mapName = GetPlaylistGamemodeByIndexMapByIndex( playlistName, modeIndex, mapIndex )
			if ( mapsArray.contains( mapName ) )
				continue

			mapsArray.append( mapName )
		}
	}

	return mapsArray
}




bool function CanPlaylistFitPartySize( PlaylistName playlistName, int partySize, bool sendOpenInvite )
{
	int maxPlayersPerTeam = GetMaxTeamSizeForPlaylist( playlistName )
	if ( partySize > maxPlayersPerTeam )
		return false

	if ( sendOpenInvite && maxPlayersPerTeam == 1 )
		return false

	bool partiesAllowed = GetPlaylistVarBool( playlistName, "parties_allowed", true )
	if ( !partiesAllowed )
	{
		if ( partySize > 1 )
			return false

		if ( sendOpenInvite )
			return false
	}

	return true
}

asset function GetImageFromMiniIconMap( string keyName )
{
	asset imageAsset = $"rui/menu/lobby/settings_icon"
	if ( keyName != "" )
	{
		if ( keyName in GAMEMODE_MINI_ICON_MAP )
			imageAsset = GAMEMODE_MINI_ICON_MAP[keyName]
		else
			Warning( "Invalid mini icon value for 'mini_icon': %s", keyName )
	}
	return imageAsset
}

asset function GetImageFromImageMap( string keyName )
{
	asset imageAsset = $"white"
	if ( keyName != "" )
	{
		if ( keyName in GAMEMODE_IMAGE_MAP )
			imageAsset = GAMEMODE_IMAGE_MAP[keyName]
		else
		{
#if DEV
				if ( GetConVarBool( "ui_automation_enabled" ) )
					return imageAsset 
#endif

			Warning( "Invalid playlist value for 'image': %s", keyName )
		}
	}
	return imageAsset
}

asset function GetThumbnailImageFromImageMap( string keyName )
{
	asset imageAsset = $"white"
	if ( keyName != "" )
	{
		if ( keyName in GAMEMODE_THUMBNAIL_IMAGE_MAP )
			imageAsset = GAMEMODE_THUMBNAIL_IMAGE_MAP[keyName]
		else
		{
#if DEV
				if ( GetConVarBool( "ui_automation_enabled" ) )
					return imageAsset 
#endif

			Warning( "Invalid playlist value for 'image': %s", keyName )
		}
	}
	return imageAsset
}

asset function GetGamemodeLogoFromImageMap( string keyName )
{
	asset imageAsset = $"white"
	if ( keyName != "" )
	{
		bool foundLogo = false
		var parentBlock = GetSettingsBlockForAsset( GAMEMODE_LOGO_SHAREDMAP )
		var arrField    = GetSettingsBlockArray( parentBlock, "gamemodeLogos" )

		foreach ( var entryBlock in IterateSettingsArray( arrField ) )
		{
			string modeName = GetSettingsBlockString( entryBlock, "mode" )

			if( modeName.tolower() == keyName.tolower() )
			{
				imageAsset = GetSettingsBlockAsset( entryBlock, "logo" )
				foundLogo = true
				break
			}
		}

		if ( !foundLogo )
		{
#if DEV
				if ( GetConVarBool( "ui_automation_enabled" ) )
					return imageAsset 
#endif

			Warning( "Invalid playlist value for 'image': %s", keyName )
		}
	}
	return imageAsset
}


asset function GetBinkFromBinkMap( string keyName )
{
	asset desiredVideoAsset = $""
	if ( keyName != "" )
	{
		if ( keyName in GAMEMODE_BINK_MAP )
			desiredVideoAsset = GAMEMODE_BINK_MAP[keyName]
		else
			Warning( "Invalid playlist value for 'video': %s", keyName )
	}
	return desiredVideoAsset
}




int function GetPlaylistIndexForName( PlaylistName playlistName )
{
	if ( playlistName in file.cachedPlaylistMap )
		return file.cachedPlaylistMap[playlistName].index

	return -1
}




bool function Playlist_PlaylistHasSchedule( string playlistName )
{












		PlaylistScheduleData scheduleData = Playlist_GetScheduleData_Deprecated( playlistName )
		return scheduleData.blocks.len() > 0


	return false
}

TimestampRange ornull function Playlist_GetPlaylistScheduledTimeRange( string playlistName )
{















		PlaylistScheduleData scheduleData = Playlist_GetScheduleData_Deprecated( playlistName )
		return scheduleData.currentBlock


	return null
}



PlaylistScheduleData function Playlist_GetScheduleData_Deprecated( string plName )
{
	if ( plName in file.cachedPlaylistMap )
	{
		
		if ( file.cachedPlaylistMap[plName].playlistSchedule.currentBlock == null && file.cachedPlaylistMap[plName].playlistSchedule.nextBlock == null )
			return file.cachedPlaylistMap[plName].playlistSchedule

		if ( file.cachedPlaylistMap[plName].playlistSchedule.currentBlock != null )
		{
			
			TimestampRange currentBlock = expect TimestampRange( file.cachedPlaylistMap[plName].playlistSchedule.currentBlock )
			if ( currentBlock.endUnixTime > GetUnixTimestamp() )
				return file.cachedPlaylistMap[plName].playlistSchedule	
		}

		if ( file.cachedPlaylistMap[plName].playlistSchedule.nextBlock != null )
		{
			
			TimestampRange nextBlock = expect TimestampRange( file.cachedPlaylistMap[plName].playlistSchedule.nextBlock )
			if ( nextBlock.startUnixTime > GetUnixTimestamp() )
				return file.cachedPlaylistMap[plName].playlistSchedule	
		}

		file.cachedPlaylistMap[plName].playlistSchedule = Playlist_GetNonCachedScheduleData( plName )
		return file.cachedPlaylistMap[plName].playlistSchedule	
	}

	return Playlist_GetNonCachedScheduleData( plName )
}

PlaylistScheduleData function Playlist_GetNonCachedScheduleData( string plName )
{
	PlaylistScheduleData data

	int utNow = GetUnixTimestamp()
	const int MAX_SCHEDULE_BLOCKS_PER_PLAYLIST = 5
	for ( int blockIdx = 0; blockIdx < MAX_SCHEDULE_BLOCKS_PER_PLAYLIST + 1; ++blockIdx )
	{
		
		string varName = format( "visible_schedule_block_%d", blockIdx )
		string varVal  = GetPlaylistVarString( plName, varName, "" )
		if ( varVal.len() == 0 )
		{
			continue
		}
		else if ( blockIdx >= MAX_SCHEDULE_BLOCKS_PER_PLAYLIST )
		{
			Assert( false, format( "Only %d visible blocks are supported per playlist, but we tried to specify more for playlist '%s': \"%s\" \"^s\"", MAX_SCHEDULE_BLOCKS_PER_PLAYLIST, plName, varName, varVal ) )
			break
		}

		array<string> fields = GetTrimmedSplitString( varVal, "|" )

		int ornull startTime = null
		int ornull endTime   = null

		if ( fields.len() != 2 )
		{
			Assert( false, format( "Bad format in playlist '%s' for setting '%s': '%s'", plName, varName, varVal ) )
			break
		}

		startTime = DateTimeStringToUnixTimestamp( fields[0] )
		endTime = DateTimeStringToUnixTimestamp( fields[1] )

		if ( startTime == null || endTime == null )
		{
			Assert( false, format( "Bad format in playlist '%s' for setting '%s': '%s'", plName, varName, varVal ) )
			break
		}

		TimestampRange block
		block.startUnixTime = expect int( startTime )
		block.endUnixTime = expect int( endTime )










		data.blocks.append( block )


		if ( utNow >= block.startUnixTime && utNow < block.endUnixTime )
		{
			Assert( data.currentBlock == null, format( "Playlist '%s' has two visible schedule blocks that overlap. One of them is: \"%s\" \"%s\"", plName, varName, varVal ) )
			data.currentBlock = block
		}
		else if ( block.startUnixTime > utNow )
		{
			if ( data.nextBlock == null || block.startUnixTime < (expect TimestampRange(data.nextBlock)).startUnixTime )
				data.nextBlock = block
		}
	}

	return data
}




bool function Playlist_ShouldBeHiddenForScheduleBlocks( string plName )
{
	PlaylistScheduleData scheduleData = Playlist_GetScheduleData_Deprecated( plName )
	if ( scheduleData.blocks.len() > 0 )
	{
		if ( scheduleData.currentBlock == null )
			return true

		TimestampRange currentBlock = expect TimestampRange( scheduleData.currentBlock )
		if ( currentBlock.startUnixTime > GetUnixTimestamp() || currentBlock.endUnixTime < GetUnixTimestamp() )
			return true
	}

	return false
}

bool function Playlist_HasRankedSeasonEndDate()
{
	return Playlist_GetRankedSeasonEndDate() != null
}

int ornull function Playlist_GetRankedSeasonEndDate()
{
	string varVal = GetCurrentPlaylistVarString( "ranked_season_end_date", "" )
	if ( varVal.len() > 0 )
	{
		return DateTimeStringToUnixTimestamp( varVal )
	}

	return null
}

bool function Playlist_ShouldLockRankedPlaylistForPatch( string plName )
{
	if ( !Playlist_HasRankedSeasonEndDate() )
		return false

	if ( Playlist_PlaylistHasSchedule( plName ) )
	{
		TimestampRange ornull currentBlockOrNull = Playlist_GetPlaylistScheduledTimeRange( plName )
		if ( currentBlockOrNull == null )
			return true

		TimestampRange currentBlock = expect TimestampRange( currentBlockOrNull )

		bool outsideCurrentBlock = currentBlock.startUnixTime > GetUnixTimestamp() || currentBlock.endUnixTime < GetUnixTimestamp()
		bool pastEndDate = Playlist_IsPastRankedSeasonEndDate()

		
		if ( outsideCurrentBlock && !pastEndDate )
			return true
	}

	return false
}

bool function Playlist_IsPastRankedSeasonEndDate()
{
	int ornull seasonEndTime = Playlist_GetRankedSeasonEndDate()
	if ( seasonEndTime != null )
	{
		expect int( seasonEndTime )
		int current = GetUnixTimestamp()
		return GetUnixTimestamp() >= seasonEndTime
	}

	return false
}




void function ShPlaylist_Init()
{







	ShPlaylist_CacheData()
}

void function ShPlaylist_CacheData()
{
	PrintFunc()
	file.cachedPlaylistArray = []
	file.cachedPlaylistMap = {}

	int numPlaylists = GetPlaylistCount()
	file.cachedPlaylistArray.resize( numPlaylists )

	for ( int index = 0; index < numPlaylists; index++ )
	{
		CachedPlaylistData playlistData
		string name = string( GetPlaylistName( index ) )

		playlistData.name = name
		playlistData.index = index

		playlistData.playlistSchedule = Playlist_GetScheduleData_Deprecated( name )

		file.cachedPlaylistArray[index] = playlistData
		file.cachedPlaylistMap[name] <- playlistData
	}
	Boost_OnPlaylistsRegistered()
}














array<string> function GetPlaylistModNames()
{
	array<string> list = []
	int numMods = GetPlaylistModCount()

	list.resize( numMods )
	for ( int modIter = 0; modIter != numMods; modIter++ )
		list[modIter] = string( GetPlaylistModName( modIter ) )

	return list
}

void function ForceRefreshVisiblePlaylists()
{
	file.lastCheckedTime = 0
}

array<string> function GetVisiblePlaylistNames( bool isPrivateMatchQuery = false )
{
	bool shouldDisplayOptInOptions = false
	bool shouldCache = true









	
	int timeSinceLastChecked = ( GetUnixTimestamp() - file.lastCheckedTime )
	int checkInterval = GetCurrentPlaylistVarInt( "visible_playlist_refresh_time_sec", shouldCache ? 10 : 1 )
	if ( timeSinceLastChecked >= 0 && file.isOptInEnabled == shouldDisplayOptInOptions && timeSinceLastChecked < checkInterval )
		return file.cachedPlaylistNames

	file.lastCheckedTime = GetUnixTimestamp()
	file.isOptInEnabled = shouldDisplayOptInOptions

	if ( GetPlaylistCount() != file.cachedPlaylistArray.len() )
		Warning( "Playlist count mismatch: cache (%d) != actual (%d)", file.cachedPlaylistArray.len(), GetPlaylistCount() )

	string forcedVisiblePlaylistsString = GetConVarString( "match_visiblePlaylists" )

	array<string> forcedVisiblePlaylists = split( forcedVisiblePlaylistsString, WHITESPACE_CHARACTERS )

	array<string> list      = []
	array<string> optInList = []
	for ( int i = 0; i < file.cachedPlaylistArray.len(); i++ )
	{
		CachedPlaylistData playlistData = file.cachedPlaylistArray[i]

		if ( forcedVisiblePlaylists.contains( playlistData.name ) )
		{
			list.append( playlistData.name )
			continue
		}

		bool inActiveRotation = IsPlaylistInActiveRotation( playlistData.name )
		if ( !GetPlaylistVarBool( playlistData.name, "visible", false ) && !inActiveRotation )
			continue
		if ( GetPlaylistVarBool( playlistData.name, "hub_only", false ) )
			continue
		if ( GetPlaylistVarBool( playlistData.name, "pve_only", false ) )    
			continue
		if ( GetPlaylistVarBool( playlistData.name, "private_match", false )  != isPrivateMatchQuery )
			continue

		if ( GetPlaylistVarBool( playlistData.name, "opt_in_only", false ) )
		{
			if ( shouldDisplayOptInOptions )
				optInList.append( playlistData.name )
			continue
		}

		if ( IsPlaylistBeingRotated( playlistData.name ) && !inActiveRotation )
			continue

		if ( Playlist_ShouldBeHiddenForScheduleBlocks( playlistData.name ) )
			continue

		list.append( playlistData.name )
	}
















	array<string> finalList = []

	if ( forcedVisiblePlaylists.len() > 0 )
	{
		foreach ( string name in list )
		{
			if ( !forcedVisiblePlaylists.contains( name ) )
				continue

			finalList.append( name )
		}
	}

	if ( finalList.len() == 0 )
		finalList = list

	finalList.extend( optInList )
	file.cachedPlaylistNames = finalList
	return finalList
}




string function Playlist_GetLTMSlotPlaylist( bool isPrivateMatchQuery = false )
{
	array<string> plNames = GetVisiblePlaylistNames( isPrivateMatchQuery )
	foreach ( plName in plNames )
	{
		if ( GetPlaylistVarString( plName, "ui_slot", "" ) == "ltm" )
			return plName
	}

	return ""
}

int function Playlist_GetNewModeVersion()
{
	return GetCurrentPlaylistVarInt( "newModeVersion", 0 )
}




const table<string, asset> GAMEMODE_EMBLEM_MAP = {
	airdrop = $"rui/menu/gamemode_emblem/airdrop_takeover",
	shotguns_and_snipers = $"rui/menu/gamemode_emblem/shotguns_and_snipers",
	jan_event = $"rui/menu/gamemode_emblem/sioree",
	deja_loot = $"rui/menu/gamemode_emblem/deja_loot",





		shadow_royale = $"rui/menu/gamemode_emblem/shadow_royale",


	duos = $"rui/menu/gamemode_emblem/duos",

		winter_express = $"rui/menu/gamemode_emblem/winter_express",













	lost_treasures = $"rui/menu/gamemode_emblem/campfire_lost_treasures",



	generic = $"rui/menu/gamemode_emblem/generic_ltm",
	genesis = $"rui/menu/gamemode_emblem/genesis",


		control_mode = $"rui/menu/gamemode_emblem/emblem_control",



	freedm = $"rui/menu/gamemode_emblem/emblem_freedm", 


	firing_range = $"rui/menu/gamemode_emblem/emblem_firing_range",






		emblem_halloween = $"rui/menu/gamemode_emblem/emblem_halloween",



		emblem_3strikes = $"rui/menu/gamemode_emblem/emblem_three_strikes",



		emblem_revenant_army = $"rui/menu/gamemode_emblem/emblem_revenant_army",



		emblem_uprising = $"rui/menu/gamemode_emblem/emblem_uprising",



		emblem_golden_horse = $"rui/gamemodes/golden_horse/golden_horse_mode_icon",



		emblem_bounty_hunt = $"rui/hud/gametype_icons/ltm/hunt_ltm_logo_colorized",



		emblem_survival_solos = $"rui/menu/gamemode_emblem/generic_ltm", 



		emblem_survival_quads = $"rui/menu/gamemode_emblem/generic_ltm", 



		emblem_bigtdm = $"rui/menu/gamemode_emblem/emblem_tdm_big",



		emblem_treasure_hunt = $"rui/menu/gamemode_emblem/emblem_treasure_hunt",





}



const table<string, asset> GAMEMODE_BANNER_LOGO_MAP = {
	freedm = $"rui/rui_screens/apex_logo_tdm",

		logo_treasure_hunt = $"rui/hud/gametype_icons/ltm/treasure_hunt/logo_treasure_hunt",


		logo_bigtdm = $"rui/rui_screens/apex_logo_tdm_big",

}



asset function GetModeEmblemImage( string playlistName )
{
	string emblemKey  = GetPlaylistVarString( playlistName, "emblem", "" )
	asset emblemImage = $""

	if ( emblemKey != "" )
	{
		if ( emblemKey in GAMEMODE_EMBLEM_MAP )
			emblemImage = GAMEMODE_EMBLEM_MAP[emblemKey]
		else
			Warning( "Playlist '%s' has invalid value for 'emblem': %s", playlistName, emblemKey )
	}

	return emblemImage
}



asset function GetModeBannerLogo( string playlistName )
{
	string logoKey	  = GetPlaylistVarString( playlistName, "banner_logo", "" )
	asset logoImage	  = $""

	if ( logoKey != "" )
	{
		if ( logoKey in GAMEMODE_BANNER_LOGO_MAP )
			logoImage = GAMEMODE_BANNER_LOGO_MAP[logoKey]
		else
			Warning( "Playlist '%s' has invalid value for 'banner_logo': %s", playlistName, logoKey )
	}

	return logoImage
}



asset function GetModeBannerLogoOrModeEmblemFallback( string playlistName )
{
	asset image = GetModeBannerLogo( playlistName )
	if ( image == $"" )
	{
		image = GetModeEmblemImage( playlistName )
	}
	return image
}











#if DEV

const DEV_SecondsPerRotation = 3600
#endif


string function GetPlaylistRotationGroup()
{
	string rotationGroup = GetDefaultPlaylistRotationGroup()
#if DEV
		if ( rotationGroup == "" )
		{
			
			
			if ( GetUnixTimestamp() % (DEV_SecondsPerRotation * 2) < DEV_SecondsPerRotation )
				rotationGroup = "kings_canyon"
			else
				rotationGroup = "worlds_edge"
		}
#endif
	return rotationGroup
}






























































































































































































































































#if DEV
void function PrintPlaylists()
{
	printt( "=== PLAYLIST NAMES: ===" )

	int count = GetPlaylistCount()
	for ( int idx = 0; idx < count; idx++ )
	{
		printt( "--", GetPlaylistName( idx ) )
	}
}
#endif


