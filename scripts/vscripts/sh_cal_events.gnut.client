global function ShCalEvent_LevelInit
global function GetAllSeasonFlavors
global function IsSeasonFlavor
global function GetLatestSeason
global function GetActiveSeason
global function GetActiveSeasonNumber
global function GetPrecedingSeason
global function GetUpcomingSeason
global function GetAllRankedPeriodCalEventFlavorsByType
global function IsAnyRankedCalEventPeriodFlavor
global function GetPrecedingRankedPeriod
global function GetFollowingRankedPeriod
global function CompareRankedPeriodStartTime
global function SharedRankedPeriod_HasSplits
global function SharedRankedPeriod_IsFirstSplitActive
global function SharedRankedPeriod_IsSecondSplitActive
global function GetCurrentStatSeasonRefOrNull
global function GetCurrentStatRankedPeriodRefOrNullByType

global function CalEvent_IsRevealed
global function CalEvent_IsVisible
global function CalEvent_HasStarted
global function CalEvent_HasFinished
global function CalEvent_IsActive
global function CalEvent_GetRevealUnixTime
global function CalEvent_GetHideUnixTime
global function CalEvent_GetStartUnixTime
global function CalEvent_GetFinishUnixTime
global function CalEvent_GetUnixTimePlaylistOverride
global function Season_GetBattlePass
global function Season_GetSeasonText
global function BattlePass_GetSeason
global function GetNextChallengeEventStartUnixTime

global function IsValidItemFlavorCalEventRef
global function GetItemFlavorByCalEventRef
global function ItemFlavor_GetCalEventRef

global function GetCalEventBeingProcessed





global function SeasonQuest_GetQuestForSeason
global function SeasonQuest_GetSeasonForQuest


global function Season_HasBattlePassV2
global function Season_GetBattlePassV2









global typedef SeasonRef string ornull




global struct SeasonData
{
	string      ref
	asset       _battlepassFlavAsset
	ItemFlavor& battlepass
	int         startUnixTime
	int         endUnixTime

	
	string playlistVarName_startUnixTime
	string playlistVarName_endUnixTime
}








global int UNIX_TIME_FALLBACK_1970 = 1
global int UNIX_TIME_FALLBACK_2038 = 2145916800 






struct BattlePassV2ConfigStruct
{
	int startTime
	int finishTime
	ItemFlavor& flav
}

struct FileStruct_LifetimeLevel
{
	table<ItemFlavor, ItemFlavor> seasonBattlePassMap
	table<ItemFlavor, ItemFlavor> battlePassSeasonMap

	table<ItemFlavor, ItemFlavor> seasonToQuestMap
	table<ItemFlavor, ItemFlavor> questToSeasonMap

	
	
	

	array<ItemFlavor> allCalEvents = []
	array<ItemFlavor> allSeasons = []
	array<ItemFlavor> allRankedPeriods = []
	array<ItemFlavor> allLoginEvents = []

	table< int, table< string, ItemFlavor > > eventRefMap

	table<string, int ornull > playlistOverrides

	ItemFlavor ornull calEventInProcessing
	ItemFlavor ornull currentActiveSeason

	bool useIsVisible = false
	


		table< ItemFlavor, bool > seasonIsBattlePassV2Map
		table< ItemFlavor, array< BattlePassV2ConfigStruct > > seasonBattlePassV2Map
		table< ItemFlavor, ItemFlavor > battlePassV2SeasonMap

}
FileStruct_LifetimeLevel& fileLevel



global const array<int> ITEM_TYPES_WITH_DATETIME_ATTRIBUTES = [
	eItemType.challenge_collection,
	eItemType.challenge_tile,
]








void function ShCalEvent_LevelInit()
{
	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

	fileLevel.eventRefMap[ eItemType.calevent_season ] <- {}
	fileLevel.eventRefMap[ eItemType.calevent_rankedperiod ] <- {}
	fileLevel.eventRefMap[ eItemType.calevent_arenas_ranked_period ] <- {}

	fileLevel.useIsVisible = GetCurrentPlaylistVarBool( "use_calevent_is_visible", false )
















	AddCallback_RegisterRootItemFlavors( void function() {
		foreach ( asset eventAsset in GetBaseItemFlavorsFromArray( "calevents" ) )
		{
			ItemFlavor ornull eventOrNull = RegisterItemFlavorFromSettingsAsset( eventAsset )
			if ( eventOrNull != null )
				fileLevel.allCalEvents.append( expect ItemFlavor( eventOrNull ) )
		}

		int now = GetUnixTimestamp()
		foreach ( ItemFlavor event in fileLevel.allCalEvents )
		{
#if DEBUG_ITEM_FLAVOR_REGISTRATION
				printt( string(ItemFlavor_GetAsset( event )) + ":", GetDateTimeString( CalEvent_GetStartUnixTime( event ) ), "->", GetDateTimeString( CalEvent_GetFinishUnixTime( event ) ) )
#endif

			int eventItemType = ItemFlavor_GetType( event )
			fileLevel.calEventInProcessing = event

			if ( eventItemType == eItemType.calevent_season )
			{
				ItemFlavor ornull passOrNull
				asset battlepassV1Asset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( event ), "battlepassFlav" )
				if ( battlepassV1Asset != $"" )
				{
					ItemFlavor bpv1flav = expect ItemFlavor( RegisterItemFlavorFromSettingsAsset( battlepassV1Asset ) )
					fileLevel.seasonBattlePassMap[event] <- bpv1flav
					fileLevel.battlePassSeasonMap[ bpv1flav ] <- event
				}


					array< var > bpv2SettingsArray =  IterateSettingsAssetArray( ItemFlavor_GetAsset( event ), "battlepassV2Flavs" )

					if ( bpv2SettingsArray.len() == 0 )
					{
						fileLevel.seasonIsBattlePassV2Map[ event ] <- false
					}
					else
					{
						fileLevel.seasonIsBattlePassV2Map[ event ] <- true
						foreach ( var block in bpv2SettingsArray )
						{
							ItemFlavor ornull bpv2FlavOrNull = RegisterItemFlavorFromSettingsAsset( GetSettingsBlockAsset( block, "flavor" ) )
							if ( bpv2FlavOrNull != null )
							{
								ItemFlavor bpv2Flav = expect ItemFlavor( bpv2FlavOrNull )
								BattlePassV2ConfigStruct config

								config.flav = bpv2Flav
								config.startTime = BattlePassV2_GetStartUnixTime( bpv2Flav )
								config.finishTime = BattlePassV2_GetFinishUnixTime( bpv2Flav )

#if DEV
									
									
									
									
									
									
									

									
									
									

									foreach ( ItemFlavor seasonFlav, array< BattlePassV2ConfigStruct > seasonConfigArray in fileLevel.seasonBattlePassV2Map )
									{
										foreach ( iterConfig in seasonConfigArray )
										{
											Assert( ( config.finishTime < iterConfig.startTime || config.startTime > iterConfig.finishTime ),
												format(
													"BattlePassV2 assets cannot overlap in a season -- please check season (%s) and bpv2 asset (%s)",
													ItemFlavor_GetAssetName ( event ),
													ItemFlavor_GetAssetName ( iterConfig.flav )
												)
											)
										}
									}
#endif

								if ( !( event in fileLevel.seasonBattlePassV2Map ) )
								{
									fileLevel.seasonBattlePassV2Map[ event ] <- []
								}

								fileLevel.seasonBattlePassV2Map[ event ].append( config )
								fileLevel.battlePassV2SeasonMap[ bpv2Flav ] <- event
							}
						}
					}


				
				asset seasonQuestAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( event ), "seasonquestFlav" )
				if ( seasonQuestAsset != $"" )
				{
					ItemFlavor ornull questOrNull = RegisterItemFlavorFromSettingsAsset( seasonQuestAsset )
					expect ItemFlavor( questOrNull )
					fileLevel.seasonToQuestMap[event] <- questOrNull
					fileLevel.questToSeasonMap[questOrNull] <- event
				}


					asset seasonNarrativeAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( event ), "narrativeFlav")
					if ( seasonNarrativeAsset != $"" )
					{
						RegisterItemFlavorFromSettingsAsset( seasonNarrativeAsset )
					}


				
				foreach ( ItemFlavor otherEvent in fileLevel.allSeasons )
				{
					Assert( CalEvent_GetStartUnixTime( event ) >= CalEvent_GetFinishUnixTime( otherEvent ),
						format( "Season %s (%s) start overlaps with season %s (%s)", string(ItemFlavor_GetAsset( event )), GetDateTimeString( CalEvent_GetStartUnixTime( event ) ), string(ItemFlavor_GetAsset( otherEvent )), GetDateTimeString( CalEvent_GetFinishUnixTime( otherEvent ) ) ) )
					Assert( CalEvent_GetFinishUnixTime( event ) >= CalEvent_GetFinishUnixTime( otherEvent ),
						format( "Season %s (%s) finish overlaps with season %s (%s)", string(ItemFlavor_GetAsset( event )), GetDateTimeString( CalEvent_GetFinishUnixTime( event ) ), string(ItemFlavor_GetAsset( otherEvent )), GetDateTimeString( CalEvent_GetFinishUnixTime( otherEvent ) ) ) )
				}
				
				

				fileLevel.allSeasons.append( event )

				Assert( event.metaData != null )
				table<string, string> ornull tmp = event.metaData
				expect table<string, string>(tmp)
				fileLevel.eventRefMap[ eItemType.calevent_season ][ tmp[ "season_ref" ] ] <- event
				if ( CalEvent_GetStartUnixTime( event ) <= now && CalEvent_GetFinishUnixTime( event ) > now )
					fileLevel.currentActiveSeason = event

			}

			if ( IsAnyRankedCalEventPeriodFlavor( event ) )
			{
				if ( DEBUG_ITEM_FLAVOR_REGISTRATION && SharedRankedPeriod_HasSplits( event ) )
					printt( "\tsplit:", GetDateTimeString( SharedRankedPeriod_GetFirstSplitEndUnixTime( event ) ) )

				fileLevel.allRankedPeriods.append( event )

				Assert( event.metaData != null )
				table<string, string> ornull tmp = event.metaData
				expect table<string, string>(tmp)

				if ( event.typeIndex == eItemType.calevent_rankedperiod )
					fileLevel.eventRefMap[ eItemType.calevent_rankedperiod ][ tmp[ "rankedperiod_ref" ] ] <- event
				else if ( event.typeIndex == eItemType.calevent_arenas_ranked_period )
					fileLevel.eventRefMap[ eItemType.calevent_arenas_ranked_period ][ tmp[ "arenas_ranked_period_ref" ] ] <- event
			}

			if ( eventItemType == eItemType.calevent_login )
			{
				fileLevel.allLoginEvents.append( event )
			}
		}

		fileLevel.calEventInProcessing = null
	} )
}







array<ItemFlavor> function GetAllSeasonFlavors()
{
	return fileLevel.allSeasons
}




bool function IsSeasonFlavor( ItemFlavor season )
{
	return ItemFlavor_GetType( season ) == eItemType.calevent_season
}





ItemFlavor function GetLatestSeason( int t )
{
	ItemFlavor ornull currentSeasonOrNull = GetActiveSeason( t )
	if ( currentSeasonOrNull != null )
		return expect ItemFlavor(currentSeasonOrNull)

	ItemFlavor ornull seasonOrNull = null
	int bestT                      = -1
	foreach ( ItemFlavor season in fileLevel.allSeasons )
	{
		if ( CalEvent_HasStarted( season, t ) )
		{
			int startUnixTime = CalEvent_GetStartUnixTime( season )
			if ( startUnixTime > bestT )
			{
				bestT        = startUnixTime
				seasonOrNull = season
			}
		}
	}
	Assert( seasonOrNull != null )
	return expect ItemFlavor(seasonOrNull)
}





ItemFlavor ornull function GetActiveSeason( int t )
{
	if ( fileLevel.currentActiveSeason != null )
	{
		ItemFlavor season = expect ItemFlavor( fileLevel.currentActiveSeason )
		if ( t < CalEvent_GetFinishUnixTime( season ) && t > CalEvent_GetStartUnixTime( season ) )
			return season
	}

	
	foreach ( ItemFlavor season in fileLevel.allSeasons )
	{
		if ( CalEvent_IsActive( season, t ) )
		{
			fileLevel.currentActiveSeason = season
			return season
		}
	}
	return null
}





int function GetActiveSeasonNumber()
{
	int t = GetUnixTimestamp()
	int seasonCount

	foreach ( ItemFlavor season in fileLevel.allSeasons )
	{
		if ( CalEvent_HasStarted( season, t ) )
			seasonCount++
	}

	return seasonCount
}




ItemFlavor ornull function GetPrecedingSeason( ItemFlavor flav )
{
	Assert( IsSeasonFlavor( flav ) )

	ItemFlavor ornull preceedingSeason = null
	int previousSeasonStartTime        = 0 
	int flavStartTime                  = CalEvent_GetStartUnixTime( flav )
	int itemFlavorType                 = ItemFlavor_GetType( flav )

	bool found = false

	foreach ( ItemFlavor season in fileLevel.allSeasons )
	{
		if ( ItemFlavor_GetType( season ) != itemFlavorType )
			continue 

		int startTimeOfSeason = CalEvent_GetStartUnixTime( season )

		Assert( previousSeasonStartTime < startTimeOfSeason )

		if ( flav == season )
		{
			found = true
			break
		}

		Assert( CalEvent_GetFinishUnixTime( season ) <= flavStartTime ) 
		previousSeasonStartTime = startTimeOfSeason
		preceedingSeason        = season
	}

	if ( !found )
		return null

	return preceedingSeason
}




ItemFlavor ornull function GetUpcomingSeason( int t )
{
	Assert( GetActiveSeason( t ) == null )

	ItemFlavor ornull seasonOrNull = null
	int bestT                      = INT_MAX
	foreach ( ItemFlavor season in fileLevel.allSeasons )
	{
		if ( CalEvent_HasStarted( season, t ) )
		{
			int startUnixTime = CalEvent_GetStartUnixTime( season )
			if ( startUnixTime < bestT )
			{
				bestT        = startUnixTime
				seasonOrNull = season
			}
		}
	}
	return seasonOrNull
}







bool function CalEvent_IsRevealed( ItemFlavor event, int t )
{
	Assert( IsItemFlavorRegistrationFinished() )
	int revealUnixTime = CalEvent_GetRevealUnixTime( event )
	return (t >= revealUnixTime)
}




bool function CalEvent_IsVisible( ItemFlavor event, int t )
{
	Assert( IsItemFlavorRegistrationFinished() )
	int hideUnixTime = CalEvent_GetHideUnixTime( event )
	return CalEvent_IsRevealed( event, t ) && (t < hideUnixTime)
}




bool function CalEvent_HasStarted( ItemFlavor event, int t )
{
	Assert( IsItemFlavorRegistrationFinished() )
	int startUnixTime = CalEvent_GetStartUnixTime( event )
	if ( fileLevel.useIsVisible )
		return CalEvent_IsVisible( event, t ) && (t >= startUnixTime)
	else
		return (t >= startUnixTime)

	unreachable
}



bool function CalEvent_HasFinished( ItemFlavor event, int t )
{
	Assert( IsItemFlavorRegistrationFinished() )
	int finishUnixTime = CalEvent_GetFinishUnixTime( event )
	if ( fileLevel.useIsVisible )
		return CalEvent_IsVisible( event, t ) && (t >= finishUnixTime)
	else
		return (t >= finishUnixTime)

	unreachable
}



bool function CalEvent_IsActive( ItemFlavor event, int t )
{
	Assert( IsItemFlavorRegistrationFinished() )
	int finishUnixTime = CalEvent_GetFinishUnixTime( event )

	bool hasStarted = CalEvent_HasStarted( event, t )
	bool hasNotFinished = ( t < finishUnixTime )







	return hasStarted && hasNotFinished
}





int function CalEvent_GetRevealUnixTime( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) > eItemType._CALEVENT_RANGE_START && ItemFlavor_GetType( flav ) < eItemType._CALEVENT_RANGE_END )

	int ornull revealTime = CalEvent_GetUnixTimePlaylistOverride( flav, "_reveal_time" )
	if ( revealTime != null )
		return expect int( revealTime )

	return CalEvent_GetUnixTimeBySettingString( flav, "revealUnixTime", UNIX_TIME_FALLBACK_1970, false )
}





int function CalEvent_GetHideUnixTime( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) > eItemType._CALEVENT_RANGE_START && ItemFlavor_GetType( flav ) < eItemType._CALEVENT_RANGE_END )

	int ornull hideTime = CalEvent_GetUnixTimePlaylistOverride( flav, "_hide_time" )
	if ( hideTime != null )
		return expect int( hideTime )

	return CalEvent_GetUnixTimeBySettingString( flav, "hideUnixTime", UNIX_TIME_FALLBACK_2038, false )
}




int function CalEvent_GetStartUnixTime( ItemFlavor flav )
{





	int ornull startTime = CalEvent_GetUnixTimePlaylistOverride( flav, "_start_time" )
	if ( startTime != null )
		return expect int( startTime )

	if ( ItemFlavor_CalEventsHaveTimeStampMetaData() )
	{
		table<string,string> ornull metaData = ItemFlavor_GetMetaData( flav )
		expect table<string, string>(metaData)
		if ( "defaultStartTime" in metaData )
		{
			return int(metaData[ "defaultStartTime" ])
		}
	}

	return CalEvent_GetUnixTimeBySettingString( flav, "defaultStartTime", UNIX_TIME_FALLBACK_2038 )
}




int function CalEvent_GetFinishUnixTime( ItemFlavor flav )
{





	int ornull finishTime = CalEvent_GetUnixTimePlaylistOverride( flav, "_finish_time" )
	if ( finishTime != null )
		return expect int( finishTime )

	if ( ItemFlavor_CalEventsHaveTimeStampMetaData() )
	{
		table<string,string> ornull metaData = ItemFlavor_GetMetaData( flav )
		expect table<string, string>(metaData)
		if ( "defaultFinishTime" in metaData )
		{
			return int(metaData[ "defaultFinishTime" ])
		}
	}

	return CalEvent_GetUnixTimeBySettingString( flav, "defaultFinishTime", UNIX_TIME_FALLBACK_1970 )
}




int function CalEvent_GetUnixTimeBySettingString( ItemFlavor flav, string settingString, int defaultUnixTime, bool showWarning = true )
{





	string str = GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), settingString )
	if ( str != "" )
	{
		int ornull t = DateTimeStringToUnixTimestamp( str )
		if ( t != null )
			return expect int(t)

		if ( showWarning )
			Warning( "Calendar event '%s' default '%s' time is not a valid datetime or Unix timestamp: \"%s\"", string(ItemFlavor_GetAsset( flav )), settingString, str )
	}

	if ( showWarning )
		Warning( "CalEvent %s '%s' time is unset. Using %d (%s).", string(ItemFlavor_GetAsset( flav )), settingString, defaultUnixTime, GetDateTimeString( defaultUnixTime ) )

	return defaultUnixTime
}




int ornull function CalEvent_GetUnixTimePlaylistOverride( ItemFlavor flav, string postFixString )
{





	string playlistVarName = ItemFlavor_GetGUIDString( flav ) + postFixString

	if ( playlistVarName in fileLevel.playlistOverrides )
		return fileLevel.playlistOverrides[ playlistVarName ]

	string str             = GetCurrentPlaylistVarString( playlistVarName, "" )
	if ( str != "" )
	{
		int ornull t = DateTimeStringToUnixTimestamp( str )
		if ( t != null )
		{
			fileLevel.playlistOverrides[ playlistVarName ] <- expect int(t)
			return expect int(t)
		}

		Warning( "Calendar event '%s' playlist var '%s' is not a valid datetime or Unix timestamp: \"%s\"", string(ItemFlavor_GetAsset( flav )), playlistVarName, str )
	}

	fileLevel.playlistOverrides[ playlistVarName ] <- null
	return null
}























bool function Season_HasBattlePassV2( ItemFlavor flav )
{
	Assert( IsCalEvent( ItemFlavor_GetType( flav ) ) )
	return fileLevel.seasonIsBattlePassV2Map[ flav ]
}

ItemFlavor ornull function Season_GetBattlePassV2( ItemFlavor flav )
{
	Assert( IsCalEvent( ItemFlavor_GetType( flav ) ) )
	Assert( Season_HasBattlePassV2( flav ) )

	int unixTimeNow = GetUnixTimestamp()
	foreach ( BattlePassV2ConfigStruct config in fileLevel.seasonBattlePassV2Map[ flav ] )
	{
		if ( unixTimeNow >= config.startTime && unixTimeNow <= config.finishTime )
		{
			return config.flav
		}
	}

	Warning( format( "No valid BattlePassV2 for our current time (%d) and season (%s)", unixTimeNow, ItemFlavor_GetAssetName( flav ) ) )
	return null
}





ItemFlavor function Season_GetBattlePass( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) > eItemType._CALEVENT_RANGE_START && ItemFlavor_GetType( flav ) < eItemType._CALEVENT_RANGE_END )

	return fileLevel.seasonBattlePassMap[flav]
}

string function Season_GetSeasonText( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.calevent_season )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), "seasonText" )
}




ItemFlavor function BattlePass_GetSeason( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.battlepass )

	return fileLevel.battlePassSeasonMap[flav]
}

ItemFlavor ornull function SeasonQuest_GetQuestForSeason( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.calevent_season )

	if ( flav in fileLevel.seasonToQuestMap )
		return fileLevel.seasonToQuestMap[flav]

	return null
}

ItemFlavor ornull function SeasonQuest_GetSeasonForQuest( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.quest )

	if ( flav in fileLevel.questToSeasonMap )
		return fileLevel.questToSeasonMap[flav]

	return null
}





int function GetNextChallengeEventStartUnixTime()
{
	Assert( IsItemFlavorRegistrationFinished() )

	int now      = GetUnixTimestamp()
	int bestTime = INT_MAX

	array<ItemFlavor> events = [] 
	events.extend( GetAllItemFlavorsOfType( eItemType.calevent_buffet ) )
	events.extend( GetAllItemFlavorsOfType( eItemType.calevent_event_shop ) )
	events.extend( GetAllItemFlavorsOfType( eItemType.calevent_collection ) )
	events.extend( GetAllItemFlavorsOfType( eItemType.calevent_reward_campaign ) )
	events.extend( GetAllItemFlavorsOfType( eItemType.calevent_story_challenges ) )
	events.extend( GetAllItemFlavorsOfType( eItemType.calevent_themedshop ) )

	foreach ( ItemFlavor ev in events )
	{
		int startTime = CalEvent_GetStartUnixTime( ev )
		if ( startTime > now && startTime < bestTime )
			bestTime = startTime
	}

	return bestTime
}




string ornull function GetCurrentStatSeasonRefOrNull()
{
	ItemFlavor ornull season = GetActiveSeason( GetUnixTimestamp() ) 
	if ( season == null )
		return null
	return ItemFlavor_GetGUIDString( expect ItemFlavor(season) )
}




bool function IsValidItemFlavorCalEventRef( string ref, int eventType, int validationBehavior = eValidation.DONT_ASSERT )
{
	bool good = (ref in fileLevel.eventRefMap[ eventType ])

	Assert( good || validationBehavior != eValidation.ASSERT, "Unknown item flavor calendar event ref: " + ref )
	return good
}




ItemFlavor function GetItemFlavorByCalEventRef( string ref, int eventType )
{
	Assert( IsValidItemFlavorCalEventRef( ref, eventType, eValidation.ASSERT ) )

	return fileLevel.eventRefMap[ eventType ][ ref ]
}




string function ItemFlavor_GetCalEventRef( ItemFlavor flavor )
{
	Assert( IsItemFlavorStructValid( flavor.guid, eValidation.ASSERT ) )
	Assert( flavor.metaData != null )
	int eventType = flavor.typeIndex

	table<string, string> ornull tmp = flavor.metaData
	expect table<string, string>(tmp)

	switch( eventType )
	{
		case eItemType.calevent_season:
			return tmp[ "season_ref" ]

		case eItemType.calevent_rankedperiod:
			return tmp[ "rankedperiod_ref" ]

		case eItemType.calevent_arenas_ranked_period:
			return tmp[ "arenas_ranked_period_ref" ]
	}

	unreachable
}



ItemFlavor ornull function GetCalEventBeingProcessed()
{
	return fileLevel.calEventInProcessing
}





string ornull function GetCurrentStatRankedPeriodRefOrNullByType( int itemType )
{
	if ( itemType == eItemType.calevent_arenas_ranked_period )
		return null

	string periodRef = Ranked_GetCurrentPeriodGUIDString()
	if ( periodRef == "" )
		return null

	return periodRef
}




array<ItemFlavor> function GetAllRankedPeriodCalEventFlavorsByType( int itemType )
{
	array<ItemFlavor> rankedPeriodArray
	foreach ( rp in fileLevel.allRankedPeriods )
	{
		if ( ItemFlavor_GetType( rp ) == itemType )
			rankedPeriodArray.append( rp )
	}
	return rankedPeriodArray
}



int function CompareRankedPeriodStartTime( ItemFlavor a, ItemFlavor b )
{
	int startUnixTimeA = CalEvent_GetStartUnixTime( a )
	int startUnixTimeB = CalEvent_GetStartUnixTime( b )

	if ( startUnixTimeA > startUnixTimeB )
		return 1
	else if ( startUnixTimeA < startUnixTimeB )
		return -1

	return 0
}




bool function IsAnyRankedCalEventPeriodFlavor( ItemFlavor rankedPeriod )
{
	int itemType = ItemFlavor_GetType( rankedPeriod )
	switch( itemType )
	{
		case eItemType.calevent_rankedperiod:

		case eItemType.calevent_arenas_ranked_period:

			return true
	}

	return false
	
}





ItemFlavor ornull function GetPrecedingRankedPeriod( ItemFlavor flav )
{
	
	if ( ItemFlavor_GetGUIDString( flav ) == RANKED_2PT0_PERIOD_17_GUIDSTRING )
		return GetItemFlavorByGUID( ConvertItemFlavorGUIDStringToGUID( RANKED_SEASON_16_GUIDSTRING ) )

	if ( ItemFlavor_GetType( flav ) == eItemType.ranked_2pt0_period )
	{
		var block = ItemFlavor_GetSettingsBlock( flav )
		asset precedingPeriodAsset = GetSettingsBlockAsset( block, "preceedingPeriod" )

		if ( !IsValidItemFlavorSettingsAsset( precedingPeriodAsset ) )
			return null






		return GetItemFlavorByAsset( precedingPeriodAsset )
	}

	Assert( IsAnyRankedCalEventPeriodFlavor( flav ) )
	ItemFlavor ornull preceedingRankedPeriod = null
	int previousPeriodStartTime              = 0 
	int flavStartTime                        = CalEvent_GetStartUnixTime( flav )
	int itemFlavorType                       = ItemFlavor_GetType( flav )

	bool found = false

	foreach ( ItemFlavor rankedPeriod in fileLevel.allRankedPeriods )
	{
		if ( ItemFlavor_GetType( rankedPeriod ) != itemFlavorType )
			continue 

		int startTimeOfRankedPeriod = CalEvent_GetStartUnixTime( rankedPeriod )

		Assert( previousPeriodStartTime < startTimeOfRankedPeriod )

		if ( flav == rankedPeriod )
		{
			found = true
			break
		}

		Assert( CalEvent_GetFinishUnixTime( rankedPeriod ) <= flavStartTime ) 
		previousPeriodStartTime = startTimeOfRankedPeriod
		preceedingRankedPeriod  = rankedPeriod
	}

	if ( !found )
		return null

	return preceedingRankedPeriod
}




ItemFlavor ornull function GetFollowingRankedPeriod( ItemFlavor flav )
{
	
	if ( ItemFlavor_GetGUIDString( flav ) == RANKED_SEASON_16_GUIDSTRING )
		return GetItemFlavorByGUID( ConvertItemFlavorGUIDStringToGUID( RANKED_2PT0_PERIOD_17_GUIDSTRING ) )

	if ( ItemFlavor_GetType( flav ) == eItemType.ranked_2pt0_period )
	{
		var block = ItemFlavor_GetSettingsBlock( flav )
		asset followingPeriodAsset = GetSettingsBlockAsset( block, "followingPeriod" )

		if ( !IsValidItemFlavorSettingsAsset( followingPeriodAsset ) )
			return null






		return GetItemFlavorByAsset( followingPeriodAsset )
	}

	Assert( IsAnyRankedCalEventPeriodFlavor( flav ) )
	ItemFlavor precedingRankedPeriod
	ItemFlavor ornull followingRankedPeriod = null
	int previousPeriodFinishTime            = 0 
	int flavStartTime                       = CalEvent_GetStartUnixTime( flav )
	int itemFlavorType                      = ItemFlavor_GetType( flav )

	foreach ( ItemFlavor rankedPeriod in fileLevel.allRankedPeriods )
	{
		if ( ItemFlavor_GetType( rankedPeriod ) != itemFlavorType )
			continue 

		int finishTimeOfRankedPeriod = CalEvent_GetFinishUnixTime( rankedPeriod )

		Assert( previousPeriodFinishTime < finishTimeOfRankedPeriod )

		if ( precedingRankedPeriod == flav )
		{
			followingRankedPeriod = rankedPeriod
			break
		}

		previousPeriodFinishTime = finishTimeOfRankedPeriod
		precedingRankedPeriod    = rankedPeriod
	}

	return followingRankedPeriod
}



int function SharedRankedPeriod_GetFirstSplitEndUnixTime( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) > eItemType._CALEVENT_RANGE_START && ItemFlavor_GetType( flav ) < eItemType._CALEVENT_RANGE_END )

	string playlistVarName = format( "%s_first_split_finish_time", ItemFlavor_GetGUIDString( flav ) )
	string str             = GetCurrentPlaylistVarString( playlistVarName, "" )
	if ( str != "" )
	{
		int ornull t = DateTimeStringToUnixTimestamp( str )
		if ( t != null )
			return expect int(t)
		Warning( "Calendar event '%s' playlist var '%s' is not a valid datetime or Unix timestamp: \"%s\"", string(ItemFlavor_GetAsset( flav )), playlistVarName, str )
	}

	return CalEvent_GetUnixTimeBySettingString( flav, "firstSplitFinishTime", UNIX_TIME_FALLBACK_1970, false )
}



bool function SharedRankedPeriod_HasSplits( ItemFlavor flav )
{
	if ( ItemFlavor_GetType( flav ) == eItemType.ranked_2pt0_period )
		return false

	Assert( IsAnyRankedCalEventPeriodFlavor( flav ) )

	int splitEndTime = SharedRankedPeriod_GetFirstSplitEndUnixTime( flav )
	return splitEndTime != UNIX_TIME_FALLBACK_1970
}



bool function SharedRankedPeriod_IsFirstSplitActive( ItemFlavor flav )
{
	if ( ItemFlavor_GetType( flav ) == eItemType.ranked_2pt0_period )
		return flav == Ranked_GetCurrentActiveRankedPeriod()

	Assert( IsAnyRankedCalEventPeriodFlavor( flav ) )
	int currentUnixTime = GetUnixTimestamp()
	if ( Ranked_GetCurrentActiveRankedPeriod() != flav )
		return false

	int splitEndTime = SharedRankedPeriod_GetFirstSplitEndUnixTime( flav )
	if ( splitEndTime == UNIX_TIME_FALLBACK_1970 )
		return false

	Assert( splitEndTime > CalEvent_GetStartUnixTime( flav ) )

	return currentUnixTime <= splitEndTime
}



bool function SharedRankedPeriod_IsSecondSplitActive( ItemFlavor flav )
{
	if ( ItemFlavor_GetType( flav ) == eItemType.ranked_2pt0_period )
		return false

	Assert( IsAnyRankedCalEventPeriodFlavor( flav ) )
	int currentUnixTime = GetUnixTimestamp()
	if ( Ranked_GetCurrentActiveRankedPeriod() != flav )
		return false

	int splitEndTime = SharedRankedPeriod_GetFirstSplitEndUnixTime( flav )
	if ( splitEndTime == UNIX_TIME_FALLBACK_1970 )
		return false

	Assert( splitEndTime > CalEvent_GetStartUnixTime( flav ) )

	return currentUnixTime > splitEndTime
}


















































