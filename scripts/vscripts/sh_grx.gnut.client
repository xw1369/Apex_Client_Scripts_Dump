


global function ShGRX_LevelInit
global function ShGRX_RegisterItemFlavor









global function IsValidItemFlavorGRXIndex
global function GetGRXIndexByGRXRef
global function GetItemFlavorByGRXIndex
global function ItemFlavor_GetGRXMode
global function ItemFlavor_GetGRXIndex
global function ItemFlavor_GetGRXAlias
global function ItemFlavor_GetGRXOwnershipTarget
global function ItemFlavor_GetGRXOwnershipTargettedBy
global function ItemFlavor_GetGRXMultipleOwnershipRequirementsList
global function ItemFlavor_GetGRXMultipleOwnershipTarget
global function GRXCurrency_RegisterNewCurrencyAssetInEventSlot
global function GRXCurrency_GetCurrencyIndex
global function GRXCurrency_GetPurchaseSound
global function GRXCurrency_GetPreviewModel
global function GRXCurrency_GetRewardIcon
global function GRXCurrencyBundle_GetCurrencyFlav
global function GRXCurrencyBundle_GetValue
global function GRX_IsInventoryReady
global function GRX_HasInventoryEverBeenReady
global function GRX_GetNumberOfOwnedItemsByPlayer
global function GRX_IsItemOwnedByPlayer
global function GRX_IsItemOwnedByPlayer_AllowOutOfDateData
global function GRX_GetPlayerEdition
global function GRX_IsOfferRestricted
global function GRXPack_IsEphemeral
global function GRXPack_IsExpectedToContainSingleItemWithCurrency
global function GRXPack_GetTickModel
global function GRXPack_GetTickModelSkin
global function GRXPack_GetPackContents

global function GRX_GetStickerPacksWithRewards
global function GRXPack_GetStickerCompletionRewardSequence
global function GRXPack_PlayerOwnsAllItemsInPack
global function GRXPack_GetStickerCompletionRewardPack

#if DEV
global function DEV_GetItemFlavorByGRXRef
global function DEV_IsValidGRXRef
#endif





































































































global function GRXPack_GetTickSoundAlias





































































global function GRX_GetMostRecentPackOpeningResults
global function GRXPack_GetCustomColor
global function GRXPack_GetCustomCountTextCol


#if DEV







global function DEV_GRX_ForcePackResults








#endif















global function UIToClient_GRXInventoryCleanStateChange
global function ClientCodeCallback_GRXPackOpened

















global const int MAX_REWARDS_PER_REWARD_SEQ_CALL = 255

global const int QUEUED_REWARDS_MAX_COUNT = 12
const int QUEUED_REWARDS_MAX_ITEMS_COUNT = 1







const bool GRX_DEBUG_PRINTS = true

const string SHOP_TAB_ALIAS = "shop"








global enum eItemFlavorGRXMode
{
	NONE = GRX_ITEMFLAVORMODE_NONE,
	REGULAR = GRX_ITEMFLAVORMODE_REGULAR,
	PACK = GRX_ITEMFLAVORMODE_PACK,
	CONSUMABLE = GRX_ITEMFLAVORMODE_CONSUMABLE,
	CURRENCY = GRX_ITEMFLAVORMODE_CURRENCY,
	OWNERSHIP_TARGET = -1337,
	MULTIPLE_OWNERSHIP_TARGET = -9001,
}
































































































































































































































































Assert( GRX_CURRENCY_COUNT == 7 )
global ItemFlavor&[GRX_CURRENCY_COUNT] GRX_CURRENCIES = [{...}, {...}, {...}, {...}, {...}, {...}, {...}]

global int GRX_DEV_ITEM = -1
global int GRX_QA_ITEM = -1







































global enum eGRXPackTickSoundKind
{
	TriadBounce
	PuckLand
	Unpack
	DeployTriadExplo1
	DeployTriadExplo2
	DeployTriadExplo3
}



















































struct PlayerGRXScriptState

{








		bool isInventoryReady
		bool isInventoryValidated = false
		bool hasInventoryEverBeenClean = false
		int  marketplaceEdition = -1
		bool isOfferRestricted = false






























}






























struct FileStruct_LifetimeLevel
{
	array<ItemFlavor>      	packFlavorList
	table<string, int> 	   	currencyIndexMap
	table<int, ItemFlavor> 	grxIndexItemFlavorMap
	table<string, int>     	grxRefToGRXIndexMap

	array<ItemFlavor> stickerPacksWithRewards
	table< int, int > multiOwnershipUnlockMap

#if DEV
		table<string, ItemFlavor> grxRefItemFlavorMap
#endif






		PlayerGRXScriptState localGRXState

		ItemFlavorBag ornull mostRecentPackOpeningResultsOrNull = null





































#if GRX_DEBUG_PRINTS
		bool GRX_DEBUG_PRINTS_disableTemporarily = false
#endif
}
FileStruct_LifetimeLevel& fileLevel


const float USERINFO_DIRTY_DEBOUNCE_DURATION = 0.3


global enum eIneligibilityCode
{
	ELIGIBLE = 0,
	UNKNOWN = 1,

	PURCHASE_CONDITIONS = 100,
	PURCHASE_LIMIT = 101,
	BUNDLE_ITEMS_OWNED = 102,
	CONTENTS_NOT_GRANTABLE = 103
}








void function ShGRX_LevelInit()
{
	FileStruct_LifetimeLevel newFileLevel



	fileLevel = newFileLevel





	AddCallback_RegisterRootItemFlavors( void function() {
		Assert( GRX_CURRENCY_COUNT == 7 )
		GRX_CURRENCIES[GRX_CURRENCY_PREMIUM] = expect ItemFlavor(RegisterItemFlavorFromSettingsAsset( $"settings/itemflav/grx_currency/premium.rpak" )) 
		GRX_CURRENCIES[GRX_CURRENCY_CREDITS] = expect ItemFlavor(RegisterItemFlavorFromSettingsAsset( $"settings/itemflav/grx_currency/credits.rpak" )) 
		GRX_CURRENCIES[GRX_CURRENCY_CRAFTING] = expect ItemFlavor(RegisterItemFlavorFromSettingsAsset( $"settings/itemflav/grx_currency/crafting.rpak" )) 
		GRX_CURRENCIES[GRX_CURRENCY_HEIRLOOM] = expect ItemFlavor(RegisterItemFlavorFromSettingsAsset( $"settings/itemflav/grx_currency/heirloom.rpak" )) 
		GRX_CURRENCIES[GRX_CURRENCY_EXOTIC] = expect ItemFlavor(RegisterItemFlavorFromSettingsAsset( $"settings/itemflav/grx_currency/exotic.rpak" )) 
		GRX_CURRENCIES[GRX_CURRENCY_ESCROW] = expect ItemFlavor(RegisterItemFlavorFromSettingsAsset( $"settings/itemflav/grx_currency/escrow.rpak" )) 

		
		GRX_CURRENCIES[GRX_CURRENCY_EVENT] = expect ItemFlavor(RegisterItemFlavorFromSettingsAsset( $"settings/itemflav/grx_currency/s19me01_coin.rpak" )) 

		foreach ( int currencyIndex, ItemFlavor flav in GRX_CURRENCIES )
		{
			fileLevel.currencyIndexMap[ItemFlavor_GetGUIDString( flav )] <- currencyIndex





		}

		foreach ( asset packAsset in GetBaseItemFlavorsFromArray( "packs" ) )
		{
			ItemFlavor ornull flavOrNull = RegisterItemFlavorFromSettingsAsset( packAsset )
			if ( flavOrNull != null )
				fileLevel.packFlavorList.append( expect ItemFlavor(flavOrNull) )
		}

		foreach ( asset currencyBundleAsset in GetBaseItemFlavorsFromArray( "currencyBundles" ) )
			RegisterItemFlavorFromSettingsAsset( currencyBundleAsset )
	} )
	AddCallback_OnItemFlavorRegistered( eItemType.account_currency_bundle, AssertCurrencyBundlePlaylistVarsAreValid )

	AddCallback_OnItemFlavorRegistered( eItemType.account_pack, RegisterStickerPacksWithRewards )

	AddCallbackOrMaybeCallNow_OnAllItemFlavorsRegistered( OnAllItemFlavorsRegistered )




	RegisterSignal( "ScriptGRXOperationDone" )


		Remote_RegisterUIFunction( "ServerToUI_PROTO_YouAreGreenLightedForGRX" )
		Remote_RegisterUIFunction( "ServerToUI_GRX_QueuedRewardsGiven" )

		Remote_RegisterServerFunction( "ClientCallback_acknowledge_reward", "int", 0, QUEUED_REWARDS_MAX_COUNT, "int", INT_MIN, INT_MAX )
		Remote_RegisterServerFunction( "ClientCallback_SetOfferRefreshSuppressed", "bool" )



























	GRX_DEV_ITEM = GRX_RegisterItem( "account_flag_dev", eItemFlavorGRXMode.REGULAR )
	GRX_QA_ITEM = GRX_RegisterItem( "account_flag_QA", eItemFlavorGRXMode.REGULAR )







}





















void function ShGRX_RegisterItemFlavor( ItemFlavor flavor )
{
	string grxModeStr = GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "grxMode" )
	Assert( grxModeStr in eItemFlavorGRXMode, "Unknown item flavor GRX mode: " + grxModeStr )
	flavor.grxMode = eItemFlavorGRXMode[grxModeStr]
	if ( flavor.grxMode == eItemFlavorGRXMode.REGULAR
	|| flavor.grxMode == eItemFlavorGRXMode.CONSUMABLE
	|| flavor.grxMode == eItemFlavorGRXMode.PACK
	|| flavor.grxMode == eItemFlavorGRXMode.CURRENCY )
	{
		string grxRef = ItemFlavor_GetGRXAlias( flavor )
		Assert( grxRef != "", "Item " + string(ItemFlavor_GetAsset( flavor )) + " has GRX mode enabled but GRX ref is undefined." )

		flavor.grxIndex = GRX_RegisterItem( grxRef, flavor.grxMode )

		fileLevel.grxIndexItemFlavorMap[flavor.grxIndex] <- flavor
		fileLevel.grxRefToGRXIndexMap[grxRef] <- flavor.grxIndex
#if DEV
			bool duplicateGRXRefFound = grxRef in fileLevel.grxRefItemFlavorMap
			Assert( !duplicateGRXRefFound, "Duplicate GRX ref found. Already used by " + string(ItemFlavor_GetAsset( fileLevel.grxRefItemFlavorMap[grxRef] )) )
			fileLevel.grxRefItemFlavorMap[grxRef] <- flavor
#endif
	}
	else if ( flavor.grxMode == eItemFlavorGRXMode.OWNERSHIP_TARGET )
	{
		ItemFlavor ornull ownershipTarget = ItemFlavor_GetGRXOwnershipTarget( flavor )
		if ( ownershipTarget != null )
		{
			expect ItemFlavor(ownershipTarget)
			if ( ownershipTarget.grxOwnershipTargettedBy == null )
				ownershipTarget.grxOwnershipTargettedBy = []
			array<int> targettedBy = expect array<int>(ownershipTarget.grxOwnershipTargettedBy)
			targettedBy.append( flavor.guid )
		}
	}
	else if ( flavor.grxMode == eItemFlavorGRXMode.MULTIPLE_OWNERSHIP_TARGET )
	{
		array< ItemFlavor > ownershipRequirementsList = ItemFlavor_GetGRXMultipleOwnershipRequirementsList( flavor )
		if ( ownershipRequirementsList.len() == 0 )
		{
			Assert( false, "Item had GRX mode MULTIPLE_OWNERSHIP_TARGET but list was empty: " + string( ItemFlavor_GetAsset( flavor ) ) )
			return
		}

		foreach ( reqFlav in ownershipRequirementsList )
		{
#if DEV
				bool duplicateGRXRefFoundInMultiple = reqFlav.guid in fileLevel.multiOwnershipUnlockMap
				Assert( !duplicateGRXRefFoundInMultiple, "Duplicate GRX ref in multiple unlock mapping found. Already used by " + string( ItemFlavor_GetAsset( GetItemFlavorByGUID( fileLevel.multiOwnershipUnlockMap[ reqFlav.guid ] ) ) ) )
#endif

			fileLevel.multiOwnershipUnlockMap[ reqFlav.guid ] <- flavor.guid
		}
	}





}





void function OnAllItemFlavorsRegistered()
{
}










bool function IsValidItemFlavorGRXIndex( int index, int validationBehavior = eValidation.DONT_ASSERT )
{
	bool good = (index in fileLevel.grxIndexItemFlavorMap)

	if ( !good && validationBehavior == eValidation.ASSERT ) 
	{
		foreach ( int grxIndex, ItemFlavor flav in fileLevel.grxIndexItemFlavorMap )
		{
			Warning( "##### R5DEV-47389: %d = %s", grxIndex, string(ItemFlavor_GetAsset( flav )) )
		}
	}

	Assert( good || validationBehavior != eValidation.ASSERT, "Unknown item flavor GRX index: " + index + " (valid range is 0-" + (fileLevel.grxIndexItemFlavorMap.len() - 1) + ")" )
	return good
}




int function GetGRXIndexByGRXRef( string grxRef )
{
	return fileLevel.grxRefToGRXIndexMap[ grxRef ]
}




ItemFlavor function GetItemFlavorByGRXIndex( int index )
{
	IsValidItemFlavorGRXIndex( index, eValidation.ASSERT )

	return fileLevel.grxIndexItemFlavorMap[ index ]
}



#if DEV
ItemFlavor function DEV_GetItemFlavorByGRXRef( string grxRef )
{
	return fileLevel.grxRefItemFlavorMap[ grxRef ]
}
#endif

#if DEV
bool function DEV_IsValidGRXRef( string grxRef )
{
	return (grxRef in fileLevel.grxRefItemFlavorMap)
}
#endif



int function ItemFlavor_GetGRXMode( ItemFlavor flavor )
{
	Assert( IsItemFlavorStructValid( flavor.guid, eValidation.ASSERT ) )

	return flavor.grxMode
}




int function ItemFlavor_GetGRXIndex( ItemFlavor flavor, int validationBehavior = eValidation.ASSERT )
{
	Assert( IsItemFlavorStructValid( flavor.guid, eValidation.ASSERT ) )
	Assert( flavor.grxMode != eItemFlavorGRXMode.NONE || validationBehavior == eValidation.DONT_ASSERT, "Attempted to get the GRX index of a non-GRX item flavor: " + DEV_DescItemFlavor( flavor ) )
	Assert( flavor.grxIndex >= 0 || validationBehavior == eValidation.DONT_ASSERT, format( "%s( %s ) has an invalid index (%d)", FUNC_NAME(), DEV_DescItemFlavor( flavor ), flavor.grxIndex ) )
	return flavor.grxIndex
}




string function ItemFlavor_GetGRXAlias( ItemFlavor flavor )
{
	Assert( IsItemFlavorStructValid( flavor.guid, eValidation.ASSERT ) )
	Assert( flavor.grxMode != eItemFlavorGRXMode.NONE, "Attempted to get the GRX alias of a non-GRX item flavor: " + DEV_DescItemFlavor( flavor ) )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "grxRef" )
}




ItemFlavor ornull function ItemFlavor_GetGRXOwnershipTarget( ItemFlavor flavor )
{
	Assert( IsItemFlavorStructValid( flavor.guid, eValidation.ASSERT ) )
	if ( flavor.grxMode != eItemFlavorGRXMode.OWNERSHIP_TARGET )
		return null

	asset ownershipTargetFlavAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "ownershipTarget" )
	if ( IsValidItemFlavorSettingsAsset( ownershipTargetFlavAsset ) )
		return GetItemFlavorByAsset( ownershipTargetFlavAsset )
	return null
}



array< ItemFlavor > function ItemFlavor_GetGRXMultipleOwnershipRequirementsList( ItemFlavor flavor )
{
	Assert( IsItemFlavorStructValid( flavor.guid, eValidation.ASSERT ) )
	Assert( flavor.grxMode == eItemFlavorGRXMode.MULTIPLE_OWNERSHIP_TARGET, "attempted to check GRX multiple ownership mode for an item that does not have that mode set: " + string( ItemFlavor_GetAsset( flavor ) ) )

	array< ItemFlavor > ownershipList = []
	foreach ( int index, var ownershipBlock in IterateSettingsAssetArray( ItemFlavor_GetAsset( flavor ), "multipleOwnershipTargets" ) )
	{
		asset ownershipAsset = GetSettingsBlockAsset( ownershipBlock, "multipleOwnershipTarget" )
		Assert( IsValidItemFlavorSettingsAsset( ownershipAsset ), format( "Bad ownership target in GRX configuration of %s: %s", string( ItemFlavor_GetAsset( flavor ) ), string( ownershipAsset ) ) )
		ownershipList.append( GetItemFlavorByAsset( ownershipAsset ) )
	}

	Assert( ownershipList.len() > 0, "Mode was set to MULTIPLE_OWNERSHIP_TARGET, but no valid targets were found: " + string( ItemFlavor_GetAsset( flavor ) ) )
	return ownershipList
}



ItemFlavor ornull function ItemFlavor_GetGRXMultipleOwnershipTarget( ItemFlavor flavor )
{
	Assert( IsItemFlavorStructValid( flavor.guid, eValidation.ASSERT ) )

	if ( flavor.guid in fileLevel.multiOwnershipUnlockMap )
	{
		ItemFlavor target = GetItemFlavorByGUID( fileLevel.multiOwnershipUnlockMap[ flavor.guid ] )
		return target
	}

	return null
}



array<ItemFlavor> function ItemFlavor_GetGRXOwnershipTargettedBy( ItemFlavor flavor )
{
	array<ItemFlavor> out = []
	if ( flavor.grxOwnershipTargettedBy != null )
	{
		foreach ( int targeterGuid in expect array<int>(flavor.grxOwnershipTargettedBy) )
		{
			out.append( GetItemFlavorByGUID( targeterGuid ) )
		}
	}
	return out
}



void function GRXCurrency_RegisterNewCurrencyAssetInEventSlot( ItemFlavor newCurrencyFlav )
{
	Assert( ItemFlavor_GetType( newCurrencyFlav ) == eItemType.account_currency )
	ItemFlavor oldCurrencyFlav = GRX_CURRENCIES [ GRX_CURRENCY_EVENT ]
	GRX_CURRENCIES[ GRX_CURRENCY_EVENT ] = newCurrencyFlav

	int targetIndex = GRXCurrency_GetCurrencyIndex( oldCurrencyFlav )
	delete fileLevel.currencyIndexMap[ ItemFlavor_GetGUIDString( oldCurrencyFlav ) ]
	fileLevel.currencyIndexMap[ ItemFlavor_GetGUIDString( newCurrencyFlav ) ] <- targetIndex








}




int function GRXCurrency_GetCurrencyIndex( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_currency )
	return fileLevel.currencyIndexMap[ItemFlavor_GetGUIDString( flav )]
}




string function GRXCurrency_GetPurchaseSound( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_currency )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), "purchaseSound" )
}




asset function GRXCurrency_GetPreviewModel( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_currency )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flav ), "previewMdl" )
}




asset function GRXCurrency_GetRewardIcon( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_currency )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flav ), "rewardIcon" )
}




ItemFlavor function GRXCurrencyBundle_GetCurrencyFlav( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_currency_bundle )
	return GetItemFlavorByAsset( GetGlobalSettingsAsset( ItemFlavor_GetAsset( flav ), "currencyFlav" ) )
}




int function GRXCurrencyBundle_GetValue( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_currency_bundle )
	return GetCurrentPlaylistVarInt( "grx_" + ItemFlavor_GetGRXAlias( flav ) + "_count", -1 )
}




bool function GRX_IsInventoryReady( entity player = null )
{





	return GetPlayerGRXScriptState( player ).isInventoryReady
}

















bool function GRX_HasInventoryEverBeenReady( entity player = null )
{



		if ( player == null )
			player = GetLocalClientPlayer()





	PlayerGRXScriptState scriptState = GetPlayerGRXScriptState( player )
	return scriptState.hasInventoryEverBeenClean
}




int function GRX_GetPlayerEdition( entity player = null )
{



		if ( player == null )
			player = GetLocalClientPlayer()





	return GetPlayerGRXScriptState( player ).marketplaceEdition
}




int function GRX_GetNumberOfOwnedItemsByPlayer( array<ItemFlavor> items, entity player = null )
{
	if ( !GetPlayerGRXScriptState( player ).isInventoryReady )
		return 0
	int count = 0
	foreach( item in items )
	{
		if ( GRX_IsItemOwnedByPlayer( item, player ) )
		{
			count++
		}
	}
	return count
}

bool function GRX_IsItemOwnedByPlayer( ItemFlavor flav, entity player = null )
{
	Assert( GetPlayerGRXScriptState( player ).isInventoryReady, "Called GRX_IsItemOwnedByPlayer while the player's inventory was not ready" )

	return IsItemOwnedByPlayerInternal( flav, player )
}

bool function GRX_IsItemOwnedByPlayer_AllowOutOfDateData( ItemFlavor flav, entity player = null )
{
	
	
	
	
	
	

	return IsItemOwnedByPlayerInternal( flav, player )
}
bool function IsItemOwnedByPlayerInternal( ItemFlavor flav, entity player = null )
{



		if ( player == null )
			player = GetLocalClientPlayer()





	if ( ItemFlavor_GetPlaylistAvailability( flav ) == eItemFlavorPlaylistAvailability.FORCE_UNLOCK_FOR_SPECIAL_EVENT )
		return true

	int grxMode = ItemFlavor_GetGRXMode( flav )

	if ( grxMode == eItemFlavorGRXMode.OWNERSHIP_TARGET )
	{
		ItemFlavor ornull ownershipTargetOverride = ItemFlavor_GetGRXOwnershipTarget( flav )
		if ( ownershipTargetOverride != null )
			return IsItemOwnedByPlayerInternal( expect ItemFlavor(ownershipTargetOverride), player )

		Warning( "Item flavor %s is set to use GRX ownership of another item but it isn't a valid item: %s", string(ItemFlavor_GetAsset( flav )), string(GetGlobalSettingsAsset( ItemFlavor_GetAsset( flav ), "ownershipTarget" )) )
		return false
	}

	if ( grxMode == eItemFlavorGRXMode.MULTIPLE_OWNERSHIP_TARGET )
	{
		array< ItemFlavor > ownershipTargetList = ItemFlavor_GetGRXMultipleOwnershipRequirementsList( flav )
		if ( ownershipTargetList.len() == 0 )
		{
			Warning( "Item flavor %s is set to use GRX ownership of a set of items, but the set was empty: %s", string( ItemFlavor_GetAsset( flav ) ) )
			return false
		}

		foreach ( ItemFlavor ownershipFlav in ownershipTargetList )
		{
			if ( !IsItemOwnedByPlayerInternal( ownershipFlav, player ) )
			{
				return false
			}
		}

		return true
	}

	
	
	
	

	
	


		
		
		
		if ( grxMode == eItemFlavorGRXMode.REGULAR && IsLobby() && GetConVarBool( "mtx_allow_pending_grants_for_item_ownership" ) )
		{
			for ( int index = 0; index < QUEUED_REWARDS_MAX_COUNT; index++ )
			{
				SettingsAssetGUID rewardGUID = player.GetPersistentVarAsInt( format( "grxQueuedRewards[%d].rewardGUIDs[0]", index ) )
				if ( rewardGUID == 0 || !IsValidItemFlavorGUID( rewardGUID ) )
				{
					continue
				}

				ItemFlavor rewardFlav = GetItemFlavorByGUID( rewardGUID )
				if ( flav.guid == rewardFlav.guid )
				{
					printf( "%s() - reporting queued GRX reward as owned instead of relying on GRX_Inventory call or persistence cache --- this should be temporary and should resolve on next successful GRX refresh", FUNC_NAME() )
					return true
				}
			}
		}


	
	if ( ItemFlavor_HasUnlockFunc( flav ) && grxMode == GRX_ITEMFLAVORMODE_NONE )
		return ItemFlavor_PassesUnlockFunc( flav, player )

	if( ItemFlavor_HasExclusiveFunc( flav ) )
	{
		return ItemFlavor_PassesExclusiveFunc( flav, player )
	}

	if ( grxMode == GRX_ITEMFLAVORMODE_NONE )
		return true

	Assert( grxMode == GRX_ITEMFLAVORMODE_REGULAR, format( "Tried to call GRX_IsItemOwnedByPlayer on a non-regular GRX item: %s", string(ItemFlavor_GetAsset( flav )) ) )

	bool has
	if ( !GRX_HasInventoryEverBeenReady( player ) )
	{














		has = true
	}
	else
	{




				Assert( player == GetLocalClientPlayer() )



			has = GRX_HasItem( flav.grxIndex )

	}

	if ( IsEverythingUnlocked() )
		return true

	return has
}

































































































































































































































































































































































































































































































































































































































































































































































































































































ItemFlavorBag function GRX_GetMostRecentPackOpeningResults()
{
	Assert( fileLevel.mostRecentPackOpeningResultsOrNull != null, "Tried to call GRX_GetMostRecentPackOpeningResults with no pack opening results available for use" )

	ItemFlavorBag bag = expect ItemFlavorBag(fileLevel.mostRecentPackOpeningResultsOrNull)
	fileLevel.mostRecentPackOpeningResultsOrNull = null
	return bag
}






























































































































































































































































































































































asset function GRXPack_GetOpenButtonIcon( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flav ), "openButtonIcon" )
}




vector ornull function GRXPack_GetCustomColor( ItemFlavor flav, int idx )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )

	if ( !GetGlobalSettingsBool( ItemFlavor_GetAsset( flav ), "useCustomColors" ) )
		return null

	return GetGlobalSettingsVector( ItemFlavor_GetAsset( flav ), format( "customCol%d", idx ) )
}




vector ornull function GRXPack_GetCustomCountTextCol( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )

	if ( !GetGlobalSettingsBool( ItemFlavor_GetAsset( flav ), "useCustomColors" ) )
		return null

	return GetGlobalSettingsVector( ItemFlavor_GetAsset( flav ), "countTextCol" )
}




bool function GRXPack_IsEphemeral( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )

	return GetGlobalSettingsBool( ItemFlavor_GetAsset( flav ), "isEphemeral" )
}




bool function GRXPack_IsExpectedToContainSingleItemWithCurrency( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )

	return GetGlobalSettingsBool( ItemFlavor_GetAsset( flav ), "isExpectedToContainSingleItemWithCurrency" )
}




asset function GRXPack_GetTickModel( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flav ), "tickMdl" )
}




array<ItemFlavor> function GRXPack_GetPackContents( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )

	array<ItemFlavor> contents = []
	foreach ( var contentsBlock in IterateSettingsAssetArray( ItemFlavor_GetAsset( flav ), "packContents" ) )
	{
		asset contentAsset = GetSettingsBlockAsset( contentsBlock, "flavor" )
		if ( IsValidItemFlavorSettingsAsset( contentAsset ) )
			contents.append( GetItemFlavorByAsset( contentAsset ) )
	}
	return contents
}



asset function GRXPack_GetStickerCompletionRewardPack( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )
	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flav ), "stickerRewardPack" )
}

string function GRXPack_GetStickerCompletionRewardSequence( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )
	return GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), "stickerRewardSequence" )
}




string function GRXPack_GetTickSoundAlias( ItemFlavor flav, int soundKind )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )

	switch ( soundKind )
	{
		case eGRXPackTickSoundKind.TriadBounce: return GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), "triadBounceSound" )

		case eGRXPackTickSoundKind.PuckLand: return GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), "puckLandSound" )

		case eGRXPackTickSoundKind.Unpack: return GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), "unpackSound" )

		case eGRXPackTickSoundKind.DeployTriadExplo1: return GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), "deployTriadExplo1Sound" )

		case eGRXPackTickSoundKind.DeployTriadExplo2: return GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), "deployTriadExplo2Sound" )

		case eGRXPackTickSoundKind.DeployTriadExplo3: return GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), "deployTriadExplo3Sound" )
	}
	Assert( false )
	return ""
}




string function GRXPack_GetTickModelSkin( ItemFlavor flav )
{
	Assert( ItemFlavor_GetType( flav ) == eItemType.account_pack )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( flav ), "tickMdlSkin" )
}

bool function GRXPack_PlayerOwnsAllItemsInPack( entity player, ItemFlavor pack )
{
	
	if ( !IsValid( player ) || !GRX_HasInventoryEverBeenReady( player ) )
	{
		return false
	}

	
	foreach ( grxItem in GRXPack_GetPackContents( pack ) )
	{
		Assert( grxItem.grxMode != eItemFlavorGRXMode.NONE, "GRX mode cannot be none for items inside pack for ownership check." )







		if ( !GRX_HasItem( ItemFlavor_GetGRXIndex( grxItem ) ) )
		{
			return false
		}

	}

	return true
}








































































































































































































































































































































































































#if DEV
ItemFlavorBag ornull DEV_GRX_ForcePackResults_resultsOrNull
void function DEV_GRX_ForcePackResults( int packError, ... )
{
	if ( packError == -1 )
	{
		DEV_GRX_ForcePackResults_resultsOrNull = null
		return
	}

	ItemFlavorBag bag
	bag.associatedError = packError
	for ( int argIdx = 0; argIdx < vargc; argIdx += 2 )
	{
		bag.flavors.append( DEV_GetItemFlavorByGRXRef( expect string(vargv[argIdx + 0]) ) )
		bag.quantities.append( expect int(vargv[argIdx + 1]) )
	}

	DEV_GRX_ForcePackResults_resultsOrNull = bag
}
#endif



string function GRX_DBG_PREFIX()
{



		string vm = "CL"



	return "<><>GRX<><> " + vm + " " + FUNC_NAME( 1 )
}


void function GRXDbg( entity player, string label, ... )
{
	table stackInfos = expect table(getstackinfos( 2 ))
	string str       = format( "[GRXDbg %s %s %s %d %s] %s",
		expect string(stackInfos.src),
		SERVER ? "SV" : CLIENT ? "CL" : UI ? "UI" : "??",
		expect string(stackInfos.func),
		expect int(stackInfos.line),
		string(player),
		label
	)
	for ( int argIdx = 0; argIdx < vargc; argIdx += 2 )
	{
		if ( argIdx > 0 )
			str += "; "

		string key = expect string(vargv[argIdx + 0])
		var val    = vargv[argIdx + 1]
		str += key
		str += "= "
		str += string(val)
	}
	str += "\n"
	print( str )
	
}



















































































































































































































































































































































































































PlayerGRXScriptState function GetPlayerGRXScriptState( entity player )
{




			Assert( player == GetLocalClientPlayer() )






		return fileLevel.localGRXState

}






































































































































































































































































































































void function UIToClient_GRXInventoryCleanStateChange( bool isClean, int marketplaceEdition, bool isOfferResticted )
{
	PlayerGRXScriptState scriptState = GetPlayerGRXScriptState( GetLocalClientPlayer() )
	scriptState.isInventoryReady = isClean
	scriptState.marketplaceEdition = marketplaceEdition
	scriptState.isOfferRestricted = isOfferResticted
	if ( isClean )
	{
		scriptState.hasInventoryEverBeenClean = true

		
		ItemFlavor ornull activeBattlePass = GetActiveBattlePass()
		if ( activeBattlePass == null )
			return

		expect ItemFlavor( activeBattlePass )

		ItemFlavor xpBoostFlav = BattlePass_GetXPBoostFlav( activeBattlePass )
		SetConVarInt( "client_boostcount", GRX_GetConsumableCount( ItemFlavor_GetGRXIndex( xpBoostFlav ) ) )
	}	
}




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#if DEV



































#endif





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































void function ClientCodeCallback_GRXPackOpened( array<int> balanceDiffs, array<int> newItems, int packError )
{
	ItemFlavorBag bag

	for ( int currencyIndex = 0; currencyIndex < GRX_CURRENCY_COUNT; currencyIndex++ )
	{
		ItemFlavor currency = GRX_CURRENCIES[currencyIndex]
		int diff            = balanceDiffs[currencyIndex]
		if ( diff != 0 )
		{
			bag.flavors.append( currency )
			bag.quantities.append( diff )
		}
	}

	foreach ( int itemGRXIndex in newItems )
	{
		ItemFlavor flav = GetItemFlavorByGRXIndex( itemGRXIndex )
		bag.flavors.append( flav )
		bag.quantities.append( 1 )

		Newness_TEMP_MarkItemAsNewAndInformServer( flav )
	}

#if GRX_DEBUG_PRINTS
		if ( !fileLevel.GRX_DEBUG_PRINTS_disableTemporarily )
		{
			GRXDbg( null, "" )
			foreach ( int flavIndex, ItemFlavor flav in bag.flavors )
			{
				GRXDbg( null, "",
					"flav", DEV_DescItemFlavor( flav ),
					"name", Localize( ItemFlavor_GetLongName( flav ) ),
					"qty", bag.quantities[flavIndex] )
			}
		}
#endif

	
	if ( packError != GRX_INVENTORYERROR_NONE )
	{
		bag.associatedError = packError
#if GRX_DEBUG_PRINTS
			if ( !fileLevel.GRX_DEBUG_PRINTS_disableTemporarily )
				GRXDbg( null, "", "packError", packError )
#endif
	}

#if DEV
		int menuHeirloomOverrideGUID = DEV_GetMenuHeirloomOverrideGUID()

		if ( menuHeirloomOverrideGUID >= 0 )
		{
			ItemFlavor item = GetItemFlavorByGUID( menuHeirloomOverrideGUID )
			bag.flavors.append( item )
			bag.flavors.append( item )
			bag.flavors.append( item )
			bag.quantities.append( 1 )
			bag.quantities.append( 1 )
			bag.quantities.append( 1 )
			bag.associatedError = GRX_INVENTORYERROR_NONE
		}
		else if ( DEV_GRX_ForcePackResults_resultsOrNull != null )
		{
			printt( "PACK RESULTS FORCED!!" )
			bag = expect ItemFlavorBag(DEV_GRX_ForcePackResults_resultsOrNull)
		}
#endif

	RunUIScript( "ClientToUI_WORKAROUND_GRXPackOpened_Start", bag.associatedError )
	foreach ( int flavIdx, ItemFlavor flav in bag.flavors )
		RunUIScript( "ClientToUI_WORKAROUND_GRXPackOpened_Entry", ItemFlavor_GetGUID( flav ), bag.quantities[flavIdx] )
	RunUIScript( "ClientToUI_WORKAROUND_GRXPackOpened_Finish" )

	fileLevel.mostRecentPackOpeningResultsOrNull = bag
}





























































































































































































































































































































































































































































void function AssertCurrencyBundlePlaylistVarsAreValid( ItemFlavor bundle )
{
	
	if ( GRXCurrencyBundle_GetValue( bundle ) <= 0 )
		Warning( "Playlist must contain this var: %s", "grx_" + ItemFlavor_GetGRXAlias( bundle ) + "_count" )
}

void function RegisterStickerPacksWithRewards( ItemFlavor pack )
{
	if ( !GetGlobalSettingsBool( ItemFlavor_GetAsset( pack ), "hasStickers" ) )
	{
		return
	}

	if ( GRXPack_GetStickerCompletionRewardSequence( pack ) != "" )
	{
		fileLevel.stickerPacksWithRewards.append( pack )
	}
}

array<ItemFlavor> function GRX_GetStickerPacksWithRewards()
{
	return fileLevel.stickerPacksWithRewards
}














































































bool function GRX_IsOfferRestricted( entity player = null )
{

	if ( player == null )
		player = GetLocalClientPlayer()









		Assert( player == GetLocalClientPlayer() )
		PlayerGRXScriptState grxState = GetPlayerGRXScriptState( player )





	return grxState.isOfferRestricted
}
































































bool function GRX_IsItemCoveredByOfferRestrictions( ItemFlavor flav )
{
	if ( ItemFlavor_GetType( flav ) == eItemType.account_pack )
	{
		
		if ( ItemFlavor_GetQuality( flav, eRarityTier.NONE ) == eRarityTier.MYTHIC )
			return false

		
		ItemFlavor ornull activeBattlePass = GetActiveBattlePass()
		if ( activeBattlePass != null )
		{
			expect ItemFlavor( activeBattlePass )
			ItemFlavor basicPassPack = BattlePass_GetBasicPurchasePack( activeBattlePass )
			ItemFlavor bundlePassPack = BattlePass_GetBundlePurchasePack( activeBattlePass )

			if ( flav == basicPassPack || flav == bundlePassPack )
				return false
		}
		return true
	}

	return false
}




























































































































































#if DEV





















#endif





















































































































































































































