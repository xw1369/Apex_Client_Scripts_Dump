global function Teams_RegisterSignals
global function Teams_AddCallback_ScoreboardData
global function Teams_AddCallback_PlayerScores
global function Teams_AddCallback_SortScoreboardPlayers
global function Teams_AddCallback_Header
global function Teams_AddCallback_ScoreboardTitle
global function Teams_AddCallback_GetTeamColor
global function Teams_AddCallback_GetTeamName
global function Teams_AddCallback_GetTeamIcon
global function Teams_AddCallback_OnPlayerClick
global function Teams_AddCallback_DoModeSpecificWork
global function Teams_AddCallback_IsEnabled
global function Teams_HasCallback_ScoreboardTitle
global function Teams_HasCallback_ScoreboardData
global function Teams_HasCallback_PlayerScores
global function Teams_HasCallback_SortScoreboardPlayers
global function Teams_HasCallback_Header
global function Teams_HasCallback_GetTeamColor
global function Teams_HasCallback_GetTeamName
global function Teams_HasCallback_GetTeamIcon
global function Teams_HasCallback_OnPlayerClick
global function Teams_HasCallback_DoModeSpecificWork
global function Teams_HasCallback_IsEnabled
global function Teams_PopulatePlayerRow
global function Teams_PopulateHeaderRui
global function Teams_GetMaxTeamSize
global function Teams_GetTeamColor
global function Teams_GetTeamName
global function Teams_GetTeamIcon
global function Teams_ScoreboardMenu_DoModeSpecificWork
global function Teams_CanViewProfile

global function UICallback_ScoreboardMenu_BindTeamHeader
global function UICallback_ScoreboardMenu_BindTeamRow
global function UICallback_Scoreboard_OnReportClicked

global function ClientCallback_Teams_SetScoreboardData
global function ClientCallback_Teams_SetScoreboardTitle
global function ClientCallback_Teams_DoModeSpecificWork
global function ClientCallback_Teams_CloseScoreboard
global function ClientCallback_Teams_OnPlayerClicked
global function ClientCallback_Teams_OnPlayerViewProfile

global function IsLocalPlayerOnTeamSpectatorWithCallback

global function IsObserverInPrivateGame

const float TEAMS_DATA_UPDATE_FREQUENCY = 1.0

global struct ScoreboardData
{
	int             numScoreColumns
	array< int > 	columnNumDigits
	array< asset >  columnDisplayIcons
	array< float >  columnDisplayIconsScale
}


global struct TeamsScoreboardPlayerStats
{
	string score
	int numDigits
}

global struct TeamsScoreboardPlayer
{
	EHI playerEHI 

	string playerName
	string platformIcon

	asset playerImage
	asset playerBG

	bool isRatingLeader
	bool isKillLeader
	bool isFriendly
	bool isLocalPlayer

	int respawnStatus
	bool isDisconnected
	int bleedoutEndTime

	bool isValid = false

	vector customCharacterColor
	bool useCustomCharacterColor

	vector enemyBackgroundColor

	array< TeamsScoreboardPlayerStats > stats
	int team
}

struct
{
	table< int, array< TeamsScoreboardPlayer > > teamsOfPlayers
} teamsScoreboardCachedData

struct {
	ScoreboardData functionref( ) Callback_ScoreboardData
	array< string > functionref( entity ) Callback_PlayerScores
	array< TeamsScoreboardPlayer > functionref( array< TeamsScoreboardPlayer > players ) Callback_SortScoreboardPlayers
	void functionref( var, var, int ) Callback_Header
	vector functionref( int ) Callback_GetTeamColor
	string functionref( int ) Callback_GetTeamName
	asset functionref( int ) Callback_GetTeamIcon
	string functionref() Callback_ScoreboardTitle
	vector functionref( EHI ) Callback_OnPlayerClick
	void functionref( var ) Callback_DoModeSpecificWork
	bool functionref() Callback_IsEnabled

	string ModeSpecificWork_HudElementName

	CustomMatch_LobbyState CustomMatchData
} file

void function Teams_RegisterSignals()
{
	RegisterSignal( "Teams_HideScoreboard" )
	RegisterSignal( "Teams_OnResolutionChanged" )

	AddClientCallback_OnResolutionChanged( Teams_OnResolutionChanged )
	AddCallback_OnClientScriptInit( Teams_OnClientScriptInit )
	AddCallback_ClientOnPlayerConnectionStateChanged( Teams_OnPlayerConnectionStateChanged )
	SetupMaxTeamsForCache()
}

void function Teams_OnResolutionChanged()
{
	Signal( clGlobal.levelEnt, "Teams_OnResolutionChanged" )
}


void function Teams_AddCallback_ScoreboardTitle( string functionref() callbackFunc )
{
	Assert( !IsValid( file.Callback_ScoreboardTitle ), "ScoreboardTitle already has a callback function - " + string( callbackFunc ) + ", ensure this is only called once" )
	file.Callback_ScoreboardTitle = callbackFunc
}

bool function Teams_HasCallback_ScoreboardTitle()
{
	return IsValid( file.Callback_ScoreboardTitle )
}

void function Teams_AddCallback_ScoreboardData( ScoreboardData functionref(  ) callbackFunc )
{
	Assert( !IsValid( file.Callback_ScoreboardData ), "ScoreboardData already has a callback function - " + string( callbackFunc ) + ", ensure this is only called once" )
	file.Callback_ScoreboardData = callbackFunc
}

bool function Teams_HasCallback_ScoreboardData()
{
	return IsValid( file.Callback_ScoreboardData )
}

void function Teams_AddCallback_PlayerScores( array< string > functionref( entity ) callbackFunc )
{
	Assert( !IsValid( file.Callback_PlayerScores ), "PlayerScores already has a callback function - " + string( callbackFunc ) + ", ensure this is only called once" )
	file.Callback_PlayerScores = callbackFunc
}

bool function Teams_HasCallback_PlayerScores()
{
	return IsValid( file.Callback_PlayerScores )
}

void function Teams_AddCallback_SortScoreboardPlayers(  array< TeamsScoreboardPlayer > functionref( array< TeamsScoreboardPlayer > ) callbackFunc )
{
	Assert( !IsValid( file.Callback_SortScoreboardPlayers ), "SortScoreboardPlayers already has a callback function - " + string( callbackFunc ) + ", ensure this is only called once" )
	file.Callback_SortScoreboardPlayers = callbackFunc
}

bool function Teams_HasCallback_SortScoreboardPlayers()
{
	return IsValid( file.Callback_SortScoreboardPlayers )
}

void function Teams_AddCallback_Header(  void functionref( var, var, int ) callbackFunc )
{
	Assert( !IsValid( file.Callback_Header ), "_Header already has a callback function - " + string( callbackFunc ) + ", ensure this is only called once" )
	file.Callback_Header = callbackFunc
}

bool function Teams_HasCallback_Header()
{
	return IsValid( file.Callback_Header )
}

void function Teams_AddCallback_GetTeamColor(  vector functionref( int ) callbackFunc )
{
	Assert( !IsValid( file.Callback_GetTeamColor ), "_GetTeamColor already has a callback function - " + string( callbackFunc ) + ", ensure this is only called once" )
	file.Callback_GetTeamColor = callbackFunc
}

bool function Teams_HasCallback_GetTeamColor()
{
	return IsValid( file.Callback_GetTeamColor )
}

void function Teams_AddCallback_GetTeamName(  string functionref( int ) callbackFunc )
{
	Assert( !IsValid( file.Callback_GetTeamName ), "_GetTeamName already has a callback function - " + string( callbackFunc ) + ", ensure this is only called once" )
	file.Callback_GetTeamName = callbackFunc
}

bool function Teams_HasCallback_GetTeamName()
{
	return IsValid( file.Callback_GetTeamName )
}

void function Teams_AddCallback_GetTeamIcon(  asset functionref( int ) callbackFunc )
{
	Assert( !IsValid( file.Callback_GetTeamIcon ), "_GetTeamIcon already has a callback function - " + string( callbackFunc ) + ", ensure this is only called once" )
	file.Callback_GetTeamIcon = callbackFunc
}

bool function Teams_HasCallback_GetTeamIcon()
{
	return IsValid( file.Callback_GetTeamIcon )
}

void function Teams_AddCallback_OnPlayerClick(  vector functionref( EHI ) callbackFunc )
{
	Assert( !IsValid( file.Callback_OnPlayerClick ), "_OnPlayerClick already has a callback function - " + string( callbackFunc ) + ", ensure this is only called once" )
	file.Callback_OnPlayerClick = callbackFunc
}

bool function Teams_HasCallback_OnPlayerClick()
{
	return IsValid( file.Callback_OnPlayerClick )
}

void function Teams_AddCallback_DoModeSpecificWork( void functionref( var ) callbackFunc, string hudElementName = "" )
{
	Assert( !IsValid( file.Callback_DoModeSpecificWork ), "_DoModeSpecificWork already has a callback function - " + string( callbackFunc ) + ", ensure this is only called once" )
	file.Callback_DoModeSpecificWork = callbackFunc
	file.ModeSpecificWork_HudElementName = hudElementName
}

bool function Teams_HasCallback_DoModeSpecificWork()
{
	return IsValid( file.Callback_DoModeSpecificWork )
}

void function Teams_AddCallback_IsEnabled(  bool functionref() callbackFunc )
{
	Assert( !IsValid( file.Callback_IsEnabled ), "_IsEnabled already has a callback function - " + string( callbackFunc ) + ", ensure this is only called once" )
	file.Callback_IsEnabled = callbackFunc
}

bool function Teams_HasCallback_IsEnabled()
{
	return IsValid( file.Callback_IsEnabled )
}

void function Teams_OnPlayerConnectionStateChanged( entity player )
{
	if ( player.IsConnectionActive() )
	{
		int playerTeam = Teams_GetPlayerTeam( player )

		if( playerTeam < 0 || teamsScoreboardCachedData.teamsOfPlayers.len() - 1 < playerTeam  )
			return

		bool playerExists = false
		foreach( cachedPlayer in teamsScoreboardCachedData.teamsOfPlayers[ playerTeam ] )
		{
			if( cachedPlayer.playerEHI == ToEHI( player ) )
				playerExists = true
		}

		if( !playerExists && teamsScoreboardCachedData.teamsOfPlayers.len() - 1 >= playerTeam  )
			teamsScoreboardCachedData.teamsOfPlayers[ playerTeam ].append( GetTeamsScoreboardPlayer( player ))
	}
}

int function Teams_GetPlayerTeam( entity player )
{
	int playerTeam = player.GetTeam()

	if ( playerTeam == TEAM_SPECTATOR || playerTeam == TEAM_UNASSIGNED )
		playerTeam = -1
	else
	{
		if ( AllianceProximity_IsUsingAlliances() )
			playerTeam = AllianceProximity_GetAllianceFromTeam( playerTeam )
		else
			playerTeam = playerTeam - TEAM_IMC
	}

	return playerTeam
}

void function SetupMaxTeamsForCache()
{
	
	teamsScoreboardCachedData.teamsOfPlayers.clear() 

	int teamCount = GetTeamCount()

	for( int i = 0; i < teamCount; i++ )
	{
		array< TeamsScoreboardPlayer > emptyPlayers
		teamsScoreboardCachedData.teamsOfPlayers[ i ] <- emptyPlayers
	}
}

void function IsLocalPlayerOnTeamSpectatorWithCallback( var button, int teamIndex, int row )
{
	entity localPlayer = GetLocalClientPlayer()

	bool isMatchAdminSpectator = false
	if( IsValid( localPlayer ) )
		isMatchAdminSpectator = GamemodeUtility_IsPlayerOnTeamObserver( localPlayer )

	bool viewProfileAllowed = false
	if( teamIndex >= 0 )
	{
		TeamsScoreboardPlayer data = GetPlayer( teamIndex, row )
		PlayerInfo playerInfo = GetPlayerProfileInfo(data.playerEHI )
		viewProfileAllowed = Teams_CanViewProfile( playerInfo.uid, playerInfo.hardware )
	}

	RunUIScript( "SetPlayerTooltipAfterCallback", button, isMatchAdminSpectator, viewProfileAllowed )
}


ScoreboardData function GetScoreboardData()
{
	if( IsValid(file.Callback_ScoreboardData) && !IsObserverInStartOfPrivateGame() )
	{
		return file.Callback_ScoreboardData()
	}
	else
	{
		ScoreboardData data
		data.numScoreColumns = 0

		return data
	}

	unreachable
}

array<string> function GetPlayerScores( entity player )
{
	if( IsValid(file.Callback_PlayerScores) && !IsObserverInStartOfPrivateGame() )
	{
		return file.Callback_PlayerScores( player )
	}
	else
	{
		array<string> empty = []

		return empty
	}

	unreachable
}

bool function IsObserverInStartOfPrivateGame()
{
	return IsPrivateMatch() && GetLocalClientPlayer().IsObserver() && GetLocalClientPlayer().GetTeam() == TEAM_SPECTATOR && GetGameState() < eGameState.Playing
}

bool function IsObserverInPrivateGame()
{
	return IsPrivateMatch() && GetLocalClientPlayer().IsObserver() && GetLocalClientPlayer().GetTeam() == TEAM_SPECTATOR
}

TeamsScoreboardPlayer function GetPlayer( int teamIndex, int row )
{
	TeamsScoreboardPlayer data

	if( teamsScoreboardCachedData.teamsOfPlayers.len() > teamIndex )
	{
		array<TeamsScoreboardPlayer> cachedTeamData = teamsScoreboardCachedData.teamsOfPlayers[teamIndex]
		if ( cachedTeamData.len() > row )
			data = cachedTeamData[ row ]
	}

	return data
}

int function ScoreboardMenu_GetTeamSize( int teamIndex )
{
	if( teamsScoreboardCachedData.teamsOfPlayers.len() > teamIndex )
	{
		array<TeamsScoreboardPlayer> cachedTeamData = teamsScoreboardCachedData.teamsOfPlayers[teamIndex]
		return cachedTeamData.len()
	}

	return 0
}

int function GetTeamCount()
{
	if ( AllianceProximity_IsUsingAlliances() )
		return AllianceProximity_GetMaxNumAlliances()
	else
		return GetCurrentPlaylistVarInt( "max_teams", 2 )

	unreachable
}

int function Teams_GetMaxTeamSize()
{
	if( AllianceProximity_IsUsingAlliances() )
		return AllianceProximity_GetMaxNumPlayersPerAlliance()
	else
		return GetMaxTeamSizeForPlaylist( GetCurrentPlaylistName() )

	unreachable
}


void function ClientCallback_Teams_SetScoreboardData( var panel )
{
	array<int> teams = GetAllValidPlayerTeams()
	int maxTeamSize = GetMaxTeamSizeForPlaylist( GetCurrentPlaylistName() )

	entity localplayer = GetLocalClientPlayer()
	int localPlayerTeamIndex = Teams_GetPlayerTeam( localplayer )

	
	int mode = GetCurrentPlaylistVarInt( "scoreboard_mode_id", 0 )
	RunUIScript( "UI_SetScoreboardTeamData", panel, GetTeamCount(), Teams_GetMaxTeamSize(), localPlayerTeamIndex, mode )

}


void function ClientCallback_Teams_SetScoreboardTitle( var panel )
{
	string titleText = ""
	if( IsValid(file.Callback_ScoreboardTitle) )
	{
		titleText = file.Callback_ScoreboardTitle()
	}

	RunUIScript( "UI_SetScoreboardTitle", panel, titleText )
}

void function ClientCallback_Teams_DoModeSpecificWork( var panel )
{
	Teams_ScoreboardMenu_DoModeSpecificWork( panel )
}

void function ClientCallback_Teams_OnPlayerViewProfile(  int teamIndex, int row  )
{
	TeamsScoreboardPlayer data = GetPlayer( teamIndex, row )
	if( data.isValid )
	{
		PlayerInfo playerInfo = GetPlayerProfileInfo(data.playerEHI )
		if( Teams_CanViewProfile( playerInfo.uid, playerInfo.hardware ) )
		{
			ViewPlayerProfileByPlayerInfo( data.playerEHI )
		}
	}
}

bool function Teams_CanViewProfile( string otherPlayerUid, string otherPlayerHardware )
{
	string hardware = GetPlayerHardware()

	if ( otherPlayerUid == "" )
		return false

	if ( hardware != otherPlayerHardware )
	{
		if( hardware == "PS4" || hardware == "PS5" )
		{
			
			if( otherPlayerHardware != "PS4" && otherPlayerHardware != "PS5" )
			{
				return false
			}
		}
		else if( hardware == "X1" || hardware == "XB5" )
		{
			
			if( otherPlayerHardware != "X1" && otherPlayerHardware != "XB5" )
			{
				return false
			}
		}
		else
		{
			return false
		}
	}

	return true
}


void function ClientCallback_Teams_CloseScoreboard()
{
	Signal( clGlobal.levelEnt, "Teams_HideScoreboard" )
}

void function ClientCallback_Teams_OnPlayerClicked(  int teamIndex, int row  )
{
	TeamsScoreboardPlayer data = GetPlayer( teamIndex, row )

	if( IsPrivateMatch() && GetLocalClientPlayer().IsObserver() && GetLocalClientPlayer().GetTeam() == TEAM_SPECTATOR && GetGameState() < eGameState.WinnerDetermined )
	{
		entity player = FromEHI( data.playerEHI )
		if ( !IsValid( player ) )
			return

		if ( !IsAlive( player ) )
			return

		if ( GetLocalClientPlayer().GetObserverTarget() == player )
			return

		Remote_ServerCallFunction( "ClientCallback_PrivateMatchChangeObserverTarget", player )
		RunUIScript( "ClosePrivateMatchGameStatusMenu", null )
	}
	else
	{
		if( IsValid( file.Callback_OnPlayerClick ) && data.isValid )
			file.Callback_OnPlayerClick( data.playerEHI )
	}
}


void function UICallback_ScoreboardMenu_BindTeamHeader( var header, var frame, int teamIndex, float rowWidth )
{
	thread Thread_Teams_PopulateHeaderRui( header, frame, teamIndex, rowWidth )
}

void function UICallback_ScoreboardMenu_BindTeamRow( var panel, var button, int teamIndex, int row, float rowWidth )
{
	thread Threaded_PopulateRowForPlayer( panel, button, teamIndex, row, rowWidth )
}

void function UICallback_Scoreboard_OnReportClicked( var button, int teamIndex, int row )
{
	TeamsScoreboardPlayer data = GetPlayer( teamIndex, row )

	if( data.isValid )
		ReportPlayer( data.playerEHI )
}

void function Teams_OnClientScriptInit( entity player )
{
	thread Thread_Teams_UpdateCache()
}

array< TeamsScoreboardPlayer > function Teams_SortPlayersOnTeam( array< TeamsScoreboardPlayer > players )
{
	
	players.sort( SortPlayersByName )

	if( IsObserverInStartOfPrivateGame() )
	{
		players.sort( SortPlayersByLockStep )
	}
	else if( IsValid(file.Callback_SortScoreboardPlayers) )
	{
		players = file.Callback_SortScoreboardPlayers( players )
	}

	return players
}

void function Thread_Teams_UpdateCache()
{
	while ( GetGameState() < eGameState.WinnerDetermined )
	{
		wait TEAMS_DATA_UPDATE_FREQUENCY
		if ( IsWatchingKillReplay() ) 
			continue

		int teamCount = GetTeamCount()

		for( int i = 0; i < teamCount; i++ )
		{
			
			if ( IsWatchingKillReplay() )
				break

			if( teamsScoreboardCachedData.teamsOfPlayers.len() - 1 >= i )
			{
				array< TeamsScoreboardPlayer > players

				foreach( cachedPlayer in teamsScoreboardCachedData.teamsOfPlayers[ i ] )
				{
					entity player = FromEHI( cachedPlayer.playerEHI )
					if( IsValid( player ) && player.IsConnectionActive()  )
					{
						players.append( GetTeamsScoreboardPlayer( player ) )
					}
					else
					{
						
						if( !GamemodeUtility_IsJIPEnabled() )
						{
							cachedPlayer.isDisconnected = true
							players.append( cachedPlayer )
						}
					}
				}

				teamsScoreboardCachedData.teamsOfPlayers[ i ] <- Teams_SortPlayersOnTeam( players )
			}

			
			WaitFrame()
		}
	}
}


void function Thread_Teams_PopulateHeaderRui(var header, var frame, int teamIndex, float rowWidth )
{
	EndSignal( clGlobal.levelEnt, "Teams_HideScoreboard" )
	EndSignal( clGlobal.levelEnt, "Teams_OnResolutionChanged" )

	var headerRui = Hud_GetRui( header )
	var frameRui = Hud_GetRui( frame )

	while ( true )
	{
		ScoreboardData data = GetScoreboardData()
		Teams_PopulateHeaderRui( headerRui, teamIndex, data, rowWidth )
		Teams_PopulateFrameRui( frameRui, teamIndex, data, rowWidth )

		int team = Teams_NormalizeTeamIndex( teamIndex )

		if( IsValid(file.Callback_Header) )
			file.Callback_Header( headerRui, frameRui, team )

		WaitFrame()
	}
}
void function Teams_PopulateHeaderRui( var scoreHeaderRui, int teamIndex, ScoreboardData data, float rowWidth )
{
	RuiSetInt( scoreHeaderRui, "numScoreColumns", data.numScoreColumns )

	for( int i = 0; i < data.numScoreColumns; i++ )
	{
		RuiSetString( scoreHeaderRui, "playerScore" + ( i + 1 ) + "Image", data.columnDisplayIcons[i] )
		RuiSetFloat( scoreHeaderRui, "playerScore" + ( i + 1 ) + "ImageScale", data.columnDisplayIconsScale[i] )
		RuiSetInt( scoreHeaderRui, "playerScore" + ( i + 1 ) + "NumDigits", data.columnNumDigits[i] )
	}

	string teamHeader = Localize( "#TEAM_NUMBERED", (teamIndex + 1) )
	if( UseThematicTeamNames() )
		teamHeader = Localize( GetThematicTeamName( AllianceProximity_IsUsingAlliances() ? AllianceProximity_GetAllianceFromTeam( teamIndex + TEAM_IMC ) : teamIndex + TEAM_IMC ) )

	RuiSetString( scoreHeaderRui, "headerText", teamHeader )
	RuiSetFloat( scoreHeaderRui, "rowWidth", rowWidth )
	RuiSetInt( scoreHeaderRui, "gameState", GetGameState() )

	vector teamColor
	if( IsValid(file.Callback_GetTeamColor) )
		teamColor = file.Callback_GetTeamColor( Teams_NormalizeTeamIndex( teamIndex ) )
	else
		teamColor = SrgbToLinear( GetSkydiveSmokeColorForTeam( teamIndex + TEAM_IMC) / 255.0 )

	RuiSetColorAlpha( scoreHeaderRui, "teamColor", teamColor, 1 )


	string teamName = ""
	if( IsPrivateMatch() && !AllianceProximity_IsUsingAlliances() )
	{
		string customMatchTeamName = PrivateMatch_GetTeamName( teamIndex + TEAM_IMC )

		if( customMatchTeamName != "" && customMatchTeamName != Localize( "#TEAM_NUMBERED", (teamIndex + 1) ) )
			teamName = "(" + customMatchTeamName.toupper() + ")"
	}
	RuiSetString( scoreHeaderRui, "headerAltText", teamName )
}

vector function Teams_GetTeamColor( int teamIndex )
{
	vector teamColor
	if( IsValid(file.Callback_GetTeamColor) )
	{
		if( AllianceProximity_IsUsingAlliances() )
			teamIndex = AllianceProximity_GetAllianceFromTeam( teamIndex )

		teamColor = file.Callback_GetTeamColor( teamIndex )
	}
	else
		teamColor = GetSkydiveSmokeColorForTeam( teamIndex )

	return teamColor
}

string function Teams_GetTeamName( int teamIndex )
{
	string teamName
	if( IsValid(file.Callback_GetTeamName) )
		teamName = file.Callback_GetTeamName( Teams_NormalizeTeamIndex( teamIndex ) )
	else if ( UseThematicTeamNames() )
		teamName = GetThematicTeamName( Teams_NormalizeTeamIndex( teamIndex ) )

	return teamName
}

asset function Teams_GetTeamIcon( int teamIndex )
{
	asset teamIcon = $""
	if( IsValid(file.Callback_GetTeamIcon) )
		teamIcon = file.Callback_GetTeamIcon( Teams_NormalizeTeamIndex( teamIndex ) )

	return teamIcon
}

void function Teams_ScoreboardMenu_DoModeSpecificWork( var panel )
{
	thread Threaded_DoModeSpecificWork( panel )
}

void function Teams_PopulateFrameRui( var scoreFrameRui, int teamIndex, ScoreboardData data, float rowWidth )
{
	vector teamColor
	if( IsValid(file.Callback_GetTeamColor) )
		teamColor = file.Callback_GetTeamColor( Teams_NormalizeTeamIndex( teamIndex ) )
	else
		teamColor = SrgbToLinear( GetSkydiveSmokeColorForTeam( teamIndex + TEAM_IMC ) / 255.0 )

	RuiSetColorAlpha( scoreFrameRui, "teamColor", teamColor, 1 )
}

int function Teams_NormalizeTeamIndex( int teamIndex )
{
	int team = -1

	if( AllianceProximity_IsUsingAlliances() )
		team = teamIndex
	else
		team = teamIndex + TEAM_IMC

	return team
}





TeamsScoreboardPlayer function GetTeamsScoreboardPlayer( entity player )
{
	TeamsScoreboardPlayer data

	EHI playerEHI = ToEHI( player )

	entity localPlayer = GetLocalClientPlayer()
	int localTeam = localPlayer.GetTeam()

	ItemFlavor character = LoadoutSlot_GetItemFlavor( playerEHI, Loadout_Character() )

	data.playerEHI = playerEHI
	data.playerName = GetDisplayablePlayerNameFromEHI( playerEHI )
	data.playerImage = CharacterClass_GetGalleryPortrait( character )

	if( IsObserverInStartOfPrivateGame() && IsValid( player ) )
	{
		int lockStepIndex = GetGlobalNetInt( CHARACTER_SELECT_NETVAR_LOCK_STEP_INDEX )
		int playerLockStepIndex = player.GetPlayerNetInt( CHARACTER_SELECT_NETVAR_LOCK_STEP_PLAYER_INDEX )

		if(  lockStepIndex <= playerLockStepIndex )
			data.playerImage  = $""
	}

	data.playerBG = CharacterClass_GetGalleryPortraitBackground( character )
	data.isRatingLeader = GradeFlagsHas( player, eTargetGrade.EXP_LEADER )
	data.isKillLeader = GradeFlagsHas( player, eTargetGrade.CHAMP_KILLLEADER )
	data.isLocalPlayer = player == localPlayer

	data.respawnStatus = (GetGameState() >= eGameState.WinnerDetermined)? 0 : player.GetPlayerNetInt( "respawnStatus" )
	data.isDisconnected = (GetGameState() >= eGameState.WinnerDetermined)? false : !player.IsConnectionActive()
	data.bleedoutEndTime = (GetGameState() >= eGameState.WinnerDetermined)? 0 : int( player.GetPlayerNetTime( "bleedoutEndTime" ) )

	data.customCharacterColor = SrgbToLinear( GetPlayerInfoColor( player ) / 255.0 )
	data.useCustomCharacterColor = localTeam == player.GetTeam()
	data.enemyBackgroundColor =  SrgbToLinear( GetKeyColor( COLORID_ENEMY ) / 255.0 )


		data.useCustomCharacterColor = data.useCustomCharacterColor || GameModeVariant_IsActive( eGameModeVariants.FREEDM_GUNGAME )


	if( AllianceProximity_IsUsingAlliances() )
	{
		data.team = AllianceProximity_GetAllianceFromTeam( player.GetTeam() )

		if( localTeam == TEAM_SPECTATOR )
		{
			data.isFriendly = false
			data.useCustomCharacterColor = false
		}
		else
		{
			data.isFriendly = AllianceProximity_GetAllianceFromTeam( player.GetTeam() ) == AllianceProximity_GetAllianceFromTeam( localTeam )
			if ( (GetGameState() >= eGameState.WinnerDetermined) )
			{
				data.useCustomCharacterColor = AllianceProximity_GetOriginalPlayerTeam_FromPlayerEHI( ToEHI( localPlayer ) ) == AllianceProximity_GetOriginalPlayerTeam_FromPlayerEHI( playerEHI )
			}
		}
	}
	else
	{
		data.team = player.GetTeam()
		data.isFriendly = player.GetTeam() == localTeam
	}

	data.isValid = true

	array< string > scores = GetPlayerScores( player )
	ScoreboardData gameData = GetScoreboardData()

	for( int j = 0; j < gameData.numScoreColumns; j++ )
	{
		TeamsScoreboardPlayerStats stats
		stats.score = scores[j]
		stats.numDigits = gameData.columnNumDigits[j]

		data.stats.append(stats)
	}

	return data
}

void function Threaded_PopulateRowForPlayer( var panel, var button, int teamIndex, int row, float rowWidth )
{
	var rui = Hud_GetRui( button )
	EndSignal( clGlobal.levelEnt, "Teams_HideScoreboard" )
	EndSignal( clGlobal.levelEnt, "Teams_OnResolutionChanged" )

	while( true )
	{
		TeamsScoreboardPlayer data = GetPlayer( teamIndex, row )
		Hud_Show( button )
		if ( data.isValid )
		{
			bool isEnabled = true
			if( IsObserverInStartOfPrivateGame() )
				isEnabled = !IsObserverInStartOfPrivateGame()
			else if( IsValid( file.Callback_IsEnabled ) )
				isEnabled = file.Callback_IsEnabled()

			if( isEnabled )
				RunUIScript( "UI_ToggleReportTooltip", button, !data.isLocalPlayer )
			else
				RunUIScript( "UI_ToggleReportTooltip", button, false )

			Hud_SetEnabled( button, isEnabled )
			Hud_SetLocked( button, false )
			


			RuiSetBool( rui, "isEmpty", false )
			RuiSetString( rui, "status", "" )
			Teams_PopulatePlayerRow( rui, data, rowWidth )

		}
		else
		{
			int teamSize = ScoreboardMenu_GetTeamSize( teamIndex )
			bool modeHasJIP = GamemodeUtility_IsJIPEnabled() && !IsPrivateMatch()
			RunUIScript( "UI_ToggleReportTooltip", button, false )
			Hud_SetLocked( button, true )
			Hud_SetEnabled( button, false )
			if( row == teamSize && modeHasJIP )
			{
				RuiSetString( rui, "status", Localize("#JIP_SEARCHING_FOR_PLAYER" ) )
				RuiSetBool( rui, "isJIP", true )
				RuiSetBool( rui, "isEmpty", false )
				RuiSetImage( rui, "playerImage", $"rui/menu/buttons/lobby_character_select/portrait_selecting_tint" )

				vector teamColor
				if( IsValid(file.Callback_GetTeamColor) )
					teamColor = file.Callback_GetTeamColor( Teams_NormalizeTeamIndex( teamIndex ) )
				else
					teamColor = SrgbToLinear( GetSkydiveSmokeColorForTeam( teamIndex + TEAM_IMC ) / 255.0 )

				RuiSetColorAlpha( rui, "playerImageTint", teamColor, 1.0 )
			}
			else
			{
				RuiSetString( rui, "status", "" )
				RuiSetBool( rui, "isEmpty", true )
				RuiSetBool( rui, "isJIP", false )
				RuiSetImage( rui, "playerImage", $"" )
				RuiSetColorAlpha( rui, "playerImageTint", < 1.0, 1.0, 1.0 >, 1.0 )
			}

			RuiSetInt( rui, "respawnStatus", 0 )
			RuiSetString( rui, "playerName", "" )
			RuiSetBool( rui, "isFriendly", true )
			RuiSetBool( rui, "isRatingLeader", false )
			RuiSetBool( rui, "isKillLeader", false )
			RuiSetBool( rui, "isLocalPlayer", false )
			RuiSetBool( rui, "useCustomCharacterColor", false )
			RuiSetString( rui, "platformIcon", $"" )
			RuiSetInt( rui, "numScoreColumns", 0 )
		}


		wait 0.2
	}
}

void function Teams_PopulatePlayerRow( var rui, TeamsScoreboardPlayer data, float rowWidth )
{
	RuiSetFloat( rui, "rowWidth", rowWidth )
	RuiSetInt( rui, "screenHeight", GetScreenSize().height )
	RuiSetInt( rui, "screenWidth", GetScreenSize().width )
	RuiSetInt( rui, "numScoreColumns", data.stats.len() )

	for( int j = 0; j < data.stats.len(); j++ )
	{
		RuiSetString( rui, "playerScore" + ( j + 1 ) , data.stats[j].score )
		RuiSetInt( rui, "playerScore" + ( j + 1 ) + "NumDigits" , data.stats[j].numDigits )
	}

	if ( CrossplayEnabled() && CrossplayUserOptIn() )
		RuiSetString( rui, "platformIcon", data.platformIcon )

	RuiSetString( rui, "playerName", data.playerName )
	RuiSetBool( rui, "isFriendly", data.isFriendly )
	RuiSetImage( rui, "playerImage", data.playerImage )
	RuiSetImage( rui, "playerBG", data.playerBG )
	RuiSetBool( rui, "isRatingLeader", data.isRatingLeader )
	RuiSetBool( rui, "isKillLeader", data.isKillLeader )
	RuiSetBool( rui, "isLocalPlayer", data.isLocalPlayer )
	RuiSetInt( rui, "respawnStatus", data.respawnStatus )
	RuiSetInt( rui, "bleedoutEndTime", data.bleedoutEndTime )
	RuiSetColorAlpha( rui, "customCharacterColor", data.customCharacterColor, 1.0 )
	RuiSetBool( rui, "useCustomCharacterColor", data.useCustomCharacterColor )
	RuiSetBool( rui, "isJIP", false )
	RuiSetBool( rui, "isDisconnected", data.isDisconnected )
	RuiSetColorAlpha( rui, "playerImageTint", < 1.0, 1.0, 1.0 >, 1.0 )
	RuiSetColorAlpha( rui, "enemyBackgroundColor", data.enemyBackgroundColor, 1.0 )
}

void function Threaded_DoModeSpecificWork( var panel )
{
	EndSignal( clGlobal.levelEnt, "Teams_HideScoreboard" )
	EndSignal( clGlobal.levelEnt, "Teams_OnResolutionChanged" )

	while ( true )
	{
		if( IsValid( file.Callback_DoModeSpecificWork ) )
		{
			if ( file.ModeSpecificWork_HudElementName != "" )
			{
				var element = Hud_GetChild( panel, file.ModeSpecificWork_HudElementName )
				file.Callback_DoModeSpecificWork( element )
			}
			else
			{
				file.Callback_DoModeSpecificWork( panel )
			}
		}

		wait 0.2
	}
}

int function SortPlayersByLockStep( TeamsScoreboardPlayer a, TeamsScoreboardPlayer b )
{
	entity playerA = FromEHI( a.playerEHI )
	entity playerB = FromEHI( b.playerEHI )

	if( !IsValid( playerA ) ||  !IsValid( playerB ) )
		return 0

	int aStepIndex = playerA.GetPlayerNetInt( CHARACTER_SELECT_NETVAR_LOCK_STEP_PLAYER_INDEX )
	int bStepIndex = playerB.GetPlayerNetInt( CHARACTER_SELECT_NETVAR_LOCK_STEP_PLAYER_INDEX )

	if ( aStepIndex > bStepIndex )
		return 1

	if ( aStepIndex < bStepIndex )
		return -1

	return 0
}

int function SortPlayersByName( TeamsScoreboardPlayer a, TeamsScoreboardPlayer b )
{
	entity playerA = FromEHI( a.playerEHI )
	entity playerB = FromEHI( b.playerEHI )

	if( !IsValid( playerA ) ||  !IsValid( playerB ) )
		return 0

	if ( playerA.GetPlayerName() > playerB.GetPlayerName() )
		return 1

	if ( playerA.GetPlayerName() < playerB.GetPlayerName() )
		return -1

	return 0
}

void function Teams_PopulateLockdownRui( var lockdownRui )
{

}